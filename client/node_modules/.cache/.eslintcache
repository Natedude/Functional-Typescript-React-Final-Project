[{"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/index.tsx":"1","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/App.tsx":"2","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/MainPage.tsx":"3","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/State.tsx":"4","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Socket.tsx":"5","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Reducer.tsx":"6","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Instruments.tsx":"7","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/SideNav.tsx":"8","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Visualizers.tsx":"9","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/Waveform.tsx":"10","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Piano.tsx":"11","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Nishamgr_Flute.tsx":"12","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/Nishamgr_Circle.tsx":"13","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/Natedude.tsx":"14","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Natedude.tsx":"15","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/matthewMadore.tsx":"16","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/matthewMadore.tsx":"17","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/jaq19_Visual.tsx":"18","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/jaq19_visual.tsx":"19","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/jaq19_instrument.tsx":"20"},{"size":612,"mtime":1636428583148,"results":"21","hashOfConfig":"22"},{"size":1410,"mtime":1638863634455,"results":"23","hashOfConfig":"22"},{"size":3382,"mtime":1638867566135,"results":"24","hashOfConfig":"22"},{"size":1592,"mtime":1638867585466,"results":"25","hashOfConfig":"22"},{"size":977,"mtime":1636428583146,"results":"26","hashOfConfig":"22"},{"size":3238,"mtime":1636428583146,"results":"27","hashOfConfig":"22"},{"size":3341,"mtime":1638863634455,"results":"28","hashOfConfig":"22"},{"size":5325,"mtime":1638869181503,"results":"29","hashOfConfig":"22"},{"size":1618,"mtime":1638072515598,"results":"30","hashOfConfig":"22"},{"size":900,"mtime":1637220455802,"results":"31","hashOfConfig":"22"},{"size":4990,"mtime":1638863634457,"results":"32","hashOfConfig":"22"},{"size":6070,"mtime":1638863634457,"results":"33","hashOfConfig":"22"},{"size":1034,"mtime":1638072515601,"results":"34","hashOfConfig":"22"},{"size":3026,"mtime":1638768968235,"results":"35","hashOfConfig":"22"},{"size":9278,"mtime":1638917011345,"results":"36","hashOfConfig":"22"},{"size":1355,"mtime":1638783908552,"results":"37","hashOfConfig":"22"},{"size":15241,"mtime":1638917984971,"results":"38","hashOfConfig":"22"},{"size":7894,"mtime":1638867585466,"results":"39","hashOfConfig":"22"},{"size":7797,"mtime":1638918426382,"results":"40","hashOfConfig":"22"},{"size":6166,"mtime":1638917018238,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1ao2n97",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/index.tsx",[],["88","89"],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/App.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/MainPage.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/State.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Socket.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Reducer.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Instruments.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/SideNav.tsx",["90"],"// 3rd party library imports\nimport classNames from 'classnames'\nimport { List } from 'immutable'\nimport React from 'react'\nimport { useLocation, Link } from 'react-router-dom'\nimport {\n  RadioButton20,\n  RadioButtonChecked20,\n  Music20\n} from '@carbon/icons-react'\n\n// project imports\nimport { DispatchAction } from './Reducer'\nimport { AppState } from './State'\nimport { Instrument } from './Instruments'\nimport { Visualizer } from './Visualizers'\n\n/** ------------------------------------------------------------------------ **\n * All the components in the side navigation.\n ** ------------------------------------------------------------------------ */\n\ninterface SideNavProps {\n  state: AppState\n  dispatch: React.Dispatch<DispatchAction>\n}\n\nconst Section: React.FC<{ title: string }> = ({ title, children }) => {\n  return (\n    <div className='flex flex-column h-25 bb b--light-gray pa3'>\n      <div className='fw7 mb2'>{title} </div>\n      <div className='flex-auto overflow-scroll'>{children}</div>\n    </div>\n  )\n}\n\nconst SearchSection: React.FC<{ title: string }> = ({ title, children }) => {\n  return (\n    <div className='flex flex-column h-25 bb b--light-gray pa3'>\n      <div className='fw7 mb2'>{title} </div>\n      <div className='flex-auto overflow-scroll'>{children}</div>\n    </div>\n  )\n}\n\ninterface RadioButtonProps {\n  to: any\n  text: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction RadioButton ({\n  to,\n  text,\n  active,\n  onClick\n}: RadioButtonProps): JSX.Element {\n  return (\n    <Link to={to} className='no-underline'>\n      <div\n        className={classNames('f6 flex items-center white', { fw7: active })}\n        onClick={onClick}\n      >\n        {active ? (\n          <RadioButtonChecked20 className='mr1' />\n        ) : (\n          <RadioButton20 className='mr1' />\n        )}\n        <div className='dim'>{text}</div>\n      </div>\n    </Link>\n  )\n}\n\nfunction Instruments ({ state }: SideNavProps): JSX.Element {\n  const instruments: List<Instrument> = state.get('instruments')\n  const activeInstrument = state.get('instrument')?.name\n  const location = useLocation()\n\n  return (\n    <Section title='Instruments'>\n      {instruments.map(i => (\n        <RadioButton\n          key={i.name}\n          to={`/${i.name}${location.search}`}\n          text={i.name}\n          active={i.name === activeInstrument}\n          onClick={() => console.log(i.name)}\n        />\n      ))}\n    </Section>\n  )\n}\n\nfunction Visualizers ({ state }: SideNavProps): JSX.Element {\n  const visualizers: List<Visualizer> = state.get('visualizers')\n  const activeVisualizer = state.get('visualizer')?.name\n  const location = useLocation()\n\n  return (\n    <Section title='Visualizers'>\n      {visualizers.map(v => (\n        <RadioButton\n          key={v.name}\n          to={{\n            pathname: location.pathname,\n            search: `?visualizer=${v.name}`\n          }}\n          text={v.name}\n          active={v.name === activeVisualizer}\n          onClick={() => console.log(v.name)}\n        />\n      ))}\n    </Section>\n  )\n}\n\n//\n\nfunction Songs ({ state, dispatch }: SideNavProps): JSX.Element {\n  const songs: List<any> = state.get('songs', List())\n  return (\n    <Section title='Playlist'>\n      {songs.map(song => (\n        <div\n          key={song.get('id')}\n          className='f6 pointer underline flex items-center no-underline i dim'\n          onClick={() =>\n            dispatch(new DispatchAction('PLAY_SONG', { id: song.get('id') }))\n          }\n        >\n          <Music20 className='mr1' />\n          {`\"${song.get('songTitle')}\"\\n -by ${song.get('artist')} -from Album: \"${song.get('album')}\"`}\n        </div>\n      ))}\n    </Section>\n  )\n}\n\n// add a search bar\n// user should type a word\n// search will filter out any instances of the meta data that corresponds to what typed in\n\nfunction Search ({ state, dispatch }: SideNavProps): JSX.Element {\n  const songs: List<any> = state.get('songs', List())\n  return (\n    <SearchSection title='Search'>\n      {/* {songs.map(song => (\n        <div\n          key={song.get('id')}\n          className='f6 pointer underline flex items-center no-underline i dim'\n          onClick={() =>\n            dispatch(new DispatchAction('PLAY_SONG', { id: song.get('id') }))\n          }\n        >\n          <Music20 className='mr1' />\n          {song.get('songTitle')}\n        </div>\n      ))} */}\n    </SearchSection>\n  )\n}\nexport function SideNav ({ state, dispatch }: SideNavProps): JSX.Element {\n  return (\n    <div className='absolute top-0 left-0 bottom-0 w5 z-1 shadow-1 br  b--white white bg-near-black flex flex-column'>\n      <div className='h3 fw7 f5 flex items-center pl3 bb bg-near-black'>\n        Nameless App\n      </div>\n      <div className='flex-auto'>\n        <Instruments state={state} dispatch={dispatch} />\n        <Visualizers state={state} dispatch={dispatch} />\n        <Songs state={state} dispatch={dispatch} />\n        <Search state={state} dispatch={dispatch} />\n      </div>\n    </div>\n  )\n}\n\n// TODO: A major modification will involve\n// - modifying the SQL database by adding meta-data for songs, albums, and artists,\n// - as well as the corresponding UI elements for searching for songs.\n//   - minimum is just text field, with search button, and then show results in Playlist function?\n// - ¿ and maybe adding more songs ?\n","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Visualizers.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/Waveform.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Piano.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Nishamgr_Flute.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/Nishamgr_Circle.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/Natedude.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Natedude.tsx",["91","92","93","94"],"// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List, Range } from 'immutable';\n// import React from 'react';\nimport React, { useState } from 'react';\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments';\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\n\n\n\ninterface DrumKitProps {\n  name: string;\n  prefix: string;\n  kitNum: number;\n  urls: {\n    A3: string; //kick\n    B3: string; //snare\n    C3: string; //highHat\n    D3: string; //tomLeft\n    E3: string; //tomRight\n    Eb3: string;//floorTom\n    F3: string; //crash\n    G3: string; //ride\n  }\n  // color: string;\n}\n\nfunction getDrumKitProps(){\n  return {\n    name: 'Kurzweil Kit 01',\n    prefix: 'Kurzweil_Kit_01/',\n    kitNum: 0,\n      urls: {\n        A3: 'CYCdh_Kurz01-Kick03.wav',\n        B3: 'CYCdh_Kurz01-Snr02.wav',\n        C3: 'CYCdh_Kurz01-ClHat.wav',\n        D3: 'CYCdh_Kurz01-Tom04.wav', //leftTom\n        E3: 'CYCdh_Kurz01-Tom03.wav', //rightTom\n        Eb3: 'CYCdh_Kurz01-Tom01.wav', //floorTom\n        F3: 'CYCdh_Kurz01-Crash01.wav',\n        G3: 'CYCdh_Kurz01-Ride01.wav'\n      }\n    } as DrumKitProps;\n  };\n\n  const urlPrefix = 'Natedude/'\n\n  // takes in DrumKitProps and returns [sampler, setSampler]\n  function MakeSampler(newKit: DrumKitProps){\n    const [sampler, setSampler] = useState(\n      new Tone.Sampler({\n        urls: newKit.urls,\n        baseUrl: `http://localhost:3000/${urlPrefix}${newKit.prefix}`,\n      }).toDestination()\n      );\n      return [sampler, setSampler] as [Tone.Sampler, React.Dispatch<React.SetStateAction<Tone.Sampler>>];\n    }\n\n    interface DrumKitPieceProps {\n      note: string; // kick, snare, highHat, tomLeft, tomRight, crash, ride\n      sampler: Tone.Sampler;\n      styles: Object;\n      hitboxStyles: Object;\n    }\n\n    export function DrumKitPiece({\n      note,\n      sampler,\n      styles,\n      hitboxStyles\n    }: DrumKitPieceProps): JSX.Element {\n      /**\n       * This React component corresponds to either a major or minor key in the piano.\n       * See `PianoKeyWithoutJSX` for the React component without JSX.\n       */\n      return (\n        // Observations:\n        // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n        // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n        // 3. The curly braces `{` and `}` should remind you of string interpolation.\n        <div\n          className={classNames('b--blue absolute h1')} // removed ba to hide borders\n          style={Object.assign({},\n            {\n              // CSS\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n            }, styles)}\n        >\n          <div\n            onMouseDown={() => sampler.triggerAttack(`${note}`)}\n            onMouseUp={() => sampler.triggerRelease(`${note}`,'+0.25')}\n            className={classNames('b--red pointer')} //removed ba to hide borders\n            style={hitboxStyles}\n          ></div>\n          {/* <div></div> */}\n        </div>\n      );\n    }\n\n// function PianoType({ title, onClick, active }: any): JSX.Element {\n//   return (\n//     <div\n//       onClick={onClick}\n//       className={classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1', {\n//         'b--red green': active,\n//         'gray b--light-gray': !active,\n//       })}\n//     >\n//       {title}\n//     </div>\n//   );\n// }\n//  Object.keys(drumKits)\n// interface Styles {\n//   backgroundImage: string;\n//   width: string;\n//   height: string;\n//   top: string;\n//   left: string;\n// }\n\n// interface DrumKitPieceSpec {\n\n// }\n\nfunction DrumKit({ synth, setSynth }: InstrumentProps): JSX.Element {\n\n  // drumPieces instead of keys\n  const wUnit = 'rem'\n  const hUnit = 'rem'\n\n  const uiScale = 1;\n  const drumPieces = [\n    {\n      note: 'F3', //crash\n      styles: {\n        backgroundImage: 'url(Natedude/img/crash.png)',\n        width: `${uiScale*8}${wUnit}`,\n        height: `${uiScale*20}${hUnit}`,\n        top: `${uiScale*2}${hUnit}`,\n        left: `${uiScale*4}${wUnit}`,\n      },\n      hitboxStyles:{\n        float: 'right',\n        width: `${uiScale*6.5}${wUnit}`,\n        height: `${uiScale*4.5}${hUnit}`,\n        // borderRadius: '1rem',\n        borderTopLeftRadius: '70%',\n        borderTopRightRadius: '120%',\n        borderBottomRightRadius: '70%',\n        borderBottomLeftRadius: '120%',\n\n      }\n    },\n    {\n      note: 'G3', //ride\n      styles: {\n        backgroundImage: 'url(Natedude/img/ride.png)',\n        width: `${uiScale*7.7}${wUnit}`,\n        height: `${uiScale*16}${hUnit}`,\n        top: `${uiScale*4}${hUnit}`,\n        left: `${uiScale*23}${wUnit}`,\n      },\n      hitboxStyles:{\n        // float: 'right',\n        width: `${uiScale*5}${wUnit}`,\n        height: `${uiScale*5.3}${hUnit}`,\n        // borderRadius: '1rem',\n        borderTopLeftRadius: '130%',\n        borderTopRightRadius: '60%',\n        borderBottomRightRadius: '130%',\n        borderBottomLeftRadius: '70%',\n\n      }\n    },\n    {\n      note: 'A3', //kick\n      styles: {\n        backgroundImage: 'url(Natedude/img/kick.png)',\n        width: `${uiScale*11}${wUnit}`,\n        height: `${uiScale*11}${hUnit}`,\n        top: `${uiScale*11}${hUnit}`,\n        left: `${uiScale*11}${wUnit}`,\n      },\n      hitboxStyles:{\n        // float: 'center',\n        position: 'absolute',\n        width: `${uiScale*8.8}${wUnit}`,\n        height: `${uiScale*9}${hUnit}`,\n        top: `${uiScale*3}%`,\n        left: `${uiScale*10.4}%`,\n        borderRadius: '100%',\n        // marginTop: '-4.5${hUnit}',\n        // marginLeft: '-6.5${wUnit}',\n        // borderRadius: '1rem',\n      }\n    },\n    {\n      note: 'C3', //high hat\n      styles: {\n        backgroundImage: 'url(Natedude/img/entireHighHat.png)',\n        width: `${uiScale*7}${wUnit}`,\n        height: `${uiScale*14}${hUnit}`,\n        top: `${uiScale*8}${hUnit}`,\n        left: `${uiScale*3}${wUnit}`,\n      },\n      hitboxStyles:{\n        position: 'absolute',\n        width: `${uiScale*5.8}${wUnit}`,\n        height: `${uiScale*1.5}${hUnit}`,\n        top: `${uiScale*7.7}%`,\n        left: `${uiScale*2}%`,\n        // borderRadius: '1rem',\n        borderTopLeftRadius: '100%',\n        borderTopRightRadius: '100%',\n        borderBottomRightRadius: '100%',\n        borderBottomLeftRadius: '100%',\n      }\n    },\n    {\n      note: 'B3', //snare\n      styles: {\n        backgroundImage: 'url(Natedude/img/fullSnare.png)',\n        width: `${uiScale*7.5}${wUnit}`,\n        height: `${uiScale*12}${wUnit}`,\n        top: `${uiScale*11.3}${hUnit}`,\n        left: `${uiScale*7}${wUnit}`,\n      },\n      hitboxStyles:{\n        width: `${uiScale*7}${wUnit}`,\n        height: `${uiScale*3}${wUnit}`,\n      }\n    },\n\n    {\n      note: 'D3', //leftTom\n      styles: {\n        backgroundImage: 'url(Natedude/img/leftTom.png)',\n        width: `${uiScale*6}${wUnit}`,\n        height: `${uiScale*4.5}${hUnit}`,\n        top: `${uiScale*6.5}${hUnit}`,\n        left: `${uiScale*10.2}${wUnit}`,\n      },\n      hitboxStyles:{\n        width: `${uiScale*5.1}${wUnit}`,\n        height: `${uiScale*4.3}${hUnit}`,\n      }\n    },\n    {\n      note: 'E3', //rightTom\n      styles: {\n        backgroundImage: 'url(Natedude/img/rightTom.png)',\n        width: `${uiScale*5}${wUnit}`,\n        height: `${uiScale*4.5}${hUnit}`,\n        top: `${uiScale*6.5}${hUnit}`,\n        left: `${uiScale*17}${wUnit}`,\n      },\n      hitboxStyles:{\n        float: 'right',\n        width: `${uiScale*4.2}${wUnit}`,\n        height: `${uiScale*4.3}${hUnit}`,\n      }\n    },\n    {\n      note: 'Eb3', //floorTom\n      styles: {\n        backgroundImage: 'url(Natedude/img/floorTom.png)',\n        width: `${uiScale*7.3}${wUnit}`,\n        height: `${uiScale*11}${hUnit}`,\n        top: `${uiScale*11}${hUnit}`,\n        left: `${uiScale*22}${wUnit}`,\n      },\n      hitboxStyles:{\n        position: 'absolute',\n        width: `${uiScale*6.1}${wUnit}`,\n        height: `${uiScale*6.5}${hUnit}`,\n        top: `${uiScale*2}%`,\n        left: `${uiScale*6}%`,\n      }\n    },\n  ]\n  // const p = drumPieces[0];\n\n\n  //setDrumKit\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n\n      return new Tone.Synth({\n        oscillator: { type: newType } as Tone.OmniOscillatorOptions,\n      }).toDestination();\n    });\n  };\n\n  var [sampler, setSampler] = MakeSampler(getDrumKitProps());\n\n  return (\n    <div className=\"bg-near-black\">\n      <div className=\"relative dib w-100 ml4\" style={{height: '43vh'}}>\n        {drumPieces.map(p => {\n          return (\n            <DrumKitPiece\n              note={p.note}\n              sampler={sampler}\n              styles={p.styles}\n              hitboxStyles={p.hitboxStyles}\n            />\n          );\n        })}\n        {/* <DrumKitPiece\n          note={p.note}\n          sampler={sampler}\n          image={p.image}\n          height={p.height}\n          width={p.width}\n        /> */}\n      </div>\n      <div className={'pl4 pt4 flex'}>\n        {}\n      </div>\n    </div>\n  );\n}\n\nexport const Natedude_Instrument = new Instrument('Drum_Kit', DrumKit);\n","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/matthewMadore.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/matthewMadore.tsx",["95","96","97","98"],"// 3rd party library imports\nimport * as Tone from 'tone'\nimport classNames from 'classnames'\nimport { List, Range } from 'immutable'\n//import React from 'react'\nimport React, { useState } from 'react'\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments'\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\ninterface ButtonProps {\n  notesNameDisplay: string\n  notesToPlay: string[] // chords\n  idx: number\n  keyboardKey: string\n  passToButtons: {\n    majorI?: string[]\n    minorii?: string[]\n    minoriii?: string[]\n    majorIV?: string[]\n    majorV?: string[]\n    minorvi?: string[]\n    diminishedvii?: string[]\n    tonic?: string[]\n    supertonic?: string[]\n    mediant?: string[]\n    subdominant?: string[]\n    dominant?: string[]\n    submediant?: string[]\n    leadingTone?: string[]\n    octave?: string[]\n  }\n}\n\nfunction MakeSampler () {\n  const [sampler, setSampler] = useState(\n    new Tone.Sampler({\n      urls: {\n        A1: 'A1.wav',\n        A2: 'A2.wav',\n        A3: 'A3.wav',\n        B1: 'B1.wav',\n        B2: 'B2.wav',\n        B3: 'B3.wav',\n        Bb1: 'Bb1.wav',\n        Bb2: 'Bb2.wav',\n        Bb3: 'Bb3.wav',\n        C1: 'C1.wav',\n        C2: 'C2.wav',\n        C3: 'C3.wav',\n        C4: 'C4.wav',\n        Db1: 'Db1.wav',\n        Db2: 'Db2.wav',\n        Db3: 'Db3.wav',\n        Db4: 'Db4.wav',\n        D1: 'D1.wav',\n        D2: 'D2.wav',\n        D3: 'D3.wav',\n        Eb1: 'Eb1.wav',\n        Eb2: 'Eb2.wav',\n        Eb3: 'Eb3.wav',\n        E1: 'E1.wav',\n        E2: 'E2.wav',\n        E3: 'E3.wav',\n        F1: 'F1.wav',\n        F2: 'F2.wav',\n        F3: 'F3.wav',\n        Gb1: 'Gb1.wav',\n        Gb2: 'Gb2.wav',\n        Gb3: 'Gb3.wav',\n        C5: 'wrongKey.wav'\n      },\n      baseUrl: 'http://localhost:3000/matthewMadore/samples/'\n    }).toDestination()\n  )\n  return [sampler, setSampler] as [\n    Tone.Sampler,\n    React.Dispatch<React.SetStateAction<Tone.Sampler>>\n  ]\n}\n\nfunction generateKeyToPlay (\n  keyToBuild: string // 'A'\n): List<ButtonProps> {\n  const chromaticScale = [\n    'A', // 0,\n    'Bb', // 1\n    'B', // 2\n    'C', // 3\n    'Db', // 4\n    'D', // 5\n    'Eb', // 6\n    'E', // 7\n    'F', // 8\n    'Gb', // 9\n    'G', // 10\n    'Ab', // 11,\n    'A', // 12,\n    'Bb', // 13\n    'B', // 14\n    'C', // 15\n    'Db', // 16\n    'D', // 5\n    'Eb', // 6\n    'E', // 7\n    'F', // 8\n    'Gb', // 9\n    'G', // 10\n    'Ab' // 11\n  ]\n  const chromaticScaleWithOctave = [\n    'A1', // 0,\n    'Bb1', // 1\n    'B1', // 2\n    'C1', // 3\n    'Db1', // 4\n    'D1', // 5\n    'Eb1', // 6\n    'E1', // 7\n    'F1', // 8\n    'Gb1', // 9\n    'G1', // 10\n    'Ab1', // 11\n    'A2', // 12\n    'Bb2', // 13\n    'B2', // 14\n    'C2', // 15\n    'Db2', // 16\n    'D2', // 17\n    'Eb2', // 18\n    'E2', // 19\n    'F2', // 20\n    'Gb2', // 21\n    'G2', // 22\n    'Ab2', // 23\n    'A3', // 12\n    'Bb3', // 13\n    'B3', // 14\n    'C3', // 15\n    'Db3', // 16\n    'D3', // 17\n    'Eb3', // 18\n    'E3', // 19\n    'F3', // 20\n    'Gb3', // 21\n    'G3', // 22\n    'Ab3' // 23\n  ]\n\n  //building first key\n  // acrynome for shars and flats: fat cats give dog an everlasting battle or Beadgfc\n  // In key of Amajor sharps are are F C G or in flats it is Gb Db Ab\n  // scale for 'A' with sharps: A B C# D E F# G# A\n  // scale for 'A':              A B Db D E Gb Ab A\n  // A major chord is A Db E or 0 4 7\n  // b minor is B D Gb or 2 5 9\n  //  0 , 2 , 4 , 5, 7, 9, 11, 12\n\n  const usersSelectedKey = chromaticScale.indexOf(keyToBuild)\n\n  function getNote (number: number) {\n    return chromaticScale[chromaticScale.indexOf(keyToBuild) + number]\n  }\n\n  function getNoteOctave (number: number) {\n    return chromaticScaleWithOctave[usersSelectedKey + number]\n  }\n  // scale for 'A':              A B Db D E Gb Ab A\n  const keyToPlay = List([\n    {\n      notesNameDisplay: `${getNote(0)}maj`,\n      notesToPlay: [\n        `${getNoteOctave(0)}`,\n        `${getNoteOctave(4)}`,\n        `${getNoteOctave(7)}`\n      ],\n      idx: 1,\n      keyboardKey: '1='\n    },\n    {\n      notesNameDisplay: `${getNote(2)}min`,\n      notesToPlay: [\n        `${getNoteOctave(2)}`,\n        `${getNoteOctave(5)}`,\n        `${getNoteOctave(9)}`\n      ],\n      idx: 2,\n      keyboardKey: '2='\n    },\n    {\n      notesNameDisplay: `${getNote(4)}min`,\n      notesToPlay: [\n        `${getNoteOctave(4)}`,\n        `${getNoteOctave(7)}`,\n        `${getNoteOctave(11)}`\n      ],\n      idx: 3,\n      keyboardKey: '3='\n    },\n    {\n      notesNameDisplay: `${getNote(5)}maj`,\n      notesToPlay: [\n        `${getNoteOctave(5)}`,\n        `${getNoteOctave(9)}`,\n        `${getNoteOctave(12)}`\n      ],\n      idx: 4,\n      keyboardKey: '4='\n    },\n    {\n      notesNameDisplay: `${getNote(7)}maj`,\n      notesToPlay: [\n        `${getNoteOctave(7)}`,\n        `${getNoteOctave(11)}`,\n        `${getNoteOctave(14)}`\n      ],\n      idx: 5,\n      keyboardKey: 'Q='\n    },\n    {\n      notesNameDisplay: `${getNote(9)}min`,\n      notesToPlay: [\n        `${getNoteOctave(9)}`,\n        `${getNoteOctave(12)}`,\n        `${getNoteOctave(16)}`\n      ],\n      idx: 6,\n      keyboardKey: 'W='\n    },\n    {\n      notesNameDisplay: `${getNote(11)}dim`,\n      notesToPlay: [\n        `${getNoteOctave(11)}`,\n        `${getNoteOctave(14)}`,\n        `${getNoteOctave(17)}`\n      ],\n      idx: 7,\n      keyboardKey: 'E='\n    },\n    {\n      notesNameDisplay: `${getNote(0)}`,\n      notesToPlay: [`${getNoteOctave(0)}`],\n      idx: 8,\n      keyboardKey: 'I='\n    },\n    {\n      notesNameDisplay: `${getNote(2)}`,\n      notesToPlay: [`${getNoteOctave(2)}`],\n      idx: 9,\n      keyboardKey: 'O='\n    },\n    {\n      notesNameDisplay: `${getNote(4)}`,\n      notesToPlay: [`${getNoteOctave(4)}`],\n      idx: 10,\n      keyboardKey: 'P='\n    },\n    {\n      notesNameDisplay: `${getNote(5)}`,\n      notesToPlay: [`${getNoteOctave(5)}`],\n      idx: 11,\n      keyboardKey: '[='\n    },\n    {\n      notesNameDisplay: `${getNote(7)}`,\n      notesToPlay: [`${getNoteOctave(7)}`],\n      idx: 12,\n      keyboardKey: 'K='\n    },\n    {\n      notesNameDisplay: `${getNote(9)}`,\n      notesToPlay: [`${getNoteOctave(9)}`],\n      idx: 13,\n      keyboardKey: 'L='\n    },\n    {\n      notesNameDisplay: `${getNote(11)}`,\n      notesToPlay: [`${getNoteOctave(11)}`],\n      idx: 14,\n      keyboardKey: ';='\n    },\n    {\n      notesNameDisplay: `${getNote(12)}`,\n      notesToPlay: [`${getNoteOctave(12)}`],\n      idx: 15,\n      keyboardKey: \"'=\"\n    }\n  ])\n  return keyToPlay as List<ButtonProps>\n}\nlet newKeyToPlay = generateKeyToPlay('Gb')\n\ntype mess = {\n  majorI?: string[]\n  minorii?: string[]\n  minoriii?: string[]\n  majorIV?: string[]\n  majorV?: string[]\n  minorvi?: string[]\n  diminishedvii?: string[]\n  tonic?: string[]\n  supertonic?: string[]\n  mediant?: string[]\n  subdominant?: string[]\n  dominant?: string[]\n  submediant?: string[]\n  leadingTone?: string[]\n  octave?: string[]\n}\nlet playChordOrNote: mess = {\n  majorI: ['Ab3', 'B4', 'Eb4'], // [A, Db, E]\n  minorii: ['Bb4', 'Db4', 'F4'],\n  minoriii: ['B4', 'Eb4', 'Gb4'],\n  majorIV: ['Db4', 'F4', 'Ab4'],\n  majorV: ['Ab3', 'B4', 'Eb4'],\n  minorvi: ['Ab3', 'B4', 'Eb4'],\n  diminishedvii: ['Ab3', 'B4', 'Eb4'],\n  tonic: ['Ab3', 'B4', 'Eb4'],\n  supertonic: ['Ab3', 'B4', 'Eb4'],\n  mediant: ['Ab3', 'B4', 'Eb4'],\n  subdominant: ['Ab3', 'B4', 'Eb4'],\n  dominant: ['Ab3', 'B4', 'Eb4'],\n  submediant: ['Ab3', 'B4', 'Eb4'],\n  leadingTone: ['Ab3', 'B4', 'Eb4'],\n  octave: ['Ab3', 'B4', 'Eb4']\n}\n\nfunction assignKeyBoardKeysToNotes (\n  keyToPlay: List<{\n    notesNameDisplay: string\n    notesToPlay: string[]\n    idx: number\n    keyboardKey: string\n  }>\n): mess {\n  playChordOrNote = {\n    majorI: newKeyToPlay.get(0)?.notesToPlay, // [A, Db, E]\n    minorii: newKeyToPlay.get(1)?.notesToPlay,\n    minoriii: newKeyToPlay.get(2)?.notesToPlay,\n    majorIV: newKeyToPlay.get(3)?.notesToPlay,\n    majorV: newKeyToPlay.get(4)?.notesToPlay,\n    minorvi: newKeyToPlay.get(5)?.notesToPlay,\n    diminishedvii: newKeyToPlay.get(6)?.notesToPlay,\n    tonic: newKeyToPlay.get(7)?.notesToPlay,\n    supertonic: newKeyToPlay.get(8)?.notesToPlay,\n    mediant: newKeyToPlay.get(9)?.notesToPlay,\n    subdominant: newKeyToPlay.get(10)?.notesToPlay,\n    dominant: newKeyToPlay.get(11)?.notesToPlay,\n    submediant: newKeyToPlay.get(12)?.notesToPlay,\n    leadingTone: newKeyToPlay.get(13)?.notesToPlay,\n    octave: newKeyToPlay.get(14)?.notesToPlay\n  }\n\n  return playChordOrNote\n}\nassignKeyBoardKeysToNotes(newKeyToPlay)\n// let playChordOrNote: {\n//   majorI?: string[]\n//   minorii?: string[]\n//   minoriii?: string[]\n//   majorIV?: string[]\n//   majorV?: string[]\n//   minorvi?: string[]\n//   diminishedvii?: string[]\n//   tonic?: string[]\n//   supertonic?: string[]\n//   mediant?: string[]\n//   subdominant?: string[]\n//   dominant?: string[]\n//   submediant?: string[]\n//   leadingTone?: string[]\n//   octave?: string[]\n// }\n\nlet soundToPlay = ['C5']\n\nconst keyDownHandler = (\n  event: React.KeyboardEvent<HTMLDivElement>\n): string[] => {\n  // console.log(event)\n  switch (event.code) {\n    case 'Digit1': {\n      soundToPlay = playChordOrNote.majorI!\n      break\n    }\n    case 'Digit2': {\n      soundToPlay = playChordOrNote.minorii!\n      break\n    }\n    case 'Digit3': {\n      soundToPlay = playChordOrNote.minoriii!\n      break\n    }\n    case 'Digit4': {\n      soundToPlay = playChordOrNote.majorIV!\n      break\n    }\n    case 'KeyQ': {\n      soundToPlay = playChordOrNote.majorV!\n      break\n    }\n    case 'KeyW': {\n      soundToPlay = playChordOrNote.minorvi!\n      break\n    }\n    case 'KeyE': {\n      soundToPlay = playChordOrNote.diminishedvii!\n      break\n    }\n    case 'KeyI': {\n      soundToPlay = playChordOrNote.tonic!\n      break\n    }\n    case 'KeyO': {\n      soundToPlay = playChordOrNote.supertonic!\n      break\n    }\n    case 'KeyP': {\n      soundToPlay = playChordOrNote.mediant!\n      break\n    }\n    case 'BracketLeft': {\n      soundToPlay = playChordOrNote.subdominant!\n      break\n    }\n    case 'KeyK': {\n      soundToPlay = playChordOrNote.dominant!\n      break\n    }\n    case 'KeyL': {\n      soundToPlay = playChordOrNote.submediant!\n      break\n    }\n    case 'Semicolon': {\n      soundToPlay = playChordOrNote.leadingTone!\n      break\n    }\n    case 'Quote': {\n      soundToPlay = playChordOrNote.octave!\n      break\n    }\n    default: {\n      soundToPlay = ['C5']\n      break\n    }\n  }\n  return soundToPlay\n}\n\nconst keyUpHandler = (\n  event: React.KeyboardEvent<HTMLDivElement>\n): string[] | undefined => {\n  let soundToPlay: string[] | undefined\n  // console.log(event)\n  switch (event.code) {\n    case 'Digit1': {\n      soundToPlay = playChordOrNote.majorI\n      break\n    }\n    case 'Digit2': {\n      soundToPlay = playChordOrNote.minorii\n      break\n    }\n    case 'Digit3': {\n      soundToPlay = playChordOrNote.minoriii\n      break\n    }\n    case 'Digit4': {\n      soundToPlay = playChordOrNote.majorIV\n      break\n    }\n    case 'KeyQ': {\n      soundToPlay = playChordOrNote.majorV\n      break\n    }\n    case 'KeyW': {\n      soundToPlay = playChordOrNote.minorvi\n      break\n    }\n    case 'KeyE': {\n      soundToPlay = playChordOrNote.diminishedvii\n      break\n    }\n    case 'KeyI': {\n      soundToPlay = playChordOrNote.tonic\n      break\n    }\n    case 'KeyO': {\n      soundToPlay = playChordOrNote.supertonic\n      break\n    }\n    case 'KeyP': {\n      soundToPlay = playChordOrNote.mediant\n      break\n    }\n    case 'BracketLeft': {\n      soundToPlay = playChordOrNote.subdominant\n      break\n    }\n    case 'KeyK': {\n      soundToPlay = playChordOrNote.dominant\n      break\n    }\n    case 'KeyL': {\n      soundToPlay = playChordOrNote.submediant\n      break\n    }\n    case 'Semicolon': {\n      soundToPlay = playChordOrNote.leadingTone\n      break\n    }\n    case 'Quote': {\n      soundToPlay = playChordOrNote.octave\n      break\n    }\n    default: {\n      soundToPlay = ['C5']\n      break\n    }\n  }\n  return soundToPlay\n}\n\n//let passToButtons = setKeyBoardKeys(newKeyToPlay)\n\nexport function ChordOrNoteButton ({\n  notesNameDisplay,\n  idx,\n  keyboardKey\n}: // passToButtons,\nButtonProps): JSX.Element {\n  // TODO: recieve front into to select what key the user wants to play\n  // waiting input\n\n  let soundToPlay: string[]\n  soundToPlay = ['C5']\n  const [sampler, setSampler] = MakeSampler()\n  const displayString = `${keyboardKey}${notesNameDisplay}`\n\n  const topPlacement = (): number => {\n    if (idx <= 4 || (idx >= 8 && idx <= 11)) {\n      // left 1st row\n      return 0\n    } else {\n      // left 2nd row\n      return 4\n    }\n  }\n\n  const leftPlacement = (): number => {\n    if (idx <= 4) {\n      // top left\n      return idx * 6 - 6\n    } else if (idx >= 8 && idx <= 11) {\n      //top right\n      return idx * 6 - 6 * 3\n    } else if (idx >= 5 && idx <= 8) {\n      // bottom left\n      return idx * 6 - 6.8 * 4\n    } else {\n      // bottom right\n      return idx * 6 - 10 * 4\n    }\n  }\n  return (\n    <div\n      onMouseDown={() => sampler?.triggerAttack(['C5'])} // Question: what is `onMouseDown`?\n      onMouseUp={() => sampler?.triggerRelease(['C5'], '+0.10')} // Question: what is `onMouseUp`?\n      onKeyDown={e => sampler?.triggerAttack(`${keyDownHandler(e)}`)}\n      tabIndex={0}\n      onKeyUp={e => sampler?.triggerRelease(`${keyUpHandler(e)}`, '+0.10')}\n      className={classNames('ba pointer absolute dim bg-light-red black h1 br4')}\n      style={{\n        // CSS\n        display: 'flex',\n        top: `${topPlacement()}rem`,\n        left: `${leftPlacement()}rem`,\n        zIndex: 0,\n        height: '3rem',\n        width: '5rem',\n        padding: 0.1,\n        marginLeft: '0.25rem',\n        textAlign: 'center',\n        justifyContent: 'center',\n        alignItems: 'center',\n        alignSelf: 'center',\n        fontWeight: 'bold',\n\n      }}\n    >\n      {displayString}\n    </div>\n  )\n}\n\nfunction Chords_and_Notes_Generator ({\n  synth,\n  setSynth\n}: InstrumentProps): JSX.Element {\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect()\n\n      return new Tone.Synth({\n        oscillator: { type: newType } as Tone.OmniOscillatorOptions\n      }).toDestination()\n    })\n  }\n\n\n  return (\n    <div className='pv4 bg-near-black'>\n      <div\n        className='pb2 pl4 white'\n        style={{\n          top: '0rem',\n          left: '5rem'\n        }}\n      >\n        Instructions:\n        Click a red button to activate the keyboard, then use keyboard keys (1-4, Q-E, i-[, k-') to play chords (with left hand) and single notes (with right hand).\n      </div>\n      <div className='relative dib w-100 ml4' style={{ height: '43vh' }}>\n        {generateKeyToPlay('B').map(c => {\n          const stringOfNotes = c.notesToPlay\n          return (\n            <ChordOrNoteButton\n              notesNameDisplay={c.notesNameDisplay} //react key\n              notesToPlay={stringOfNotes}\n              idx={c.idx}\n              keyboardKey={c.keyboardKey}\n              passToButtons={c.passToButtons}\n            />\n          )\n        })}\n      </div>\n      {}\n    </div>\n  )\n}\n\nexport const matthewMadore_Instrument = new Instrument(\n  'ChordNoteGenerator',\n  Chords_and_Notes_Generator\n)\n\n\n","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/jaq19_Visual.tsx",[],"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/jaq19_visual.tsx",["99"],"// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\nimport { FFT } from 'tone';\nimport { Visualizer } from '../Visualizers';\n\n//project imports\nexport const jaq19_visual = new Visualizer(\n  'Wavy_Lines',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;//const height = window.innerHeight / 2;\n    //const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n    p5.stroke(255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n\n    p5.beginShape();\n\n    for (let i = 0; i < 360; i++) {\n      //p5.stroke(255);\n      const amplitude = values[i] as number;\n      var r = p5.map(amplitude,(values.length)*(.55), values.length, 0, 1500);//var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n      var x = p5.map(i, 360, values.length, 0, width);\n      var y = height + amplitude * height;\n       x = r * Math.cos(y);\n       y = r * Math.sin(x);\n      p5.curveVertex(x, y);\n    }\n\n    p5.endShape();\n\n  },\n);\n\n\n\n /*  working code\n      for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      //const x = p5.map(i, 0, values.length - 1, 0, width);\n      //const y = height / 2 + amplitude * height;\n      // Place vertex\n      var r = p5.map(amplitude,(values.length)*(.5), values.length, 5, 1500);//var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n      var x = p5.map(i, 610, values.length, 0, width);// var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n      var y = height + amplitude * height;//var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x)\n        y = r * Math.sin(y)\n      p5.curveVertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n    } */\n\n\n\n/* working code\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n    p5.strokeWeight(dim * 0.01);\n    p5.stroke(255, 255, 138, 255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n*/\n\n/**\\\n\n    //start of new code here\n    const fft = new Tone.FFT();\n     // default mode is radians\n    p5.angleMode(\"radians\");\n    p5.translate(width/2, height/2);\n    p5.background(255, 255, 255, 100);\n    p5.stroke(237, 34, 93, 120);\n      // min radius of ellipse\n    let minRad = 2;\n\n    // max radius of ellipse\n    let maxRad = height;\n    // array of values from -1 to 1\n    let timeDomain = new Tone.Waveform(1024);\n    let corrBuff = autoCorrelate(timeDomain);\n\n\n    function autoCorrelate(buffer: number): [] {\n      var newBuffer = [];\n      var len = corrBuff.length;\n      var nSamples = buffer.length;\n      const centerClip = 0;\n      const bNormalize = true;\n      var autocorrelation = [];\n\n      // center clip removes any samples under 0.1\n      if (centerClip) {\n        var cutoff = centerClip;\n        for (var i = 0; i < buffer.length; i++) {\n          var val = buffer[i];\n          buffer[i] = Math.abs(val) > cutoff ? val : 0;\n        }\n      }\n\n      for (var lag = 0; lag < nSamples; lag++){\n        var sum = 0;\n        for (var index = 0; index < nSamples; index++){\n          var indexLagged = index+lag;\n          var sound1 = buffer[index];\n          var sound2 = buffer[indexLagged % nSamples];\n          var product = sound1 * sound2;\n          sum += product;\n        }\n\n        // average to a value between -1 and 1\n        newBuffer[lag] = sum/nSamples;\n      }\n\n      if (bNormalize){\n        var biggestVal = 0;\n        for (var index = 0; index < nSamples; index++){\n          if (abs(newBuffer[index]) > biggestVal){\n            biggestVal = abs(newBuffer[index]);\n          }\n        }\n        // dont divide by zero\n        if (biggestVal !== 0) {\n          for (var index = 0; index < nSamples; index++){\n            newBuffer[index] /= biggestVal;\n          }\n        }\n      }\n\n      return newBuffer;\n    };\n*/\n\n\n\n/*\n\nproject imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n\n    p5.strokeWeight(dim * 0.01);\n    //p5.stroke(255, 255, 138, 255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n */\n\n\n\n\n/*\n  export const jaq19_Visual = new Visualizer(\n  'jaq19_Visual',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight/2;//const height = window.innerHeight / 2;\n    //const dim = Math.min(width, height);\n\n    //const fft = analyzer.set({type:'fft', size:128}); // NEED TO FIX, DOES NOT WORK!!!\n\n    p5.background(0); // p5.background(0, 0, 0, 255);\n    p5.stroke(255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      //const x = p5.map(i, 0, values.length - 1, 0, width);\n      //const y = height / 2 + amplitude * height;\n      // Place vertex\n      var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n      var x = p5.map(i, 4080, values.length - 1, 0, width/2);// var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n      var y = height + amplitude * height/2;//var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x+20)\n        y = r * Math.sin(y+20)\n      p5.vertex(x+200, y+200);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n*/\n\n\n/**\n *\n * // project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0);\n    p5.noFill();\n    p5.translate(width/2, height/2);\n    const values = analyzer.getValue();\n    let fft:any;\n    var spectrum = fft.analyze();\n\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const vol = amplitude.getLevel();\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n */\n","/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/jaq19_instrument.tsx",["100"],"// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List, Range } from 'immutable';\nimport React from 'react';\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments';\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\ninterface PianoKeyProps {\n  note: string; // C, Db, D, Eb, E, F, Gb, G, Ab, A, Bb, B\n  duration?: string;\n  synth?: Tone.Synth | Tone.MonoSynth; // Contains library code for making sound\n  minor?: boolean; // True if minor key, false if major key\n  octave: number;\n  index: number; // octave + index together give a location for the piano key\n}\n\nexport function PianoKey({\n  note,\n  synth,\n  minor,\n  index,\n}: PianoKeyProps): JSX.Element {\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n  return (\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    <div\n    onMouseDown={() => synth?.triggerAttackRelease(`${note}`, \"8n\")}//onMouseDown={() => synth?.triggerAttackRelease(`${note}`)} // Question: what is `onMouseDown`?\n      onMouseUp={() => synth?.triggerRelease('+0.05')} // Question: what is `onMouseUp`?\n      className={classNames('ba pointer absolute dim', {\n        'bg-black black h3': minor, // minor keys are black\n        'orange bg-orange h4': !minor, // major keys are white // line 43+ changed from black bg-white h4 to black bg-brown h4 \n      })}\n      style={{\n        // CSS\n        top: 0,\n        left: `${index * 2}rem`,\n        zIndex: minor ? 1 : 0,\n        width: minor ? '1.5rem' : '2rem',\n        marginLeft: minor ? '0.25rem' : 0,\n      }}\n    ></div>\n  );\n}\n\n// eslint-disable-next-line\nfunction PianoKeyWithoutJSX({\n  note,\n  synth,\n  minor,\n  index,\n}: PianoKeyProps): JSX.Element {\n  /**\n   * This React component for pedagogical purposes.\n   * See `PianoKey` for the React component with JSX (JavaScript XML).\n   */\n  return React.createElement(\n    'div',\n    {\n      onMouseDown: () => synth?.triggerAttackRelease(`${note}`, \"8n\"),//onMouseDown: () => synth?.triggerAttack(`${note}`),\n      onMouseUp: () => synth?.triggerRelease('+0.05'), //onMouseUp: () => synth?.triggerRelease('+0.25'),\n      className: classNames('ba pointer absolute dim', {\n        'bg-black black h3': minor,  \n        'orange bg-orange h4': !minor, // line 75+ changed from black bg-white h4 to black bg-brown h4\n      }),\n      style: {\n        top: 0,\n        left: `${index * 2}rem`,\n        zIndex: minor ? 1 : 0,\n        width: minor ? '1.5rem' : '2rem',\n        marginLeft: minor ? '0.25rem' : 0,\n      },\n    },\n    [],\n  );\n}\n\nfunction PianoType({ title, onClick, active }: any): JSX.Element {\n  return (\n    <div\n      onClick={onClick}\n      className={classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1', {\n        'b--black black': active,\n        'gray b--light-gray': !active,\n      })}\n    >\n      {title}\n    </div>\n  );\n}\n\nfunction Piano({ synth, setSynth }: InstrumentProps): JSX.Element {\n  const keys = List([\n    { note: 'C', idx: 0 },\n    { note: 'D', idx: 2 },\n    { note: 'E', idx: 4 },\n    { note: 'F', idx: 6 },\n    { note: 'G', idx: 8 },\n    { note: 'A', idx: 10 },\n    { note: 'B', idx: 12 },\n    { note: 'C', idx: 14 },\n    { note: 'D', idx: 14 },\n    { note: 'E', idx: 16 },\n  ]);\n\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    console.log(\"setOscillator, has been CALLED!!!\");\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n\n      return new Tone.Synth({\n        oscillator: { type: newType } as Tone.OmniOscillatorOptions,\n      }).toDestination();\n    });\n  };\n  /* added changed from 129 to 135 */\n  const setOscillator2 = () => {\n    console.log(\"setOscillator2, has been CALLED!!!\");\n    const synth = new Tone.PolySynth().toDestination();\n    synth.set({ detune: -1200 });\n    return synth; \n  } // end of changes\n/* .type ↝ String #\nThe type of the oscillator: either sine, square, triangle, or sawtooth. \nAlso capable of setting the first x number of partials of the oscillator. \nFor example: “sine4” would set be the first 4 partials of the sine wave \nand “triangle8” would set the first 8 partials of the triangle wave.\nUses PeriodicWave internally even for native types so that it can set the phase. \nPeriodicWave equations are from the Webkit Web Audio implementation.*/\n  const oscillators: List<OscillatorType> = List([\n    'sine',\n    'sine30',\n    'square10',\n    'triangle10',\n    'fmtriangle10',\n  ]) as List<OscillatorType>;\n\n  return (\n    <div className=\"pv4\">\n      <div className=\"relative dib h4 w-100 ml4\">\n        {Range(3, 4).map(octave =>\n          keys.map(key => {\n            const isMinor = key.note.indexOf('b') !== -1;\n            const note = `${key.note}${octave}`;\n            return (\n              <PianoKey\n                key={note} //react key\n                note={note}\n                synth={synth}\n                minor={isMinor}\n                octave={octave}\n                index={(octave - 2) * 7 + key.idx}\n              />\n            );\n          }),\n        )}\n      </div>\n      <div className={'pl4 pt4 flex'}>\n        {oscillators.map(o => (\n          <PianoType\n            key={o}\n            title={o}\n            onClick={() => setOscillator(o)}\n            active={synth?.oscillator.type === o}\n          />\n        ))}\n      </div>\n      {/* added changed see lines 163-171 */}\n      {/* <div className={'pl4 pt4 flex'}> \n        { <PianoType\n            key={'sine2'} \n            title={'sine2'}\n            onClick={() => setOscillator2()}\n            active={true}\n          />\n        }\n      </div>  */} {/* end of added */}\n    </div>\n  );\n}\n\nexport const jaq19_instrument = new Instrument('Xylophone', Piano);",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":145,"column":9,"nodeType":"107","messageId":"108","endLine":145,"endColumn":25},{"ruleId":"105","severity":1,"message":"109","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":14},{"ruleId":"105","severity":1,"message":"110","line":4,"column":16,"nodeType":"107","messageId":"108","endLine":4,"endColumn":21},{"ruleId":"105","severity":1,"message":"111","line":294,"column":9,"nodeType":"107","messageId":"108","endLine":294,"endColumn":22},{"ruleId":"105","severity":1,"message":"112","line":304,"column":17,"nodeType":"107","messageId":"108","endLine":304,"endColumn":27},{"ruleId":"105","severity":1,"message":"110","line":4,"column":16,"nodeType":"107","messageId":"108","endLine":4,"endColumn":21},{"ruleId":"105","severity":1,"message":"113","line":540,"column":3,"nodeType":"107","messageId":"108","endLine":540,"endColumn":14},{"ruleId":"105","severity":1,"message":"112","line":541,"column":19,"nodeType":"107","messageId":"108","endLine":541,"endColumn":29},{"ruleId":"105","severity":1,"message":"111","line":604,"column":9,"nodeType":"107","messageId":"108","endLine":604,"endColumn":22},{"ruleId":"105","severity":1,"message":"114","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":13},{"ruleId":"105","severity":1,"message":"115","line":128,"column":9,"nodeType":"107","messageId":"108","endLine":128,"endColumn":23},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'songs' is assigned a value but never used.","Identifier","unusedVar","'List' is defined but never used.","'Range' is defined but never used.","'setOscillator' is assigned a value but never used.","'setSampler' is assigned a value but never used.","'soundToPlay' is assigned a value but never used.","'FFT' is defined but never used.","'setOscillator2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]