{"ast":null,"code":"import { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\n\nexport class Chorus extends StereoFeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n    this.name = \"Chorus\";\n    const options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n    this._depth = options.depth;\n    this._delayTime = options.delayTime / 1000;\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._delayNodeL = new Delay({\n      context: this.context\n    });\n    this._delayNodeR = new Delay({\n      context: this.context\n    });\n    this.frequency = this._lfoL.frequency;\n    readOnly(this, [\"frequency\"]); // have one LFO frequency control the other\n\n    this._lfoL.frequency.connect(this._lfoR.frequency); // connections\n\n\n    this.connectEffectLeft(this._delayNodeL);\n    this.connectEffectRight(this._delayNodeR); // lfo setup\n\n    this._lfoL.connect(this._delayNodeL.delayTime);\n\n    this._lfoR.connect(this._delayNodeR.delayTime); // set the initial values\n\n\n    this.depth = this._depth;\n    this.type = options.type;\n    this.spread = options.spread;\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoFeedbackEffect.getDefaults(), {\n      frequency: 1.5,\n      delayTime: 3.5,\n      depth: 0.7,\n      type: \"sine\",\n      spread: 180,\n      feedback: 0,\n      wet: 0.5\n    });\n  }\n  /**\n   * The depth of the effect. A depth of 1 makes the delayTime\n   * modulate between 0 and 2*delayTime (centered around the delayTime).\n   */\n\n\n  get depth() {\n    return this._depth;\n  }\n\n  set depth(depth) {\n    this._depth = depth;\n    const deviation = this._delayTime * depth;\n    this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoL.max = this._delayTime + deviation;\n    this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoR.max = this._delayTime + deviation;\n  }\n  /**\n   * The delayTime in milliseconds of the chorus. A larger delayTime\n   * will give a more pronounced effect. Nominal range a delayTime\n   * is between 2 and 20ms.\n   */\n\n\n  get delayTime() {\n    return this._delayTime * 1000;\n  }\n\n  set delayTime(delayTime) {\n    this._delayTime = delayTime / 1000;\n    this.depth = this._depth;\n  }\n  /**\n   * The oscillator type of the LFO.\n   */\n\n\n  get type() {\n    return this._lfoL.type;\n  }\n\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n\n\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase;\n  }\n\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n  /**\n   * Start the effect.\n   */\n\n\n  start(time) {\n    this._lfoL.start(time);\n\n    this._lfoR.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n\n\n  stop(time) {\n    this._lfoL.stop(time);\n\n    this._lfoR.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the filter to the transport. See [[LFO.sync]]\n   */\n\n\n  sync() {\n    this._lfoL.sync();\n\n    this._lfoR.sync();\n\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n\n\n  unsync() {\n    this._lfoL.unsync();\n\n    this._lfoR.unsync();\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._delayNodeL.dispose();\n\n    this._delayNodeR.dispose();\n\n    this.frequency.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/Chorus.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect {\n    constructor() {\n        super(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n        this.name = \"Chorus\";\n        const options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n        this._depth = options.depth;\n        this._delayTime = options.delayTime / 1000;\n        this._lfoL = new LFO({\n            context: this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n        });\n        this._lfoR = new LFO({\n            context: this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n            phase: 180\n        });\n        this._delayNodeL = new Delay({ context: this.context });\n        this._delayNodeR = new Delay({ context: this.context });\n        this.frequency = this._lfoL.frequency;\n        readOnly(this, [\"frequency\"]);\n        // have one LFO frequency control the other\n        this._lfoL.frequency.connect(this._lfoR.frequency);\n        // connections\n        this.connectEffectLeft(this._delayNodeL);\n        this.connectEffectRight(this._delayNodeR);\n        // lfo setup\n        this._lfoL.connect(this._delayNodeL.delayTime);\n        this._lfoR.connect(this._delayNodeR.delayTime);\n        // set the initial values\n        this.depth = this._depth;\n        this.type = options.type;\n        this.spread = options.spread;\n    }\n    static getDefaults() {\n        return Object.assign(StereoFeedbackEffect.getDefaults(), {\n            frequency: 1.5,\n            delayTime: 3.5,\n            depth: 0.7,\n            type: \"sine\",\n            spread: 180,\n            feedback: 0,\n            wet: 0.5,\n        });\n    }\n    /**\n     * The depth of the effect. A depth of 1 makes the delayTime\n     * modulate between 0 and 2*delayTime (centered around the delayTime).\n     */\n    get depth() {\n        return this._depth;\n    }\n    set depth(depth) {\n        this._depth = depth;\n        const deviation = this._delayTime * depth;\n        this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n        this._lfoL.max = this._delayTime + deviation;\n        this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n        this._lfoR.max = this._delayTime + deviation;\n    }\n    /**\n     * The delayTime in milliseconds of the chorus. A larger delayTime\n     * will give a more pronounced effect. Nominal range a delayTime\n     * is between 2 and 20ms.\n     */\n    get delayTime() {\n        return this._delayTime * 1000;\n    }\n    set delayTime(delayTime) {\n        this._delayTime = delayTime / 1000;\n        this.depth = this._depth;\n    }\n    /**\n     * The oscillator type of the LFO.\n     */\n    get type() {\n        return this._lfoL.type;\n    }\n    set type(type) {\n        this._lfoL.type = type;\n        this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n    get spread() {\n        return this._lfoR.phase - this._lfoL.phase;\n    }\n    set spread(spread) {\n        this._lfoL.phase = 90 - (spread / 2);\n        this._lfoR.phase = (spread / 2) + 90;\n    }\n    /**\n     * Start the effect.\n     */\n    start(time) {\n        this._lfoL.start(time);\n        this._lfoR.start(time);\n        return this;\n    }\n    /**\n     * Stop the lfo\n     */\n    stop(time) {\n        this._lfoL.stop(time);\n        this._lfoR.stop(time);\n        return this;\n    }\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n    sync() {\n        this._lfoL.sync();\n        this._lfoR.sync();\n        return this;\n    }\n    /**\n     * Unsync the filter from the transport.\n     */\n    unsync() {\n        this._lfoL.unsync();\n        this._lfoR.unsync();\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._delayNodeL.dispose();\n        this._delayNodeR.dispose();\n        this.frequency.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Chorus.js.map"]},"metadata":{},"sourceType":"module"}