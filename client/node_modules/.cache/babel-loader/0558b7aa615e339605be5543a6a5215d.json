{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\n\nexport class FeedbackCombFilter extends ToneAudioWorklet {\n  constructor() {\n    super(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n    this.name = \"FeedbackCombFilter\";\n    const options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.delayTime = new Param({\n      context: this.context,\n      value: options.delayTime,\n      units: \"time\",\n      minValue: 0,\n      maxValue: 1,\n      param: this._dummyParam,\n      swappable: true\n    });\n    this.resonance = new Param({\n      context: this.context,\n      value: options.resonance,\n      units: \"normalRange\",\n      param: this._dummyParam,\n      swappable: true\n    });\n    readOnly(this, [\"resonance\", \"delayTime\"]);\n  }\n\n  _audioWorkletName() {\n    return workletName;\n  }\n  /**\n   * The default parameters\n   */\n\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const delayTime = node.parameters.get(\"delayTime\");\n    ;\n    this.delayTime.setParam(delayTime);\n    const feedback = node.parameters.get(\"feedback\");\n    ;\n    this.resonance.setParam(feedback);\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.delayTime.dispose();\n    this.resonance.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/filter/FeedbackCombFilter.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAS,KAAT,QAAsB,0BAAtB;AACA,SAAS,aAAT,EAAwB,aAAxB,QAAmE,kCAAnE;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,QAAT,QAA2C,2BAA3C;AACA,SAAS,gBAAT,QAAiC,qCAAjC;AACA,SAAS,WAAT,QAA4B,8BAA5B;AAOA;;;;;;;;AAQG;;AACH,OAAM,MAAO,kBAAP,SAAkC,gBAAlC,CAA6E;AAuBlF,EAAA,WAAA,GAAA;AACC,UAAM,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,WAAD,EAAc,WAAd,CAA9C,CAA1B;AAtBQ,SAAA,IAAA,GAAO,oBAAP;AAuBR,UAAM,OAAO,GAAG,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,WAAD,EAAc,WAAd,CAA9C,CAApC;AAEA,SAAK,KAAL,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAb;AACA,SAAK,MAAL,GAAc,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAd;AAEA,SAAK,SAAL,GAAiB,IAAI,KAAJ,CAAkB;AAClC,MAAA,OAAO,EAAE,KAAK,OADoB;AAElC,MAAA,KAAK,EAAE,OAAO,CAAC,SAFmB;AAGlC,MAAA,KAAK,EAAE,MAH2B;AAIlC,MAAA,QAAQ,EAAE,CAJwB;AAKlC,MAAA,QAAQ,EAAE,CALwB;AAMlC,MAAA,KAAK,EAAE,KAAK,WANsB;AAOlC,MAAA,SAAS,EAAE;AAPuB,KAAlB,CAAjB;AAUA,SAAK,SAAL,GAAiB,IAAI,KAAJ,CAAyB;AACzC,MAAA,OAAO,EAAE,KAAK,OAD2B;AAEzC,MAAA,KAAK,EAAE,OAAO,CAAC,SAF0B;AAGzC,MAAA,KAAK,EAAE,aAHkC;AAIzC,MAAA,KAAK,EAAE,KAAK,WAJ6B;AAKzC,MAAA,SAAS,EAAE;AAL8B,KAAzB,CAAjB;AAQA,IAAA,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,EAAc,WAAd,CAAP,CAAR;AACA;;AAES,EAAA,iBAAiB,GAAA;AAC1B,WAAO,WAAP;AACA;AAED;;AAEG;;;AACe,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE,GADsC;AAEjD,MAAA,SAAS,EAAE;AAFsC,KAA3C,CAAP;AAIA;;AAED,EAAA,OAAO,CAAC,IAAD,EAAuB;AAC7B,IAAA,aAAa,CAAC,KAAK,KAAN,EAAa,IAAb,EAAmB,KAAK,MAAxB,CAAb;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAoB,WAApB,CAAlB;AAAiE;AACjE,SAAK,SAAL,CAAe,QAAf,CAAwB,SAAxB;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAoB,UAApB,CAAjB;AAA+D;AAC/D,SAAK,SAAL,CAAe,QAAf,CAAwB,QAAxB;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,KAAL,CAAW,OAAX;AACA,SAAK,MAAL,CAAY,OAAZ;AACA,SAAK,SAAL,CAAe,OAAf;AACA,SAAK,SAAL,CAAe,OAAf;AACA,WAAO,IAAP;AACA;;AAhFiF","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\nexport class FeedbackCombFilter extends ToneAudioWorklet {\n    constructor() {\n        super(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n        this.name = \"FeedbackCombFilter\";\n        const options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n        this.input = new Gain({ context: this.context });\n        this.output = new Gain({ context: this.context });\n        this.delayTime = new Param({\n            context: this.context,\n            value: options.delayTime,\n            units: \"time\",\n            minValue: 0,\n            maxValue: 1,\n            param: this._dummyParam,\n            swappable: true,\n        });\n        this.resonance = new Param({\n            context: this.context,\n            value: options.resonance,\n            units: \"normalRange\",\n            param: this._dummyParam,\n            swappable: true,\n        });\n        readOnly(this, [\"resonance\", \"delayTime\"]);\n    }\n    _audioWorkletName() {\n        return workletName;\n    }\n    /**\n     * The default parameters\n     */\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            delayTime: 0.1,\n            resonance: 0.5,\n        });\n    }\n    onReady(node) {\n        connectSeries(this.input, node, this.output);\n        const delayTime = node.parameters.get(\"delayTime\");\n        ;\n        this.delayTime.setParam(delayTime);\n        const feedback = node.parameters.get(\"feedback\");\n        ;\n        this.resonance.setParam(feedback);\n    }\n    dispose() {\n        super.dispose();\n        this.input.dispose();\n        this.output.dispose();\n        this.delayTime.dispose();\n        this.resonance.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=FeedbackCombFilter.js.map"]},"metadata":{},"sourceType":"module"}