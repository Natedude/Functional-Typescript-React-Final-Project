{"ast":null,"code":"import { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\n\nexport class TickSignal extends Signal {\n  constructor() {\n    super(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n    this.name = \"TickSignal\";\n    const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    this.input = this._param = new TickParam({\n      context: this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n\n  ticksToTime(ticks, when) {\n    return this._param.ticksToTime(ticks, when);\n  }\n\n  timeToTicks(duration, when) {\n    return this._param.timeToTicks(duration, when);\n  }\n\n  getTimeOfTick(tick) {\n    return this._param.getTimeOfTick(tick);\n  }\n\n  getDurationOfTicks(ticks, time) {\n    return this._param.getDurationOfTicks(ticks, time);\n  }\n\n  getTicksAtTime(time) {\n    return this._param.getTicksAtTime(time);\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n\n\n  get multiplier() {\n    return this._param.multiplier;\n  }\n\n  set multiplier(m) {\n    this._param.multiplier = m;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/core/clock/TickSignal.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAsC,qBAAtC;AAGA,SAAS,oBAAT,QAAqC,kBAArC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAOA;;;;;;;;AAQG;;AACH,OAAM,MAAO,UAAP,SAA4D,MAA5D,CAA4E;AAejF,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,OAAD,CAAtC,CAA1B;AAfQ,SAAA,IAAA,GAAe,YAAf;AAgBR,UAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,OAAD,CAAtC,CAApC;AAEA,SAAK,KAAL,GAAa,KAAK,MAAL,GAAc,IAAI,SAAJ,CAAc;AACxC,MAAA,OAAO,EAAE,KAAK,OAD0B;AAExC,MAAA,OAAO,EAAE,OAAO,CAAC,OAFuB;AAGxC,MAAA,UAAU,EAAE,OAAO,CAAC,UAHoB;AAIxC,MAAA,KAAK,EAAE,KAAK,eAAL,CAAqB,MAJY;AAKxC,MAAA,KAAK,EAAE,OAAO,CAAC,KALyB;AAMxC,MAAA,KAAK,EAAE,OAAO,CAAC;AANyB,KAAd,CAA3B;AAQA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,UAAU,EAAE,CAD8B;AAE1C,MAAA,KAAK,EAAE,OAFmC;AAG1C,MAAA,KAAK,EAAE;AAHmC,KAApC,CAAP;AAKA;;AAED,EAAA,WAAW,CAAC,KAAD,EAAe,IAAf,EAAyB;AACnC,WAAO,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,EAA+B,IAA/B,CAAP;AACA;;AAED,EAAA,WAAW,CAAC,QAAD,EAAiB,IAAjB,EAA2B;AACrC,WAAO,KAAK,MAAL,CAAY,WAAZ,CAAwB,QAAxB,EAAkC,IAAlC,CAAP;AACA;;AAED,EAAA,aAAa,CAAC,IAAD,EAAY;AACxB,WAAO,KAAK,MAAL,CAAY,aAAZ,CAA0B,IAA1B,CAAP;AACA;;AAED,EAAA,kBAAkB,CAAC,KAAD,EAAe,IAAf,EAAyB;AAC1C,WAAO,KAAK,MAAL,CAAY,kBAAZ,CAA+B,KAA/B,EAAsC,IAAtC,CAAP;AACA;;AAED,EAAA,cAAc,CAAC,IAAD,EAAW;AACxB,WAAO,KAAK,MAAL,CAAY,cAAZ,CAA2B,IAA3B,CAAP;AACA;AAED;;AAEG;;;AACW,MAAV,UAAU,GAAA;AACb,WAAO,KAAK,MAAL,CAAY,UAAnB;AACA;;AACa,MAAV,UAAU,CAAC,CAAD,EAAU;AACvB,SAAK,MAAL,CAAY,UAAZ,GAAyB,CAAzB;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA;;AAxEgF","sourceRoot":"","sourcesContent":["import { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal extends Signal {\n    constructor() {\n        super(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n        this.name = \"TickSignal\";\n        const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n        this.input = this._param = new TickParam({\n            context: this.context,\n            convert: options.convert,\n            multiplier: options.multiplier,\n            param: this._constantSource.offset,\n            units: options.units,\n            value: options.value,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            multiplier: 1,\n            units: \"hertz\",\n            value: 1,\n        });\n    }\n    ticksToTime(ticks, when) {\n        return this._param.ticksToTime(ticks, when);\n    }\n    timeToTicks(duration, when) {\n        return this._param.timeToTicks(duration, when);\n    }\n    getTimeOfTick(tick) {\n        return this._param.getTimeOfTick(tick);\n    }\n    getDurationOfTicks(ticks, time) {\n        return this._param.getDurationOfTicks(ticks, time);\n    }\n    getTicksAtTime(time) {\n        return this._param.getTicksAtTime(time);\n    }\n    /**\n     * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n     */\n    get multiplier() {\n        return this._param.multiplier;\n    }\n    set multiplier(m) {\n        this._param.multiplier = m;\n    }\n    dispose() {\n        super.dispose();\n        this._param.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=TickSignal.js.map"]},"metadata":{},"sourceType":"module"}