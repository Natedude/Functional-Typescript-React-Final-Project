{"ast":null,"code":"import { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\n\nexport class PluckSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n    this.name = \"PluckSynth\";\n    const options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    this._noise = new Noise({\n      context: this.context,\n      type: \"pink\"\n    });\n    this.attackNoise = options.attackNoise;\n    this._lfcf = new LowpassCombFilter({\n      context: this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    this.resonance = options.resonance;\n    this.release = options.release;\n\n    this._noise.connect(this._lfcf);\n\n    this._lfcf.connect(this.output);\n  }\n\n  static getDefaults() {\n    return deepMerge(Instrument.getDefaults(), {\n      attackNoise: 1,\n      dampening: 4000,\n      resonance: 0.7,\n      release: 1\n    });\n  }\n  /**\n   * The dampening control. i.e. the lowpass filter frequency of the comb filter\n   * @min 0\n   * @max 7000\n   */\n\n\n  get dampening() {\n    return this._lfcf.dampening;\n  }\n\n  set dampening(fq) {\n    this._lfcf.dampening = fq;\n  }\n\n  triggerAttack(note, time) {\n    const freq = this.toFrequency(note);\n    time = this.toSeconds(time);\n    const delayAmount = 1 / freq;\n\n    this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\n    this._noise.start(time);\n\n    this._noise.stop(time + delayAmount * this.attackNoise);\n\n    this._lfcf.resonance.cancelScheduledValues(time);\n\n    this._lfcf.resonance.setValueAtTime(this.resonance, time);\n\n    return this;\n  }\n  /**\n   * Ramp down the [[resonance]] to 0 over the duration of the release time.\n   */\n\n\n  triggerRelease(time) {\n    this._lfcf.resonance.linearRampTo(0, this.release, time);\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._noise.dispose();\n\n    this._lfcf.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/instrument/PluckSynth.ts"],"names":[],"mappings":"AACA,SAAS,iBAAT,QAAkC,uCAAlC;AACA,SAAS,SAAT,QAA0B,uBAA1B;AACA,SAAS,oBAAT,QAAqC,uBAArC;AAEA,SAAS,KAAT,QAAsB,iBAAtB;AACA,SAAS,UAAT,QAA8C,cAA9C;AASA;;;;;;;;;AASG;;AACH,OAAM,MAAO,UAAP,SAA0B,UAA1B,CAAuD;AA6B5D,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,CAA1B;AA7BQ,SAAA,IAAA,GAAO,YAAP;AA8BR,UAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,CAApC;AAEA,SAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AACvB,MAAA,OAAO,EAAE,KAAK,OADS;AAEvB,MAAA,IAAI,EAAE;AAFiB,KAAV,CAAd;AAKA,SAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;AAEA,SAAK,KAAL,GAAa,IAAI,iBAAJ,CAAsB;AAClC,MAAA,OAAO,EAAE,KAAK,OADoB;AAElC,MAAA,SAAS,EAAE,OAAO,CAAC,SAFe;AAGlC,MAAA,SAAS,EAAE,OAAO,CAAC;AAHe,KAAtB,CAAb;AAMA,SAAK,SAAL,GAAiB,OAAO,CAAC,SAAzB;AACA,SAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;;AAEA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,KAAzB;;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,MAAxB;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,SAAS,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B;AAC1C,MAAA,WAAW,EAAE,CAD6B;AAE1C,MAAA,SAAS,EAAE,IAF+B;AAG1C,MAAA,SAAS,EAAE,GAH+B;AAI1C,MAAA,OAAO,EAAE;AAJiC,KAA3B,CAAhB;AAMA;AAED;;;;AAIG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,KAAK,KAAL,CAAW,SAAlB;AACA;;AACY,MAAT,SAAS,CAAC,EAAD,EAAG;AACf,SAAK,KAAL,CAAW,SAAX,GAAuB,EAAvB;AACA;;AAED,EAAA,aAAa,CAAC,IAAD,EAAkB,IAAlB,EAA6B;AACzC,UAAM,IAAI,GAAG,KAAK,WAAL,CAAiB,IAAjB,CAAb;AACA,IAAA,IAAI,GAAG,KAAK,SAAL,CAAe,IAAf,CAAP;AACA,UAAM,WAAW,GAAG,IAAI,IAAxB;;AACA,SAAK,KAAL,CAAW,SAAX,CAAqB,cAArB,CAAoC,WAApC,EAAiD,IAAjD;;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,IAAI,GAAG,WAAW,GAAG,KAAK,WAA3C;;AACA,SAAK,KAAL,CAAW,SAAX,CAAqB,qBAArB,CAA2C,IAA3C;;AACA,SAAK,KAAL,CAAW,SAAX,CAAqB,cAArB,CAAoC,KAAK,SAAzC,EAAoD,IAApD;;AACA,WAAO,IAAP;AACA;AAED;;AAEG;;;AACH,EAAA,cAAc,CAAC,IAAD,EAAY;AACzB,SAAK,KAAL,CAAW,SAAX,CAAqB,YAArB,CAAkC,CAAlC,EAAqC,KAAK,OAA1C,EAAmD,IAAnD;;AACA,WAAO,IAAP;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,SAAK,KAAL,CAAW,OAAX;;AACA,WAAO,IAAP;AACA;;AApG2D","sourceRoot":"","sourcesContent":["import { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument {\n    constructor() {\n        super(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n        this.name = \"PluckSynth\";\n        const options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n        this._noise = new Noise({\n            context: this.context,\n            type: \"pink\"\n        });\n        this.attackNoise = options.attackNoise;\n        this._lfcf = new LowpassCombFilter({\n            context: this.context,\n            dampening: options.dampening,\n            resonance: options.resonance,\n        });\n        this.resonance = options.resonance;\n        this.release = options.release;\n        this._noise.connect(this._lfcf);\n        this._lfcf.connect(this.output);\n    }\n    static getDefaults() {\n        return deepMerge(Instrument.getDefaults(), {\n            attackNoise: 1,\n            dampening: 4000,\n            resonance: 0.7,\n            release: 1,\n        });\n    }\n    /**\n     * The dampening control. i.e. the lowpass filter frequency of the comb filter\n     * @min 0\n     * @max 7000\n     */\n    get dampening() {\n        return this._lfcf.dampening;\n    }\n    set dampening(fq) {\n        this._lfcf.dampening = fq;\n    }\n    triggerAttack(note, time) {\n        const freq = this.toFrequency(note);\n        time = this.toSeconds(time);\n        const delayAmount = 1 / freq;\n        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n        this._noise.start(time);\n        this._noise.stop(time + delayAmount * this.attackNoise);\n        this._lfcf.resonance.cancelScheduledValues(time);\n        this._lfcf.resonance.setValueAtTime(this.resonance, time);\n        return this;\n    }\n    /**\n     * Ramp down the [[resonance]] to 0 over the duration of the release time.\n     */\n    triggerRelease(time) {\n        this._lfcf.resonance.linearRampTo(0, this.release, time);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._noise.dispose();\n        this._lfcf.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PluckSynth.js.map"]},"metadata":{},"sourceType":"module"}