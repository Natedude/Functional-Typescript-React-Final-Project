{"ast":null,"code":"import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, {\n    offset,\n    ...audioNodeOptions\n  }) => {\n    const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    });\n    const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: offset\n    }); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n\n    const channelData = audioBuffer.getChannelData(0); // Bug #95: Safari does not play or loop one sample buffers.\n\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    const nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return gainNode.context;\n      },\n\n      get inputs() {\n        return [];\n      },\n\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n\n      get offset() {\n        return gainNode.gain;\n      },\n\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n\n      addEventListener(...args) {\n        return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return audioBufferSourceNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n      },\n\n      start(when = 0) {\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n\n      stop(when = 0) {\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n\n    };\n\n    const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode); // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, audioBufferSourceNode);\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-constant-source-node-faker-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return [];\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, audioBufferSourceNode);\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-constant-source-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}