{"ast":null,"code":"import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n  return (audioNode, count) => {\n    const cycleCounter = cycleCounters.get(audioNode);\n\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n\n    const nativeContext = getNativeContext(audioNode.context);\n    const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n        const {\n          outputs\n        } = getAudioNodeConnections(audioNode);\n\n        for (const output of outputs) {\n          if (isAudioNodeOutputConnection(output)) {\n            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n          } else {\n            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n          }\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","map":{"version":3,"sources":["../../../src/factories/decrement-cycle-counter.ts"],"names":[],"mappings":"AAAA,SAAS,2BAAT,QAA4C,wCAA5C;AAGA,OAAO,MAAM,2BAA2B,GAAkC,CACtE,uCADsE,EAEtE,aAFsE,EAGtE,uBAHsE,EAItE,kBAJsE,EAKtE,mBALsE,EAMtE,gBANsE,EAOtE,iBAPsE,EAQtE,2BARsE,KAStE;AACA,SAAO,CAAC,SAAD,EAAY,KAAZ,KAAqB;AACxB,UAAM,YAAY,GAAG,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAArB;;AAEA,QAAI,YAAY,KAAK,SAArB,EAAgC;AAC5B,YAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,UAAM,aAAa,GAAG,gBAAgB,CAAC,SAAS,CAAC,OAAX,CAAtC;AACA,UAAM,SAAS,GAAG,2BAA2B,CAAC,aAAD,CAA7C;;AAEA,QAAI,YAAY,KAAK,KAArB,EAA4B;AACxB,MAAA,aAAa,CAAC,MAAd,CAAqB,SAArB;;AAEA,UAAI,CAAC,SAAD,IAAc,iBAAiB,CAAC,SAAD,CAAnC,EAAgD;AAC5C,cAAM,qBAAqB,GAAG,kBAAkB,CAAC,SAAD,CAAhD;AACA,cAAM;AAAE,UAAA;AAAF,YAAc,uBAAuB,CAAC,SAAD,CAA3C;;AAEA,aAAK,MAAM,MAAX,IAAqB,OAArB,EAA8B;AAC1B,cAAI,2BAA2B,CAAC,MAAD,CAA/B,EAAyC;AACrC,kBAAM,0BAA0B,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAD,CAAP,CAArD;AAEA,YAAA,uCAAuC,CAAC,qBAAD,EAAwB,0BAAxB,EAAoD,MAAM,CAAC,CAAD,CAA1D,EAA+D,MAAM,CAAC,CAAD,CAArE,CAAvC;AACH,WAJD,MAIO;AACH,kBAAM,2BAA2B,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAD,CAAP,CAAvD;AAEA,YAAA,qBAAqB,CAAC,OAAtB,CAA8B,2BAA9B,EAA2D,MAAM,CAAC,CAAD,CAAjE;AACH;AACJ;AACJ;AACJ,KAnBD,MAmBO;AACH,MAAA,aAAa,CAAC,GAAd,CAAkB,SAAlB,EAA6B,YAAY,GAAG,KAA5C;AACH;AACJ,GAhCD;AAiCH,CA3CM","sourceRoot":"","sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    }\n                    else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        }\n        else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n//# sourceMappingURL=decrement-cycle-counter.js.map"]},"metadata":{},"sourceType":"module"}