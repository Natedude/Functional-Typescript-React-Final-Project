{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n\n    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        const options = {\n          Q: nativeBiquadFilterNode.Q.value,\n          channelCount: nativeBiquadFilterNode.channelCount,\n          channelCountMode: nativeBiquadFilterNode.channelCountMode,\n          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n          detune: nativeBiquadFilterNode.detune.value,\n          frequency: nativeBiquadFilterNode.frequency.value,\n          gain: nativeBiquadFilterNode.gain.value,\n          type: nativeBiquadFilterNode.type\n        };\n        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n      return nativeBiquadFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/biquad-filter-node-renderer-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=biquad-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}