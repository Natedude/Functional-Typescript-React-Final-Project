{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90째.\n * Here the `offset90` phase is offset by +90째 in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\n\nexport class PhaseShiftAllpass extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"PhaseShiftAllpass\";\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The phase shifted output\n     */\n\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The PhaseShifted allpass output\n     */\n\n    this.offset90 = new Gain({\n      context: this.context\n    });\n    const allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n    const allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n    this._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n    this._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n    this._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]); // connect Allpass filter banks\n\n    connectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n    connectSeries(this.input, ...this._bank1, this.offset90);\n  }\n  /**\n   * Create all of the IIR filters from an array of values using the coefficient calculation.\n   */\n\n\n  _createAllPassFilterBank(bankValues) {\n    const nodes = bankValues.map(value => {\n      const coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n      return this.context.createIIRFilter(coefficients[0], coefficients[1]);\n    });\n    return nodes;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.offset90.dispose();\n\n    this._bank0.forEach(f => f.disconnect());\n\n    this._bank1.forEach(f => f.disconnect());\n\n    this._oneSampleDelay.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/filter/PhaseShiftAllpass.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAS,aAAT,EAAwB,aAAxB,QAAmE,kCAAnE;AAEA;;;;;;;AAOG;;AACH,OAAM,MAAO,iBAAP,SAAiC,aAAjC,CAAoE;AA+BzE,EAAA,WAAA,CAAY,OAAZ,EAAmD;AAElD,UAAM,OAAN;AA/BQ,SAAA,IAAA,GAAe,mBAAf;AAEA,SAAA,KAAA,GAAQ,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAR;AAiBT;;AAEG;;AACM,SAAA,MAAA,GAAS,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAT;AAET;;AAEG;;AACM,SAAA,QAAA,GAAW,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAX;AAMR,UAAM,kBAAkB,GAAG,CAAC,SAAD,EAAY,eAAZ,EAA6B,eAA7B,EAA8C,eAA9C,CAA3B;AACA,UAAM,kBAAkB,GAAG,CAAC,eAAD,EAAkB,eAAlB,EAAmC,eAAnC,EAAoD,eAApD,CAA3B;AAEA,SAAK,MAAL,GAAc,KAAK,wBAAL,CAA8B,kBAA9B,CAAd;AACA,SAAK,MAAL,GAAc,KAAK,wBAAL,CAA8B,kBAA9B,CAAd;AACA,SAAK,eAAL,GAAuB,KAAK,OAAL,CAAa,eAAb,CAA6B,CAAC,GAAD,EAAM,GAAN,CAA7B,EAAyC,CAAC,GAAD,EAAM,GAAN,CAAzC,CAAvB,CATkD,CAWlD;;AACA,IAAA,aAAa,CAAC,KAAK,KAAN,EAAa,GAAG,KAAK,MAArB,EAA6B,KAAK,eAAlC,EAAmD,KAAK,MAAxD,CAAb;AACA,IAAA,aAAa,CAAC,KAAK,KAAN,EAAa,GAAG,KAAK,MAArB,EAA6B,KAAK,QAAlC,CAAb;AACA;AAED;;AAEG;;;AACK,EAAA,wBAAwB,CAAC,UAAD,EAAqB;AACpD,UAAM,KAAK,GAAoB,UAAU,CAAC,GAAX,CAAe,KAAK,IAAG;AACrD,YAAM,YAAY,GAAG,CAAC,CAAC,KAAK,GAAG,KAAT,EAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAD,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAE,KAAK,GAAG,KAAV,CAAP,CAAzB,CAArB;AACA,aAAO,KAAK,OAAL,CAAa,eAAb,CAA6B,YAAY,CAAC,CAAD,CAAzC,EAA8C,YAAY,CAAC,CAAD,CAA1D,CAAP;AACA,KAH8B,CAA/B;AAKA,WAAO,KAAP;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,KAAL,CAAW,OAAX;AACA,SAAK,MAAL,CAAY,OAAZ;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,CAAC,IAAI,CAAC,CAAC,UAAF,EAAzB;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,CAAC,IAAI,CAAC,CAAC,UAAF,EAAzB;;AACA,SAAK,eAAL,CAAqB,UAArB;;AACA,WAAO,IAAP;AACA;;AApEwE","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90째.\n * Here the `offset90` phase is offset by +90째 in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\nexport class PhaseShiftAllpass extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        this.name = \"PhaseShiftAllpass\";\n        this.input = new Gain({ context: this.context });\n        /**\n         * The phase shifted output\n         */\n        this.output = new Gain({ context: this.context });\n        /**\n         * The PhaseShifted allpass output\n         */\n        this.offset90 = new Gain({ context: this.context });\n        const allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n        const allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n        this._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n        this._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n        this._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]);\n        // connect Allpass filter banks\n        connectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n        connectSeries(this.input, ...this._bank1, this.offset90);\n    }\n    /**\n     * Create all of the IIR filters from an array of values using the coefficient calculation.\n     */\n    _createAllPassFilterBank(bankValues) {\n        const nodes = bankValues.map(value => {\n            const coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n            return this.context.createIIRFilter(coefficients[0], coefficients[1]);\n        });\n        return nodes;\n    }\n    dispose() {\n        super.dispose();\n        this.input.dispose();\n        this.output.dispose();\n        this.offset90.dispose();\n        this._bank0.forEach(f => f.disconnect());\n        this._bank1.forEach(f => f.disconnect());\n        this._oneSampleDelay.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=PhaseShiftAllpass.js.map"]},"metadata":{},"sourceType":"module"}