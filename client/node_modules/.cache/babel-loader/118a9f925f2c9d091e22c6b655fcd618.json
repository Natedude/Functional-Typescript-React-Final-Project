{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n      if (!nativeConvolverNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeConvolverNode.buffer,\n          channelCount: nativeConvolverNode.channelCount,\n          channelCountMode: nativeConvolverNode.channelCountMode,\n          channelInterpretation: nativeConvolverNode.channelInterpretation,\n          disableNormalization: !nativeConvolverNode.normalize\n        };\n        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n      if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n      }\n\n      return nativeConvolverNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/convolver-node-renderer-factory.ts"],"names":[],"mappings":"AAAA,SAAS,sBAAT,QAAuC,mCAAvC;AACA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAM,kCAAkC,GAAyC,CACpF,yBADoF,EAEpF,kBAFoF,EAGpF,uBAHoF,KAIpF;AACA,SAAO,MAAmE;AACtE,UAAM,4BAA4B,GAAG,IAAI,OAAJ,EAArC;;AAEA,UAAM,mBAAmB,GAAG,OACxB,KADwB,EAExB,yBAFwB,EAGxB,KAHwB,KAIxB;AACA,UAAI,mBAAmB,GAAG,kBAAkB,CAA0B,KAA1B,CAA5C,CADA,CAGA;;AACA,YAAM,mCAAmC,GAAG,gBAAgB,CAAC,mBAAD,EAAsB,yBAAtB,CAA5D;;AAEA,UAAI,CAAC,mCAAL,EAA0C;AACtC,cAAM,OAAO,GAAG;AACZ,UAAA,MAAM,EAAE,mBAAmB,CAAC,MADhB;AAEZ,UAAA,YAAY,EAAE,mBAAmB,CAAC,YAFtB;AAGZ,UAAA,gBAAgB,EAAE,mBAAmB,CAAC,gBAH1B;AAIZ,UAAA,qBAAqB,EAAE,mBAAmB,CAAC,qBAJ/B;AAKZ,UAAA,oBAAoB,EAAE,CAAC,mBAAmB,CAAC;AAL/B,SAAhB;AAQA,QAAA,mBAAmB,GAAG,yBAAyB,CAAC,yBAAD,EAA4B,OAA5B,CAA/C;AACH;;AAED,MAAA,4BAA4B,CAAC,GAA7B,CAAiC,yBAAjC,EAA4D,mBAA5D;;AAEA,UAAI,sBAAsB,CAAC,mBAAD,CAA1B,EAAiD;AAC7C,cAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,mBAAmB,CAAC,MAApB,CAA2B,CAA3B,CAAnC,EAAkE,KAAlE,CAA7B;AACH,OAFD,MAEO;AACH,cAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,mBAAnC,EAAwD,KAAxD,CAA7B;AACH;;AAED,aAAO,mBAAP;AACH,KA/BD;;AAiCA,WAAO;AACH,MAAA,MAAM,CACF,KADE,EAEF,yBAFE,EAGF,KAHE,EAG6B;AAE/B,cAAM,2BAA2B,GAAG,4BAA4B,CAAC,GAA7B,CAAiC,yBAAjC,CAApC;;AAEA,YAAI,2BAA2B,KAAK,SAApC,EAA+C;AAC3C,iBAAO,OAAO,CAAC,OAAR,CAAgB,2BAAhB,CAAP;AACH;;AAED,eAAO,mBAAmB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAA1B;AACH;;AAbE,KAAP;AAeH,GAnDD;AAoDH,CAzDM","sourceRoot":"","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n            }\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=convolver-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}