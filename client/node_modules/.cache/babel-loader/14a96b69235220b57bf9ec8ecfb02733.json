{"ast":null,"code":"import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\n\nexport class OneShotSource extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n\n    this.onended = noOp;\n    /**\n     * The start time\n     */\n\n    this._startTime = -1;\n    /**\n     * The stop time\n     */\n\n    this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n\n    this._timeout = -1;\n    /**\n     * The public output node\n     */\n\n    this.output = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n\n    this._gainNode = this.output;\n    /**\n     * Get the playback state at the given time\n     */\n\n    this.getStateAtTime = function (time) {\n      const computedTime = this.toSeconds(time);\n\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n    this._curve = options.curve;\n    this.onended = options.onended;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      curve: \"linear\",\n      fadeIn: 0,\n      fadeOut: 0,\n      onended: noOp\n    });\n  }\n  /**\n   * Start the source at the given time\n   * @param  time When to start the source\n   */\n\n\n  _startGain(time, gain = 1) {\n    assert(this._startTime === -1, \"Source cannot be started more than once\"); // apply a fade in envelope\n\n    const fadeInTime = this.toSeconds(this._fadeIn); // record the start time\n\n    this._startTime = time + fadeInTime;\n    this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope\n\n    if (fadeInTime > 0) {\n      this._gainNode.gain.setValueAtTime(0, time);\n\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n      } else {\n        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n      }\n    } else {\n      this._gainNode.gain.setValueAtTime(gain, time);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the source node at the given time.\n   * @param time When to stop the source\n   */\n\n\n  stop(time) {\n    this.log(\"stop\", time);\n\n    this._stopGain(this.toSeconds(time));\n\n    return this;\n  }\n  /**\n   * Stop the source at the given time\n   * @param  time When to stop the source\n   */\n\n\n  _stopGain(time) {\n    assert(this._startTime !== -1, \"'start' must be called before 'stop'\"); // cancel the previous stop\n\n    this.cancelStop(); // the fadeOut time\n\n    const fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback\n\n    this._stopTime = this.toSeconds(time) + fadeOutTime;\n    this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\n    if (fadeOutTime > 0) {\n      // start the fade out curve at the given time\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n      } else {\n        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n      }\n    } else {\n      // stop any ongoing ramps, and set the value to 0\n      this._gainNode.gain.cancelAndHoldAtTime(time);\n\n      this._gainNode.gain.setValueAtTime(0, time);\n    }\n\n    this.context.clearTimeout(this._timeout);\n    this._timeout = this.context.setTimeout(() => {\n      // allow additional time for the exponential curve to fully decay\n      const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\n      this._stopSource(this.now() + additionalTail);\n\n      this._onended();\n    }, this._stopTime - this.context.currentTime);\n    return this;\n  }\n  /**\n   * Invoke the onended callback\n   */\n\n\n  _onended() {\n    if (this.onended !== noOp) {\n      this.onended(this); // overwrite onended to make sure it only is called once\n\n      this.onended = noOp; // dispose when it's ended to free up for garbage collection only in the online context\n\n      if (!this.context.isOffline) {\n        const disposeCallback = () => this.dispose(); // @ts-ignore\n\n\n        if (typeof window.requestIdleCallback !== \"undefined\") {\n          // @ts-ignore\n          window.requestIdleCallback(disposeCallback);\n        } else {\n          setTimeout(disposeCallback, 1000);\n        }\n      }\n    }\n  }\n  /**\n   * Get the playback state at the current time\n   */\n\n\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Cancel a scheduled stop event\n   */\n\n\n  cancelStop() {\n    this.log(\"cancelStop\");\n    assert(this._startTime !== -1, \"Source is not started\"); // cancel the stop envelope\n\n    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n    this.context.clearTimeout(this._timeout);\n    this._stopTime = -1;\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/source/OneShotSource.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,sBAArB;AACA,SACC,aADD,QAGO,+BAHP;AAKA,SAAS,IAAT,QAAqB,wBAArB;AACA,SAAS,MAAT,QAAuB,oBAAvB;AAcA;;AAEG;;AACH,OAAM,MAAgB,aAAhB,SAEI,aAFJ,CAE0B;AAuD/B,EAAA,WAAA,CAAY,OAAZ,EAAyC;AACxC,UAAM,OAAN;AAvDD;;;AAGG;;AACH,SAAA,OAAA,GAA2B,IAA3B;AAOA;;AAEG;;AACO,SAAA,UAAA,GAAa,CAAC,CAAd;AAEV;;AAEG;;AACO,SAAA,SAAA,GAAY,CAAC,CAAb;AAEV;;AAEG;;AACK,SAAA,QAAA,GAAW,CAAC,CAAZ;AAER;;AAEG;;AACH,SAAA,MAAA,GAAe,IAAI,IAAJ,CAAS;AACvB,MAAA,OAAO,EAAE,KAAK,OADS;AAEvB,MAAA,IAAI,EAAE;AAFiB,KAAT,CAAf;AAKA;;AAEG;;AACO,SAAA,SAAA,GAAY,KAAK,MAAjB;AAwJV;;AAEG;;AACH,SAAA,cAAA,GAAiB,UAAS,IAAT,EAAmB;AACnC,YAAM,YAAY,GAAG,KAAK,SAAL,CAAe,IAAf,CAArB;;AACA,UACC,KAAK,UAAL,KAAoB,CAAC,CAArB,IACA,YAAY,IAAI,KAAK,UADrB,KAEC,KAAK,SAAL,KAAmB,CAAC,CAApB,IAAyB,YAAY,IAAI,KAAK,SAF/C,CADD,EAIE;AACD,eAAO,SAAP;AACA,OAND,MAMO;AACN,eAAO,SAAP;AACA;AACD,KAXD;;AAvIC,SAAK,OAAL,GAAe,OAAO,CAAC,MAAvB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,OAAxB;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,KAAtB;AACA,SAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,KAAK,EAAE,QAD0C;AAEjD,MAAA,MAAM,EAAE,CAFyC;AAGjD,MAAA,OAAO,EAAE,CAHwC;AAIjD,MAAA,OAAO,EAAE;AAJwC,KAA3C,CAAP;AAMA;AAYD;;;AAGG;;;AACO,EAAA,UAAU,CAAC,IAAD,EAAgB,IAAA,GAAmB,CAAnC,EAAoC;AACvD,IAAA,MAAM,CACL,KAAK,UAAL,KAAoB,CAAC,CADhB,EAEL,yCAFK,CAAN,CADuD,CAKvD;;AACA,UAAM,UAAU,GAAG,KAAK,SAAL,CAAe,KAAK,OAApB,CAAnB,CANuD,CAQvD;;AACA,SAAK,UAAL,GAAkB,IAAI,GAAG,UAAzB;AACA,SAAK,UAAL,GAAkB,IAAI,CAAC,GAAL,CAAS,KAAK,UAAd,EAA0B,KAAK,OAAL,CAAa,WAAvC,CAAlB,CAVuD,CAYvD;;AACA,QAAI,UAAU,GAAG,CAAjB,EAAoB;AACnB,WAAK,SAAL,CAAe,IAAf,CAAoB,cAApB,CAAmC,CAAnC,EAAsC,IAAtC;;AACA,UAAI,KAAK,MAAL,KAAgB,QAApB,EAA8B;AAC7B,aAAK,SAAL,CAAe,IAAf,CAAoB,uBAApB,CACC,IADD,EAEC,IAAI,GAAG,UAFR;AAIA,OALD,MAKO;AACN,aAAK,SAAL,CAAe,IAAf,CAAoB,8BAApB,CACC,IADD,EAEC,IAFD,EAGC,UAHD;AAKA;AACD,KAdD,MAcO;AACN,WAAK,SAAL,CAAe,IAAf,CAAoB,cAApB,CAAmC,IAAnC,EAAyC,IAAzC;AACA;;AACD,WAAO,IAAP;AACA;AAED;;;AAGG;;;AACH,EAAA,IAAI,CAAC,IAAD,EAAY;AACf,SAAK,GAAL,CAAS,MAAT,EAAiB,IAAjB;;AACA,SAAK,SAAL,CAAe,KAAK,SAAL,CAAe,IAAf,CAAf;;AACA,WAAO,IAAP;AACA;AAED;;;AAGG;;;AACO,EAAA,SAAS,CAAC,IAAD,EAAc;AAChC,IAAA,MAAM,CAAC,KAAK,UAAL,KAAoB,CAAC,CAAtB,EAAyB,sCAAzB,CAAN,CADgC,CAEhC;;AACA,SAAK,UAAL,GAHgC,CAKhC;;AACA,UAAM,WAAW,GAAG,KAAK,SAAL,CAAe,KAAK,QAApB,CAApB,CANgC,CAQhC;;AACA,SAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,IAAuB,WAAxC;AACA,SAAK,SAAL,GAAiB,IAAI,CAAC,GAAL,CAAS,KAAK,SAAd,EAAyB,KAAK,OAAL,CAAa,WAAtC,CAAjB;;AACA,QAAI,WAAW,GAAG,CAAlB,EAAqB;AACpB;AACA,UAAI,KAAK,MAAL,KAAgB,QAApB,EAA8B;AAC7B,aAAK,SAAL,CAAe,IAAf,CAAoB,YAApB,CAAiC,CAAjC,EAAoC,WAApC,EAAiD,IAAjD;AACA,OAFD,MAEO;AACN,aAAK,SAAL,CAAe,IAAf,CAAoB,YAApB,CAAiC,CAAjC,EAAoC,WAApC,EAAiD,IAAjD;AACA;AACD,KAPD,MAOO;AACN;AACA,WAAK,SAAL,CAAe,IAAf,CAAoB,mBAApB,CAAwC,IAAxC;;AACA,WAAK,SAAL,CAAe,IAAf,CAAoB,cAApB,CAAmC,CAAnC,EAAsC,IAAtC;AACA;;AACD,SAAK,OAAL,CAAa,YAAb,CAA0B,KAAK,QAA/B;AACA,SAAK,QAAL,GAAgB,KAAK,OAAL,CAAa,UAAb,CAAwB,MAAK;AAC5C;AACA,YAAM,cAAc,GACnB,KAAK,MAAL,KAAgB,aAAhB,GAAgC,WAAW,GAAG,CAA9C,GAAkD,CADnD;;AAEA,WAAK,WAAL,CAAiB,KAAK,GAAL,KAAa,cAA9B;;AACA,WAAK,QAAL;AACA,KANe,EAMb,KAAK,SAAL,GAAiB,KAAK,OAAL,CAAa,WANjB,CAAhB;AAOA,WAAO,IAAP;AACA;AAED;;AAEG;;;AACO,EAAA,QAAQ,GAAA;AACjB,QAAI,KAAK,OAAL,KAAiB,IAArB,EAA2B;AAC1B,WAAK,OAAL,CAAa,IAAb,EAD0B,CAE1B;;AACA,WAAK,OAAL,GAAe,IAAf,CAH0B,CAI1B;;AACA,UAAI,CAAC,KAAK,OAAL,CAAa,SAAlB,EAA6B;AAC5B,cAAM,eAAe,GAAG,MAAM,KAAK,OAAL,EAA9B,CAD4B,CAE5B;;;AACA,YAAI,OAAO,MAAM,CAAC,mBAAd,KAAsC,WAA1C,EAAuD;AACtD;AACA,UAAA,MAAM,CAAC,mBAAP,CAA2B,eAA3B;AACA,SAHD,MAGO;AACN,UAAA,UAAU,CAAC,eAAD,EAAkB,IAAlB,CAAV;AACA;AACD;AACD;AACD;AAkBD;;AAEG;;;AACM,MAAL,KAAK,GAAA;AACR,WAAO,KAAK,cAAL,CAAoB,KAAK,GAAL,EAApB,CAAP;AACA;AAED;;AAEG;;;AACH,EAAA,UAAU,GAAA;AACT,SAAK,GAAL,CAAS,YAAT;AACA,IAAA,MAAM,CAAC,KAAK,UAAL,KAAoB,CAAC,CAAtB,EAAyB,uBAAzB,CAAN,CAFS,CAGT;;AACA,SAAK,SAAL,CAAe,IAAf,CAAoB,qBAApB,CACC,KAAK,UAAL,GAAkB,KAAK,UADxB;;AAGA,SAAK,OAAL,CAAa,YAAb,CAA0B,KAAK,QAA/B;AACA,SAAK,SAAL,GAAiB,CAAC,CAAlB;AACA,WAAO,IAAP;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,SAAL,CAAe,UAAf;;AACA,WAAO,IAAP;AACA;;AAxO8B","sourceRoot":"","sourcesContent":["import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\nexport class OneShotSource extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        /**\n         * The callback to invoke after the\n         * source is done playing.\n         */\n        this.onended = noOp;\n        /**\n         * The start time\n         */\n        this._startTime = -1;\n        /**\n         * The stop time\n         */\n        this._stopTime = -1;\n        /**\n         * The id of the timeout\n         */\n        this._timeout = -1;\n        /**\n         * The public output node\n         */\n        this.output = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        /**\n         * The output gain node.\n         */\n        this._gainNode = this.output;\n        /**\n         * Get the playback state at the given time\n         */\n        this.getStateAtTime = function (time) {\n            const computedTime = this.toSeconds(time);\n            if (this._startTime !== -1 &&\n                computedTime >= this._startTime &&\n                (this._stopTime === -1 || computedTime <= this._stopTime)) {\n                return \"started\";\n            }\n            else {\n                return \"stopped\";\n            }\n        };\n        this._fadeIn = options.fadeIn;\n        this._fadeOut = options.fadeOut;\n        this._curve = options.curve;\n        this.onended = options.onended;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            curve: \"linear\",\n            fadeIn: 0,\n            fadeOut: 0,\n            onended: noOp,\n        });\n    }\n    /**\n     * Start the source at the given time\n     * @param  time When to start the source\n     */\n    _startGain(time, gain = 1) {\n        assert(this._startTime === -1, \"Source cannot be started more than once\");\n        // apply a fade in envelope\n        const fadeInTime = this.toSeconds(this._fadeIn);\n        // record the start time\n        this._startTime = time + fadeInTime;\n        this._startTime = Math.max(this._startTime, this.context.currentTime);\n        // schedule the envelope\n        if (fadeInTime > 0) {\n            this._gainNode.gain.setValueAtTime(0, time);\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n            }\n            else {\n                this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n            }\n        }\n        else {\n            this._gainNode.gain.setValueAtTime(gain, time);\n        }\n        return this;\n    }\n    /**\n     * Stop the source node at the given time.\n     * @param time When to stop the source\n     */\n    stop(time) {\n        this.log(\"stop\", time);\n        this._stopGain(this.toSeconds(time));\n        return this;\n    }\n    /**\n     * Stop the source at the given time\n     * @param  time When to stop the source\n     */\n    _stopGain(time) {\n        assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n        // cancel the previous stop\n        this.cancelStop();\n        // the fadeOut time\n        const fadeOutTime = this.toSeconds(this._fadeOut);\n        // schedule the stop callback\n        this._stopTime = this.toSeconds(time) + fadeOutTime;\n        this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n        if (fadeOutTime > 0) {\n            // start the fade out curve at the given time\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n            }\n            else {\n                this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n            }\n        }\n        else {\n            // stop any ongoing ramps, and set the value to 0\n            this._gainNode.gain.cancelAndHoldAtTime(time);\n            this._gainNode.gain.setValueAtTime(0, time);\n        }\n        this.context.clearTimeout(this._timeout);\n        this._timeout = this.context.setTimeout(() => {\n            // allow additional time for the exponential curve to fully decay\n            const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n            this._stopSource(this.now() + additionalTail);\n            this._onended();\n        }, this._stopTime - this.context.currentTime);\n        return this;\n    }\n    /**\n     * Invoke the onended callback\n     */\n    _onended() {\n        if (this.onended !== noOp) {\n            this.onended(this);\n            // overwrite onended to make sure it only is called once\n            this.onended = noOp;\n            // dispose when it's ended to free up for garbage collection only in the online context\n            if (!this.context.isOffline) {\n                const disposeCallback = () => this.dispose();\n                // @ts-ignore\n                if (typeof window.requestIdleCallback !== \"undefined\") {\n                    // @ts-ignore\n                    window.requestIdleCallback(disposeCallback);\n                }\n                else {\n                    setTimeout(disposeCallback, 1000);\n                }\n            }\n        }\n    }\n    /**\n     * Get the playback state at the current time\n     */\n    get state() {\n        return this.getStateAtTime(this.now());\n    }\n    /**\n     * Cancel a scheduled stop event\n     */\n    cancelStop() {\n        this.log(\"cancelStop\");\n        assert(this._startTime !== -1, \"Source is not started\");\n        // cancel the stop envelope\n        this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n        this.context.clearTimeout(this._timeout);\n        this._stopTime = -1;\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._gainNode.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=OneShotSource.js.map"]},"metadata":{},"sourceType":"module"}