{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\n\nexport class TicksClass extends TransportTimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Ticks\";\n    this.defaultUnits = \"i\";\n  }\n  /**\n   * Get the current time in the given units\n   */\n\n\n  _now() {\n    return this.context.transport.ticks;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return this._getPPQ() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ticks;\n  }\n  /**\n   * Return the time in ticks\n   */\n\n\n  toTicks() {\n    return this.valueOf();\n  }\n  /**\n   * Return the time in seconds\n   */\n\n\n  toSeconds() {\n    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n  }\n\n}\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\n\nexport function Ticks(value, units) {\n  return new TicksClass(getContext(), value, units);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Ticks.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,WAA3B;AAEA,SAAS,kBAAT,QAAmC,iBAAnC;AAGA;;;;;;;AAOG;;AACH,OAAM,MAAO,UAAP,SAA0B,kBAA1B,CAAmD;AAAzD,EAAA,WAAA,GAAA;;AAEU,SAAA,IAAA,GAAe,OAAf;AAEA,SAAA,YAAA,GAA6B,GAA7B;AA2CT;AAzCA;;AAEG;;;AACO,EAAA,IAAI,GAAA;AACb,WAAO,KAAK,OAAL,CAAa,SAAb,CAAuB,KAA9B;AACA;AAED;;AAEG;;;AACO,EAAA,aAAa,CAAC,KAAD,EAAc;AACpC,WAAO,KAAK,OAAL,KAAiB,KAAxB;AACA;AAED;;AAEG;;;AACO,EAAA,eAAe,CAAC,OAAD,EAAiB;AACzC,WAAO,IAAI,CAAC,KAAL,CAAW,OAAO,IAAI,KAAK,KAAK,OAAL,EAAT,CAAP,GAAkC,KAAK,OAAL,EAA7C,CAAP;AACA;AAED;;AAEG;;;AACO,EAAA,aAAa,CAAC,KAAD,EAAa;AACnC,WAAO,KAAP;AACA;AAED;;AAEG;;;AACH,EAAA,OAAO,GAAA;AACN,WAAO,KAAK,OAAL,EAAP;AACA;AAED;;AAEG;;;AACH,EAAA,SAAS,GAAA;AACR,WAAQ,KAAK,OAAL,KAAiB,KAAK,OAAL,EAAlB,IAAqC,KAAK,KAAK,OAAL,EAA1C,CAAP;AACA;;AA9CuD;AAiDzD;;;AAGG;;AACH,OAAM,SAAU,KAAV,CAAgB,KAAhB,EAAmC,KAAnC,EAAuD;AAC5D,SAAO,IAAI,UAAJ,CAAe,UAAU,EAAzB,EAA6B,KAA7B,EAAoC,KAApC,CAAP;AACA","sourceRoot":"","sourcesContent":["import { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"Ticks\";\n        this.defaultUnits = \"i\";\n    }\n    /**\n     * Get the current time in the given units\n     */\n    _now() {\n        return this.context.transport.ticks;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return this._getPPQ() * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return ticks;\n    }\n    /**\n     * Return the time in ticks\n     */\n    toTicks() {\n        return this.valueOf();\n    }\n    /**\n     * Return the time in seconds\n     */\n    toSeconds() {\n        return (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n    }\n}\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value, units) {\n    return new TicksClass(getContext(), value, units);\n}\n//# sourceMappingURL=Ticks.js.map"]},"metadata":{},"sourceType":"module"}