{"ast":null,"code":"import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nexport class Synth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(Synth.getDefaults(), arguments));\n    this.name = \"Synth\";\n    const options = optionsFromArguments(Synth.getDefaults(), arguments);\n    this.oscillator = new OmniOscillator(Object.assign({\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }, options.oscillator));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope)); // connect the oscillators to the output\n\n    this.oscillator.chain(this.envelope, this.output);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.3\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"triangle\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    this.oscillator.start(time); // if there is no release portion, stop the oscillator\n\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/instrument/Synth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth extends Monophonic {\n    constructor() {\n        super(optionsFromArguments(Synth.getDefaults(), arguments));\n        this.name = \"Synth\";\n        const options = optionsFromArguments(Synth.getDefaults(), arguments);\n        this.oscillator = new OmniOscillator(Object.assign({\n            context: this.context,\n            detune: options.detune,\n            onstop: () => this.onsilence(this),\n        }, options.oscillator));\n        this.frequency = this.oscillator.frequency;\n        this.detune = this.oscillator.detune;\n        this.envelope = new AmplitudeEnvelope(Object.assign({\n            context: this.context,\n        }, options.envelope));\n        // connect the oscillators to the output\n        this.oscillator.chain(this.envelope, this.output);\n        readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Monophonic.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.005,\n                decay: 0.1,\n                release: 1,\n                sustain: 0.3,\n            }),\n            oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n                type: \"triangle\",\n            }),\n        });\n    }\n    /**\n     * start the attack portion of the envelope\n     * @param time the time the attack should start\n     * @param velocity the velocity of the note (0-1)\n     */\n    _triggerEnvelopeAttack(time, velocity) {\n        // the envelopes\n        this.envelope.triggerAttack(time, velocity);\n        this.oscillator.start(time);\n        // if there is no release portion, stop the oscillator\n        if (this.envelope.sustain === 0) {\n            const computedAttack = this.toSeconds(this.envelope.attack);\n            const computedDecay = this.toSeconds(this.envelope.decay);\n            this.oscillator.stop(time + computedAttack + computedDecay);\n        }\n    }\n    /**\n     * start the release portion of the envelope\n     * @param time the time the release should start\n     */\n    _triggerEnvelopeRelease(time) {\n        this.envelope.triggerRelease(time);\n        this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n    }\n    getLevelAtTime(time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    }\n    /**\n     * clean up\n     */\n    dispose() {\n        super.dispose();\n        this.oscillator.dispose();\n        this.envelope.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Synth.js.map"]},"metadata":{},"sourceType":"module"}