{"ast":null,"code":"import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n  return class AudioContext extends baseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      let nativeAudioContext;\n\n      try {\n        nativeAudioContext = new nativeAudioContextConstructor(options);\n      } catch (err) {\n        // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n        if (err.code === 12 && err.message === 'sampleRate is not in range') {\n          throw createNotSupportedError();\n        }\n\n        throw err;\n      } // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome, Edge and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      } // Bug #150 Safari does not support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext; // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        this._nativeGainNode = nativeAudioContext.createGain();\n        this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        this._nativeGainNode.gain.value = 1e-37;\n\n        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n\n        this._nativeOscillatorNode.start();\n      } else {\n        this._nativeGainNode = null;\n        this._nativeOscillatorNode = null;\n      }\n\n      this._state = null;\n      /*\n       * Bug #34: Chrome, Edge and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n       * changes to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n\n    get baseLatency() {\n      return this._baseLatency;\n    }\n\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n\n      return this._nativeAudioContext.close().then(() => {\n        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n          this._nativeOscillatorNode.stop();\n\n          this._nativeGainNode.disconnect();\n\n          this._nativeOscillatorNode.disconnect();\n        }\n\n        deactivateAudioGraph(this);\n      });\n    }\n\n    createMediaElementSource(mediaElement) {\n      return new mediaElementAudioSourceNodeConstructor(this, {\n        mediaElement\n      });\n    }\n\n    createMediaStreamDestination() {\n      return new mediaStreamAudioDestinationNodeConstructor(this);\n    }\n\n    createMediaStreamSource(mediaStream) {\n      return new mediaStreamAudioSourceNodeConstructor(this, {\n        mediaStream\n      });\n    }\n\n    createMediaStreamTrackSource(mediaStreamTrack) {\n      return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n        mediaStreamTrack\n      });\n    }\n\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-context-constructor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            let nativeAudioContext;\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            }\n            catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n                throw err;\n            }\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome, Edge and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                        ? 512 / sampleRate\n                        : latencyHint === 'interactive' || latencyHint === undefined\n                            ? 256 / sampleRate\n                            : latencyHint === 'playback'\n                                ? 1024 / sampleRate\n                                : /*\n                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                                   * ScriptProcessorNode.\n                                   */\n                                    (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n                this._nativeGainNode.gain.value = 1e-37;\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            }\n            else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n            this._state = null;\n            /*\n             * Bug #34: Chrome, Edge and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n                deactivateAudioGraph(this);\n            });\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamDestination() {\n            return new mediaStreamAudioDestinationNodeConstructor(this);\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}