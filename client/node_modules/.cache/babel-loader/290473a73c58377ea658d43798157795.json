{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\n\nexport class EQ3 extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    this.name = \"EQ3\";\n    /**\n     * the output\n     */\n\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [];\n    const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    this.input = this._multibandSplit = new MultibandSplit({\n      context: this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    this._lowGain = new Gain({\n      context: this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    this._midGain = new Gain({\n      context: this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    this._highGain = new Gain({\n      context: this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    this.low = this._lowGain.gain;\n    this.mid = this._midGain.gain;\n    this.high = this._highGain.gain;\n    this.Q = this._multibandSplit.Q;\n    this.lowFrequency = this._multibandSplit.lowFrequency;\n    this.highFrequency = this._multibandSplit.highFrequency; // the frequency bands\n\n    this._multibandSplit.low.chain(this._lowGain, this.output);\n\n    this._multibandSplit.mid.chain(this._midGain, this.output);\n\n    this._multibandSplit.high.chain(this._highGain, this.output);\n\n    readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._internalChannels = [this._multibandSplit];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      high: 0,\n      highFrequency: 2500,\n      low: 0,\n      lowFrequency: 400,\n      mid: 0\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\n    this._multibandSplit.dispose();\n\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n\n    this._lowGain.dispose();\n\n    this._midGain.dispose();\n\n    this._highGain.dispose();\n\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.Q.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/filter/EQ3.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\nexport class EQ3 extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n        this.name = \"EQ3\";\n        /**\n         * the output\n         */\n        this.output = new Gain({ context: this.context });\n        this._internalChannels = [];\n        const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n        this.input = this._multibandSplit = new MultibandSplit({\n            context: this.context,\n            highFrequency: options.highFrequency,\n            lowFrequency: options.lowFrequency,\n        });\n        this._lowGain = new Gain({\n            context: this.context,\n            gain: options.low,\n            units: \"decibels\",\n        });\n        this._midGain = new Gain({\n            context: this.context,\n            gain: options.mid,\n            units: \"decibels\",\n        });\n        this._highGain = new Gain({\n            context: this.context,\n            gain: options.high,\n            units: \"decibels\",\n        });\n        this.low = this._lowGain.gain;\n        this.mid = this._midGain.gain;\n        this.high = this._highGain.gain;\n        this.Q = this._multibandSplit.Q;\n        this.lowFrequency = this._multibandSplit.lowFrequency;\n        this.highFrequency = this._multibandSplit.highFrequency;\n        // the frequency bands\n        this._multibandSplit.low.chain(this._lowGain, this.output);\n        this._multibandSplit.mid.chain(this._midGain, this.output);\n        this._multibandSplit.high.chain(this._highGain, this.output);\n        readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n        this._internalChannels = [this._multibandSplit];\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            high: 0,\n            highFrequency: 2500,\n            low: 0,\n            lowFrequency: 400,\n            mid: 0,\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n        this._multibandSplit.dispose();\n        this.lowFrequency.dispose();\n        this.highFrequency.dispose();\n        this._lowGain.dispose();\n        this._midGain.dispose();\n        this._highGain.dispose();\n        this.low.dispose();\n        this.mid.dispose();\n        this.high.dispose();\n        this.Q.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=EQ3.js.map"]},"metadata":{},"sourceType":"module"}