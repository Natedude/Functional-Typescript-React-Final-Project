{"ast":null,"code":"import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\n\nexport class Effect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n\n    this._dryWet = new CrossFade({\n      context: this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n\n    this.wet = this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n\n    this.effectSend = new Gain({\n      context: this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n\n    this.effectReturn = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect input node\n     */\n\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect output\n     */\n\n    this.output = this._dryWet; // connections\n\n    this.input.fan(this._dryWet.a, this.effectSend);\n    this.effectReturn.connect(this._dryWet.b);\n    this.wet.setValueAtTime(options.wet, 0);\n    this._internalChannels = [this.effectReturn, this.effectSend];\n    readOnly(this, \"wet\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  /**\n   * chains the effect in between the effectSend and effectReturn\n   */\n\n\n  connectEffect(effect) {\n    // add it to the internal channels\n    this._internalChannels.push(effect);\n\n    this.effectSend.chain(effect, this.effectReturn);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dryWet.dispose();\n\n    this.effectSend.dispose();\n    this.effectReturn.dispose();\n    this.wet.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/Effect.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,gCAA1B;AACA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,aAAT,QAAoD,+BAApD;AAEA,SAAS,QAAT,QAAyB,wBAAzB;AAMA;;;;AAIG;;AACH,OAAM,MAAgB,MAAhB,SACG,aADH,CACyB;AAoC9B,EAAA,WAAA,CAAY,OAAZ,EAAkC;AACjC,UAAM,OAAN;AAnCQ,SAAA,IAAA,GAAe,QAAf;AAET;;AAEG;;AACK,SAAA,OAAA,GAAqB,IAAI,SAAJ,CAAc;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAd,CAArB;AAER;;;;AAIG;;AACH,SAAA,GAAA,GAA6B,KAAK,OAAL,CAAa,IAA1C;AAEA;;AAEG;;AACO,SAAA,UAAA,GAAmB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAnB;AAEV;;AAEG;;AACO,SAAA,YAAA,GAAqB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAArB;AAEV;;AAEG;;AACH,SAAA,KAAA,GAAc,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAd;AAEA;;AAEG;;AACH,SAAA,MAAA,GAAS,KAAK,OAAd,CAEkC,CAGjC;;AACA,SAAK,KAAL,CAAW,GAAX,CAAe,KAAK,OAAL,CAAa,CAA5B,EAA+B,KAAK,UAApC;AACA,SAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,OAAL,CAAa,CAAvC;AACA,SAAK,GAAL,CAAS,cAAT,CAAwB,OAAO,CAAC,GAAhC,EAAqC,CAArC;AACA,SAAK,iBAAL,GAAyB,CAAC,KAAK,YAAN,EAAoB,KAAK,UAAzB,CAAzB;AACA,IAAA,QAAQ,CAAC,IAAD,EAAO,KAAP,CAAR;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,GAAG,EAAE;AAD4C,KAA3C,CAAP;AAGA;AAED;;AAEG;;;AACO,EAAA,aAAa,CAAC,MAAD,EAAkC;AACxD;AACA,SAAK,iBAAL,CAAuB,IAAvB,CAA4B,MAA5B;;AACA,SAAK,UAAL,CAAgB,KAAhB,CAAsB,MAAtB,EAA8B,KAAK,YAAnC;AACA,WAAO,IAAP;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,SAAK,UAAL,CAAgB,OAAhB;AACA,SAAK,YAAL,CAAkB,OAAlB;AACA,SAAK,GAAL,CAAS,OAAT;AACA,WAAO,IAAP;AACA;;AAtE6B","sourceRoot":"","sourcesContent":["import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport class Effect extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        this.name = \"Effect\";\n        /**\n         * the drywet knob to control the amount of effect\n         */\n        this._dryWet = new CrossFade({ context: this.context });\n        /**\n         * The wet control is how much of the effected\n         * will pass through to the output. 1 = 100% effected\n         * signal, 0 = 100% dry signal.\n         */\n        this.wet = this._dryWet.fade;\n        /**\n         * connect the effectSend to the input of hte effect\n         */\n        this.effectSend = new Gain({ context: this.context });\n        /**\n         * connect the output of the effect to the effectReturn\n         */\n        this.effectReturn = new Gain({ context: this.context });\n        /**\n         * The effect input node\n         */\n        this.input = new Gain({ context: this.context });\n        /**\n         * The effect output\n         */\n        this.output = this._dryWet;\n        // connections\n        this.input.fan(this._dryWet.a, this.effectSend);\n        this.effectReturn.connect(this._dryWet.b);\n        this.wet.setValueAtTime(options.wet, 0);\n        this._internalChannels = [this.effectReturn, this.effectSend];\n        readOnly(this, \"wet\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            wet: 1,\n        });\n    }\n    /**\n     * chains the effect in between the effectSend and effectReturn\n     */\n    connectEffect(effect) {\n        // add it to the internal channels\n        this._internalChannels.push(effect);\n        this.effectSend.chain(effect, this.effectReturn);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._dryWet.dispose();\n        this.effectSend.dispose();\n        this.effectReturn.dispose();\n        this.wet.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Effect.js.map"]},"metadata":{},"sourceType":"module"}