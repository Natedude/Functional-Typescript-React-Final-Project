{"ast":null,"code":"// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\n//import { SideNav } from '../SideNav';\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const matthewMadore_Visual = new Visualizer('matthewMadore', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2; // console.log('width: ' + width)\n  // console.log('height: ' + height)\n  //const dim = Math.min(width, height);\n  // const fftSize = 2048;\n  // analyzer.set({\n  //   type: 'fft',\n  //   size: fftSize,\n  //   smoothing: 0.5\n  // });\n\n  p5.background(0, 0, 0, 255);\n  p5.stroke(255, 255, 255, 255); // for (let i = 0; i < 220; i++) {\n  //   p5.strokeWeight(dim * 0.01);\n  //   p5.stroke(255 - i, 255-i, 255-i, 255);\n  //   p5.noFill();\n  // }\n\n  p5.angleMode('degrees');\n  const values = analyzer.getValue();\n  p5.translate(width / 2, height / 2);\n  const radiusRange = 50; // r - 50px and r + 50px will be range for waveform\n\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const angle = p5.map(i, 0, values.length - 1, 0, 359);\n    const radius = p5.map; // height / 2 + amplitude * height;\n    // var r = p5.map(amplitude, (values.length - 1) * (.75), values.length - 1, 0, 20);\n    // var x = p5.map(i, 2040, values.length - 1, 0, width / 2);\n\n    var y = height / 2 + amplitude * height;\n    x = r * Math.cos(x);\n    y = r * Math.sin(y); // Place vertex-\n\n    p5.vertex(x, y);\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/matthewMadore_Visual.tsx"],"names":["Visualizer","matthewMadore_Visual","p5","analyzer","width","window","innerWidth","height","innerHeight","background","stroke","angleMode","values","getValue","translate","radiusRange","beginShape","i","length","amplitude","angle","map","radius","y","x","r","Math","cos","sin","vertex","endShape"],"mappings":"AAAA;AACA;AAGA;AAGA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAGA,OAAO,MAAMC,oBAAoB,GAAG,IAAID,UAAJ,CAClC,eADkC,EAElC,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC,CAFmC,CAGnC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAN,EAAAA,EAAE,CAACO,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB;AACAP,EAAAA,EAAE,CAACQ,MAAH,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAfmC,CAmBnC;AACA;AACA;AACA;AACA;;AAGAR,EAAAA,EAAE,CAACS,SAAH,CAAa,SAAb;AACA,QAAMC,MAAM,GAAGT,QAAQ,CAACU,QAAT,EAAf;AACAX,EAAAA,EAAE,CAACY,SAAH,CAAaV,KAAK,GAAG,CAArB,EAAwBG,MAAM,GAAG,CAAjC;AACA,QAAMQ,WAAW,GAAG,EAApB,CA7BmC,CA6BX;;AAExBb,EAAAA,EAAE,CAACc,UAAH;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAME,SAAS,GAAGP,MAAM,CAACK,CAAD,CAAxB;AACA,UAAMG,KAAK,GAAGlB,EAAE,CAACmB,GAAH,CAAOJ,CAAP,EAAU,CAAV,EAAaL,MAAM,CAACM,MAAP,GAAgB,CAA7B,EAAgC,CAAhC,EAAmC,GAAnC,CAAd;AACA,UAAMI,MAAM,GAAGpB,EAAE,CAACmB,GAAlB,CAHsC,CAGjB;AACrB;AACA;;AAEA,QAAIE,CAAC,GAAGhB,MAAM,GAAG,CAAT,GAAaY,SAAS,GAAGZ,MAAjC;AACAiB,IAAAA,CAAC,GAAGC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASH,CAAT,CAAR;AACAD,IAAAA,CAAC,GAAGE,CAAC,GAAGC,IAAI,CAACE,GAAL,CAASL,CAAT,CAAR,CATsC,CAUtC;;AACArB,IAAAA,EAAE,CAAC2B,MAAH,CAAUL,CAAV,EAAaD,CAAb;AACD;;AACDrB,EAAAA,EAAE,CAAC4B,QAAH;AACD,CAhDiC,CAA7B","sourcesContent":["// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n//import { SideNav } from '../SideNav';\n\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\n\nexport const matthewMadore_Visual = new Visualizer(\n  'matthewMadore',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    // console.log('width: ' + width)\n    // console.log('height: ' + height)\n    //const dim = Math.min(width, height);\n\n    // const fftSize = 2048;\n    // analyzer.set({\n    //   type: 'fft',\n    //   size: fftSize,\n    //   smoothing: 0.5\n    // });\n\n    p5.background(0, 0, 0, 255);\n    p5.stroke(255, 255, 255, 255);\n\n\n\n    // for (let i = 0; i < 220; i++) {\n    //   p5.strokeWeight(dim * 0.01);\n    //   p5.stroke(255 - i, 255-i, 255-i, 255);\n    //   p5.noFill();\n    // }\n\n\n    p5.angleMode('degrees');\n    const values = analyzer.getValue();\n    p5.translate(width / 2, height / 2);\n    const radiusRange = 50; // r - 50px and r + 50px will be range for waveform\n\n    p5.beginShape();\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const angle = p5.map(i, 0, values.length - 1, 0, 359);\n      const radius = p5.map// height / 2 + amplitude * height;\n      // var r = p5.map(amplitude, (values.length - 1) * (.75), values.length - 1, 0, 20);\n      // var x = p5.map(i, 2040, values.length - 1, 0, width / 2);\n\n      var y = height / 2 + amplitude * height;\n      x = r * Math.cos(x)\n      y = r * Math.sin(y)\n      // Place vertex-\n      p5.vertex(x, y);\n    }\n    p5.endShape();\n  },\n);\n\n\n\n"]},"metadata":{},"sourceType":"module"}