{"ast":null,"code":"import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\n\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\n\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\n\nexport function getContext() {\n  if (globalContext === dummyContext && hasAudioContext) {\n    setContext(new Context());\n  }\n\n  return globalContext;\n}\n/**\n * Set the default audio context\n * @category Core\n */\n\nexport function setContext(context) {\n  if (isAudioContext(context)) {\n    globalContext = new Context(context);\n  } else if (isOfflineAudioContext(context)) {\n    globalContext = new OfflineContext(context);\n  } else {\n    globalContext = context;\n  }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\n\nexport function start() {\n  return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\n\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n  let prefix = \"v\";\n\n  if (version === \"dev\") {\n    prefix = \"\";\n  }\n\n  const printString = ` * Tone.js ${prefix}${version} * `; // eslint-disable-next-line no-console\n\n  console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}","map":{"version":3,"sources":["../../../Tone/core/Global.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAA0B,eAA1B,EAA2C,SAA3C,QAA4D,wBAA5D;AACA,SAAS,OAAT,QAAwB,mBAAxB;AACA,SAAS,YAAT,QAA6B,wBAA7B;AAEA,SAAS,cAAT,QAA+B,0BAA/B;AACA,SAAS,cAAT,EAAyB,qBAAzB,QAAsD,0BAAtD;AAEA;;AAEG;;AACH,MAAM,YAAY,GAAG,IAAI,YAAJ,EAArB;AAEA;;;AAGG;;AACH,IAAI,aAAa,GAAgB,YAAjC;AAEA;;;AAGG;;AACH,OAAM,SAAU,UAAV,GAAoB;AACzB,MAAI,aAAa,KAAK,YAAlB,IAAkC,eAAtC,EAAuD;AACtD,IAAA,UAAU,CAAC,IAAI,OAAJ,EAAD,CAAV;AACA;;AACD,SAAO,aAAP;AACA;AAED;;;AAGG;;AACH,OAAM,SAAU,UAAV,CAAqB,OAArB,EAA2D;AAChE,MAAI,cAAc,CAAC,OAAD,CAAlB,EAA6B;AAC5B,IAAA,aAAa,GAAG,IAAI,OAAJ,CAAY,OAAZ,CAAhB;AACA,GAFD,MAEO,IAAI,qBAAqB,CAAC,OAAD,CAAzB,EAAoC;AAC1C,IAAA,aAAa,GAAG,IAAI,cAAJ,CAAmB,OAAnB,CAAhB;AACA,GAFM,MAEA;AACN,IAAA,aAAa,GAAG,OAAhB;AACA;AACD;AAED;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAU,KAAV,GAAe;AACpB,SAAO,aAAa,CAAC,MAAd,EAAP;AACA;AAED;;AAEG;;AACH,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,oBAA5B,EAAkD;AACjD,MAAI,MAAM,GAAG,GAAb;;AACA,MAAI,OAAO,KAAK,KAAhB,EAAuB;AACtB,IAAA,MAAM,GAAG,EAAT;AACA;;AACD,QAAM,WAAW,GAAG,cAAc,MAAM,GAAG,OAAO,KAAlD,CALiD,CAMjD;;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,KAAK,WAAW,EAA5B,EAAgC,+BAAhC;AACA","sourceRoot":"","sourcesContent":["import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext() {\n    if (globalContext === dummyContext && hasAudioContext) {\n        setContext(new Context());\n    }\n    return globalContext;\n}\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context) {\n    if (isAudioContext(context)) {\n        globalContext = new Context(context);\n    }\n    else if (isOfflineAudioContext(context)) {\n        globalContext = new OfflineContext(context);\n    }\n    else {\n        globalContext = context;\n    }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start() {\n    return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n    let prefix = \"v\";\n    if (version === \"dev\") {\n        prefix = \"\";\n    }\n    const printString = ` * Tone.js ${prefix}${version} * `;\n    // eslint-disable-next-line no-console\n    console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n//# sourceMappingURL=Global.js.map"]},"metadata":{},"sourceType":"module"}