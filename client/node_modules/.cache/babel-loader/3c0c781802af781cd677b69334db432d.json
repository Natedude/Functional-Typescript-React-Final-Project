{"ast":null,"code":"import { isNativeAudioNode } from '../guards/native-audio-node';\n\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n  const outputAudioNode = outputAudioNodes[output];\n\n  if (outputAudioNode === undefined) {\n    throw createIndexSizeError();\n  }\n\n  return outputAudioNode;\n};\n\nexport const createDisconnectMultipleOutputs = createIndexSizeError => {\n  return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n    if (destinationOrOutput === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());\n    }\n\n    if (typeof destinationOrOutput === 'number') {\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n    }\n\n    if (isNativeAudioNode(destinationOrOutput)) {\n      if (output === undefined) {\n        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n      }\n\n      if (input === undefined) {\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n      }\n\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n    }\n\n    if (output === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n    }\n\n    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/disconnect-multiple-outputs.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAT,QAAkC,6BAAlC;;AAGA,MAAM,yBAAyB,GAAG,CAC9B,oBAD8B,EAE9B,gBAF8B,EAG9B,MAH8B,KAIZ;AAClB,QAAM,eAAe,GAAG,gBAAgB,CAAC,MAAD,CAAxC;;AAEA,MAAI,eAAe,KAAK,SAAxB,EAAmC;AAC/B,UAAM,oBAAoB,EAA1B;AACH;;AAED,SAAO,eAAP;AACH,CAZD;;AAcA,OAAO,MAAM,+BAA+B,GAAuC,oBAAD,IAAyB;AACvG,SAAO,CAAC,gBAAD,EAAmB,mBAAmB,GAAG,SAAzC,EAAoD,MAAM,GAAG,SAA7D,EAAwE,KAAK,GAAG,CAAhF,KAAqF;AACxF,QAAI,mBAAmB,KAAK,SAA5B,EAAuC;AACnC,aAAO,gBAAgB,CAAC,OAAjB,CAA0B,eAAD,IAAqB,eAAe,CAAC,UAAhB,EAA9C,CAAP;AACH;;AAED,QAAI,OAAO,mBAAP,KAA+B,QAAnC,EAA6C;AACzC,aAAO,yBAAyB,CAAC,oBAAD,EAAuB,gBAAvB,EAAyC,mBAAzC,CAAzB,CAAuF,UAAvF,EAAP;AACH;;AAED,QAAI,iBAAiB,CAAC,mBAAD,CAArB,EAA4C;AACxC,UAAI,MAAM,KAAK,SAAf,EAA0B;AACtB,eAAO,gBAAgB,CAAC,OAAjB,CAA0B,eAAD,IAAqB,eAAe,CAAC,UAAhB,CAA2B,mBAA3B,CAA9C,CAAP;AACH;;AAED,UAAI,KAAK,KAAK,SAAd,EAAyB;AACrB,eAAO,yBAAyB,CAAC,oBAAD,EAAuB,gBAAvB,EAAyC,MAAzC,CAAzB,CAA0E,UAA1E,CAAqF,mBAArF,EAA0G,CAA1G,CAAP;AACH;;AAED,aAAO,yBAAyB,CAAC,oBAAD,EAAuB,gBAAvB,EAAyC,MAAzC,CAAzB,CAA0E,UAA1E,CAAqF,mBAArF,EAA0G,CAA1G,EAA6G,KAA7G,CAAP;AACH;;AAED,QAAI,MAAM,KAAK,SAAf,EAA0B;AACtB,aAAO,gBAAgB,CAAC,OAAjB,CAA0B,eAAD,IAAqB,eAAe,CAAC,UAAhB,CAA2B,mBAA3B,CAA9C,CAAP;AACH;;AAED,WAAO,yBAAyB,CAAC,oBAAD,EAAuB,gBAAvB,EAAyC,MAAzC,CAAzB,CAA0E,UAA1E,CAAqF,mBAArF,EAA0G,CAA1G,CAAP;AACH,GA1BD;AA2BH,CA5BM","sourceRoot":"","sourcesContent":["import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=disconnect-multiple-outputs.js.map"]},"metadata":{},"sourceType":"module"}