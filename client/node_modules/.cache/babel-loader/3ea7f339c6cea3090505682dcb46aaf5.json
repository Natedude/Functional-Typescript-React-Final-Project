{"ast":null,"code":"export function copyFromChannel(audioBuffer, // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n  if (typeof audioBuffer.copyFromChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength === 0) {\n      parent[key] = new Float32Array(128);\n    }\n\n    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset); // Bug #5: Safari does not support copyFromChannel().\n  } else {\n    const channelData = audioBuffer.getChannelData(channelNumber); // The byteLength will be 0 when the ArrayBuffer was transferred.\n\n    if (parent[key].byteLength === 0) {\n      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n    } else {\n      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n      parent[key].set(slicedInput);\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/helpers/copy-from-channel.ts"],"names":[],"mappings":"AAgBA,OAAM,SAAU,eAAV,CACF,WADE,EAEF;AACA,MAHE,EAIF,GAJE,EAKF,aALE,EAMF,YANE,EAMkB;AAEpB,MAAI,OAAO,WAAW,CAAC,eAAnB,KAAuC,UAA3C,EAAuD;AACnD;AACA,QAAI,MAAM,CAAC,GAAD,CAAN,CAAY,UAAZ,KAA2B,CAA/B,EAAkC;AAC9B,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,IAAI,YAAJ,CAAiB,GAAjB,CAAd;AACH;;AAED,IAAA,WAAW,CAAC,eAAZ,CAA4B,MAAM,CAAC,GAAD,CAAlC,EAAyC,aAAzC,EAAwD,YAAxD,EANmD,CAQnD;AACH,GATD,MASO;AACH,UAAM,WAAW,GAAG,WAAW,CAAC,cAAZ,CAA2B,aAA3B,CAApB,CADG,CAGH;;AACA,QAAI,MAAM,CAAC,GAAD,CAAN,CAAY,UAAZ,KAA2B,CAA/B,EAAkC;AAC9B,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,WAAW,CAAC,KAAZ,CAAkB,YAAlB,EAAgC,YAAY,GAAG,GAA/C,CAAd;AACH,KAFD,MAEO;AACH,YAAM,WAAW,GAAG,IAAI,YAAJ,CAAiB,WAAW,CAAC,MAA7B,EAAqC,YAAY,GAAG,YAAY,CAAC,iBAAjE,EAAoF,GAApF,CAApB;AAEA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,GAAZ,CAAgB,WAAhB;AACH;AACJ;AACJ","sourceRoot":"","sourcesContent":["export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=copy-from-channel.js.map"]},"metadata":{},"sourceType":"module"}