{"ast":null,"code":"var _jsxFileName = \"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/matthewMadore_Instrument.tsx\",\n    _s = $RefreshSig$();\n\n// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List } from 'immutable'; //import React from 'react'\n\nimport React, { useState } from 'react'; // project imports\n\nimport { Instrument } from '../Instruments';\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// interface IDictionary {\n//   add(key: string, value: any): void;\n//   remove(key: string): void;\n//   containsKey(key: string): boolean;\n//   keys(): string[];\n//   values(): any[];\n// }\n// let keysMap = new Map<string, string>([\n//   [\"key1\", \"value1\"],\n//   [\"key2\", \"value2\"]\n// ]);\n// interface ChordsAndNotes {\n// majorTonic: string[];\n// minorSupertonic: string[];\n// minorMediant: string[];\n// majorSubdominant: string[];\n// majorDominant: string[];\n// minorSubmediant: string[];\n// diminishedleading: string[];\n// Tonic:string[];\n// supertonic:string[];\n// mediant:string[];\n// subdominant:string[];\n// dominant:string[];\n// submediant:string[];\n// leadingTone:string[];\n// tonic:string[];\n// }\n// let noteToPlay\n//   const keyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//     if (event.code === \"KeyZ\") {\n//       console.log(\" keyDownHandler pressed\")\n//      noteToPlay = myNewKeys.Dchord\n//       // sampler?.triggerAttack(myNewKeys.Dchord)\n//       console.log(\" \")\n//     } else if (event.code === \"KeyX\") {\n//       console.log(\" keyUpHandler pressed\")\n//      // sampler?.triggerAttack(myNewKeys.Anote)\n//      }  \n//   };\n// majorTonic,\n// minorSupertonic,\n// minorMediant,\n// majorSubdominant,\n// majorDominant,\n// minorSubmediant,\n// diminishedleading,\n// tonic:string,\n// supertonic,\n// mediant,\n// subdominant,\n// dominant,\n// submediant,\n// leadingTone,\n// tonic,\nexport function ChordOrNoteButton({\n  notesToPlay,\n  //sampler,\n  index,\n  chordOrNoteButton // boolean \n  // chordOrNote, // string \n  //setChordsAndnotes,\n\n}) {\n  _s();\n\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n  // w w 1/2 w w w 1/2\n  const KeyOfDmajor = {\n    Amaj: [\"D3\", \"Gb3\", \"A3\"],\n    Bmin: [\"B3\", \"D3\", \"Gb3\"],\n    Gmaj: [\"C3\", \"E3\"],\n    Dmaj: [\"A3\", \"D3\", \"Gb3\"],\n    Emin: [\"E3\", \"B3\"],\n    Fsmin: [\"Gb3\", \"A3\", \"C3\"],\n    A2: [\"A3\"],\n    B2: [\"B3\"],\n    Cs2: [\"Db3\"],\n    D2: [\"D3\"],\n    E2: [\"E3\"],\n    Fs2: [\"Gb3\"],\n    G2: [\"E3\"],\n    A3: [\"Gb3\"]\n  };\n  const KeyOfAmajor = {\n    Amaj: [\"D3\", \"Gb3\", \"A3\"],\n    Bmin: [\"B3\", \"D3\", \"Gb3\"],\n    Csmin: [\"C3\", \"E3\"],\n    Dmaj: [\"A3\", \"D3\", \"Gb3\"],\n    Emaj: [\"E3\", \"B3\"],\n    Fsmin: [\"Gb3\", \"A3\", \"C3\"],\n    A2: [\"A3\"],\n    B2: [\"B3\"],\n    Cs2: [\"Db3\"],\n    D2: [\"D3\"],\n    E2: [\"E3\"],\n    Fs2: [\"Gb3\"],\n    G2: [\"E3\"],\n    A3: [\"Gb3\"]\n  }; // chordsAndnotes {\n\n  let majorI = [\"D3\", \"Gb3\", \"A3\"]; //\n  // w\n\n  let minorii = [\"D3\", \"Gb3\", \"A3\"]; // w                       \n\n  let minoriii = [\"D3\", \"Gb3\", \"A3\"]; // 1/2\n\n  let majorIV = [\"D3\", \"Gb3\", \"A3\"];\n  let majorV = [\"D3\", \"Gb3\", \"A3\"];\n  let minorvi = [\"D3\", \"Gb3\", \"A3\"];\n  let diminishedvii = [\"D3\", \"Gb3\", \"A3\"];\n  let tonic = [\"D3\", \"Gb3\", \"A3\"];\n  let supertonic = [\"D3\", \"Gb3\", \"A3\"];\n  let mediant = [\"D3\", \"Gb3\", \"A3\"];\n  let subdominant = [\"D3\", \"Gb3\", \"A3\"];\n  let dominant = [\"D3\", \"Gb3\", \"A3\"];\n  let submediant = [\"D3\", \"Gb3\", \"A3\"];\n  let leadingTone = [\"D3\", \"Gb3\", \"A3\"];\n  let octave = [\"D3\", \"Gb3\", \"A3\"]; // }\n\n  const [sampler, setSampler] = useState(new Tone.Sampler({\n    urls: {\n      A3: \"FluteClean_A2.wav\",\n      Bb3: \"FluteClean_Asharp3.wav\",\n      B3: \"flute-sustain-b-note_B.wav\",\n      C3: \"arpeggiated-hit-note-c_123bpm_C.wav\",\n      Db3: \"arpeggiated-hit-note-c_123bpm_Csharp.wav\",\n      D3: \"FluteClean_D4.wav\",\n      E3: \"flute-sustain-vibrato-e-note.wav\",\n      Gb3: \"FluteClean2_Fsharp2.wav\"\n    },\n    baseUrl: \"http://localhost:3000/matthewMadore/samples/\"\n  }).toDestination()); // if(myNewKeys.get(0)) {\n  //   var chordNotes = myNewKeys.get(0)?.chordNote\n  //   console.log(chordNotes)\n  // }\n  // `${key}${keyMember}`\n\n  let soundToPlay; // function keyDownHandler(event: React.KeyboardEvent<HTMLInputElement>): string[]  {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyDownHandler pressed\")\n  //     soundToPlay = majorI\n  //     console.log(\" \")\n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = minorii\n  //   }  \n  //   return (\n  //     soundToPlay\n  //   )\n  // }\n  // function keyUpHandler(event: React.KeyboardEvent<HTMLInputElement>): string[] {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = majorI    \n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = minorii\n  //   }  \n  //   return (\n  //     soundToPlay\n  //   )\n  // }\n\n  const keyDownHandler = event => {\n    if (event.code === \"Digit1\") {\n      console.log(\" keyDownHandler pressed\");\n      soundToPlay = majorI;\n      console.log(\" \");\n    } else if (event.code === \"Digit2\") {\n      console.log(\" keyUpHandler pressed\");\n      soundToPlay = minorii;\n    }\n  };\n\n  const keyUpHandler = event => {\n    if (event.code === \"Digit1\") {\n      console.log(\" keyUpHandler pressed\");\n      soundToPlay = majorI;\n    } else if (event.code === \"Digit2\") {\n      console.log(\" keyUpHandler pressed\");\n      soundToPlay = minorii;\n    }\n  }; // let noteToPlay:\n  //   const keyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyDownHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Amaj\n  //     sampler?.triggerAttack(soundToPlay)\n  //     console.log(\" \")\n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Bmin\n  //     sampler?.triggerAttack(soundToPlay)\n  //   }  \n  // };\n  // const keyUpHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Amaj\n  //     sampler?.triggerRelease(soundToPlay,'+0.20')\n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Bmin\n  //     sampler?.triggerRelease(soundToPlay,'+0.20')\n  //   }  \n  // };\n\n\n  return (\n    /*#__PURE__*/\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    _jsxDEV(\"div\", {\n      // onMouseDown={() => sampler?.triggerAttack(`${majorV}`)} // Question: what is `onMouseDown`? \n      // // onMouseDown={() => sampler?.triggerAttack([\"D3\", \"Gb3\", \"A3\"])} // Question: what is `onMouseDown`? \n      // onMouseUp={() => sampler?.triggerRelease(`${majorV}`,'+0.20')} // Question: what is `onMouseUp`?\n      // onMouseDown={() => synth?.triggerAttack(`${note}`)} // Question: what is `onMouseDown`? \n      // onMouseUp={() => synth?.triggerRelease('+0.10')} // Question: what is `onMouseUp`?\n      // onKeyDown = { keyDownHandler}\n      // onKeyUp={ keyUpHandler} \n      onKeyDown: () => sampler === null || sampler === void 0 ? void 0 : sampler.triggerAttack(`${keyDownHandler}`),\n      tabIndex: 0,\n      onKeyUp: () => sampler === null || sampler === void 0 ? void 0 : sampler.triggerRelease(`${keyUpHandler}`, '+0.20'),\n      className: classNames('ba pointer absolute dim blue', {\n        'bg-black blue h1': chordOrNoteButton,\n        // minor keys are black\n        'yellow bg-red h1': !chordOrNoteButton // major keys are white\n\n      }),\n      style: {\n        // CSS\n        top: 0,\n        left: `${index * 2}rem`,\n        zIndex: chordOrNoteButton ? 1 : 0,\n        width: chordOrNoteButton ? '1.5rem' : '2rem',\n        marginLeft: chordOrNoteButton ? '0.25rem' : 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(ChordOrNoteButton, \"rhyF80iI+wSpQFUDxYgi7eruTYg=\");\n\n_c = ChordOrNoteButton;\n\nfunction WaveformType({\n  title,\n  onClick,\n  active\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1 green', {\n      'b--yellow green': active,\n      'gray b--light-gray': !active\n    }),\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = WaveformType;\n\nfunction Piano({\n  synth,\n  setSynth\n}) {\n  const chordsOrNotes = List([{\n    chordOrNote: \"Amaj\",\n    notes: [\"D3\", \"Gb3\", \"A3\"],\n    idx: 1\n  }, {\n    chordOrNote: \"Bmin\",\n    notes: [\"B3\", \"D3\", \"Gb3\"],\n    idx: 2\n  }, {\n    chordOrNote: \"Csmin\",\n    notes: [\"C3\", \"E3\"],\n    idx: 3\n  }, {\n    chordOrNote: \"Dmaj\",\n    notes: [\"A3\", \"D3\", \"Gb3\"],\n    idx: 4\n  }, {\n    chordOrNote: \"Emaj\",\n    notes: [\"E3\", \"B3\"],\n    idx: 5\n  }, {\n    chordOrNote: \"Fsmin\",\n    notes: [\"Gb3\", \"A3\", \"C3\"],\n    idx: 6\n  }, {\n    chordOrNote: \"A2\",\n    notes: [\"A3\"],\n    idx: 7\n  }, {\n    chordOrNote: \"B2\",\n    notes: [\"B3\"],\n    idx: 8\n  }, {\n    chordOrNote: \"Cs2\",\n    notes: [\"Db3\"],\n    idx: 9\n  }, {\n    chordOrNote: \"D2\",\n    notes: [\"D3\"],\n    idx: 10\n  }, {\n    chordOrNote: \"E2\",\n    notes: [\"E3\"],\n    idx: 11\n  }, {\n    chordOrNote: \"Fs2\",\n    notes: [\"Gb3\"],\n    idx: 12\n  }, {\n    chordOrNote: \"G2\",\n    notes: [\"E3\"],\n    idx: 13\n  }, {\n    chordOrNote: \"A3\",\n    notes: [\"Gb3\"],\n    idx: 14\n  }]); // { chordOrNote: 'Amaj', notes: 0 },\n  // { note: 'Db', idx: 0.5 },\n  // { note: 'D', idx: 1 },\n  // { note: 'Eb', idx: 1.5 },\n  // { note: 'E', idx: 2 },\n  // { note: 'F', idx: 3 },\n  // { note: 'Gb', idx: 3.5 },\n  // { note: 'G', idx: 4 },\n  // { note: 'Ab', idx: 4.5 },\n  // { note: 'A', idx: 5 },\n  // { note: 'Bb', idx: 5.5 },\n  // { note: 'B', idx: 6 }\n\n  const setOscillator = newType => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n      return new Tone.Synth({\n        oscillator: {\n          type: newType\n        }\n      }).toDestination();\n    });\n  };\n\n  const oscillators = List(['sine', 'sawtooth', 'square', 'triangle', 'fmsine', 'fmsawtooth', 'fmtriangle', 'amsine', 'amsawtooth', 'amtriangle']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pv4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative flex-wrap h4 w-100 ml4\",\n      children: chordsOrNotes.map(chordsOrNote => {\n        const stringOfNotes = chordsOrNote.notes;\n        return /*#__PURE__*/_jsxDEV(ChordOrNoteButton, {\n          chordOrNoteButton: true //react key\n          ,\n          notesToPlay: stringOfNotes,\n          index: chordsOrNote.idx // chordOrNote={true}\n          // sampler = {sampler}\n          // chordOrNote = {}\n          // setChordsAndnote = {}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'pl4 pt4 flex',\n      children: oscillators.map(o => /*#__PURE__*/_jsxDEV(WaveformType, {\n        title: o,\n        onClick: () => setOscillator(o) //active={synth?.oscillator.type === o}\n\n      }, o, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = Piano;\nexport const matthewMadore_Instrument = new Instrument('matthewMadore_Instrument', Piano);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ChordOrNoteButton\");\n$RefreshReg$(_c2, \"WaveformType\");\n$RefreshReg$(_c3, \"Piano\");","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/matthewMadore_Instrument.tsx"],"names":["Tone","classNames","List","React","useState","Instrument","ChordOrNoteButton","notesToPlay","index","chordOrNoteButton","KeyOfDmajor","Amaj","Bmin","Gmaj","Dmaj","Emin","Fsmin","A2","B2","Cs2","D2","E2","Fs2","G2","A3","KeyOfAmajor","Csmin","Emaj","majorI","minorii","minoriii","majorIV","majorV","minorvi","diminishedvii","tonic","supertonic","mediant","subdominant","dominant","submediant","leadingTone","octave","sampler","setSampler","Sampler","urls","Bb3","B3","C3","Db3","D3","E3","Gb3","baseUrl","toDestination","soundToPlay","keyDownHandler","event","code","console","log","keyUpHandler","triggerAttack","triggerRelease","top","left","zIndex","width","marginLeft","WaveformType","title","onClick","active","Piano","synth","setSynth","chordsOrNotes","chordOrNote","notes","idx","setOscillator","newType","oldSynth","disconnect","Synth","oscillator","type","oscillators","map","chordsOrNote","stringOfNotes","o","matthewMadore_Instrument"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport * as Tone from 'tone'\nimport classNames from 'classnames'\nimport { List, Range } from 'immutable'\n//import React from 'react'\nimport React, { useState } from 'react'\n\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments'\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\ninterface ButtonProps {\n  chordOrNoteButton: boolean\n  notesToPlay: string[] // chords\n  index: number; \n  //chordOrNote: string \n  //sampler: Tone.Sampler\n  //setChordsAndnotes: string[]\n}\n// interface IDictionary {\n//   add(key: string, value: any): void;\n//   remove(key: string): void;\n//   containsKey(key: string): boolean;\n//   keys(): string[];\n//   values(): any[];\n// }\n\n\n// let keysMap = new Map<string, string>([\n//   [\"key1\", \"value1\"],\n//   [\"key2\", \"value2\"]\n// ]);\n\n// interface ChordsAndNotes {\n  // majorTonic: string[];\n  // minorSupertonic: string[];\n  // minorMediant: string[];\n  // majorSubdominant: string[];\n  // majorDominant: string[];\n  // minorSubmediant: string[];\n  // diminishedleading: string[];\n  // Tonic:string[];\n  // supertonic:string[];\n  // mediant:string[];\n  // subdominant:string[];\n  // dominant:string[];\n  // submediant:string[];\n  // leadingTone:string[];\n  // tonic:string[];\n// }\n\n\n\n// let noteToPlay\n//   const keyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//     if (event.code === \"KeyZ\") {\n//       console.log(\" keyDownHandler pressed\")\n//      noteToPlay = myNewKeys.Dchord\n//       // sampler?.triggerAttack(myNewKeys.Dchord)\n//       console.log(\" \")\n//     } else if (event.code === \"KeyX\") {\n//       console.log(\" keyUpHandler pressed\")\n//      // sampler?.triggerAttack(myNewKeys.Anote)\n//      }  \n    \n//   };\n\n// majorTonic,\n// minorSupertonic,\n// minorMediant,\n// majorSubdominant,\n// majorDominant,\n// minorSubmediant,\n// diminishedleading,\n// tonic:string,\n// supertonic,\n// mediant,\n// subdominant,\n// dominant,\n// submediant,\n// leadingTone,\n// tonic,\n\nexport function ChordOrNoteButton ({\n  notesToPlay,\n  //sampler,\n  index,\n  chordOrNoteButton // boolean \n  // chordOrNote, // string \n  //setChordsAndnotes,\n}: ButtonProps): JSX.Element {\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n// w w 1/2 w w w 1/2\n  const KeyOfDmajor = {\n    Amaj: [\"D3\", \"Gb3\", \"A3\"],\n    Bmin: [\"B3\", \"D3\", \"Gb3\"], \n    Gmaj: [\"C3\", \"E3\"], \n    Dmaj: [\"A3\",\"D3\",\"Gb3\" ],\n    Emin: [\"E3\",\"B3\"], \n    Fsmin:[\"Gb3\", \"A3\", \"C3\"],\n    A2: [\"A3\"],\n    B2: [\"B3\"],\n    Cs2: [\"Db3\"],\n    D2: [\"D3\"],\n    E2: [\"E3\"],\n    Fs2: [\"Gb3\"],\n    G2: [\"E3\"],\n    A3: [\"Gb3\"],\n  }\n\n  const KeyOfAmajor = {\n  Amaj: [\"D3\", \"Gb3\", \"A3\"],\n  Bmin: [\"B3\", \"D3\", \"Gb3\"], \n  Csmin: [\"C3\", \"E3\"], \n  Dmaj: [\"A3\",\"D3\",\"Gb3\" ],\n  Emaj: [\"E3\",\"B3\"], \n  Fsmin:[\"Gb3\", \"A3\", \"C3\"],\n  A2: [\"A3\"],\n  B2: [\"B3\"],\n  Cs2: [\"Db3\"],\n  D2: [\"D3\"],\n  E2: [\"E3\"],\n  Fs2: [\"Gb3\"],\n  G2: [\"E3\"],\n  A3: [\"Gb3\"],\n}\n\n// chordsAndnotes {\n  let majorI = [\"D3\", \"Gb3\", \"A3\"] //\n// w\n  let minorii = [\"D3\", \"Gb3\", \"A3\"]\n// w                       \n  let minoriii = [\"D3\", \"Gb3\", \"A3\"]\n// 1/2\n  let majorIV = [\"D3\", \"Gb3\", \"A3\"]\n  let majorV = [\"D3\", \"Gb3\", \"A3\"]\n  let minorvi = [\"D3\", \"Gb3\", \"A3\"]\n  let diminishedvii= [\"D3\", \"Gb3\", \"A3\"]\n  let tonic = [\"D3\", \"Gb3\", \"A3\"]\n  let supertonic = [\"D3\", \"Gb3\", \"A3\"]\n  let mediant = [\"D3\", \"Gb3\", \"A3\"]\n  let subdominant = [\"D3\", \"Gb3\", \"A3\"]\n  let dominant = [\"D3\", \"Gb3\", \"A3\"]  \n  let submediant = [\"D3\", \"Gb3\", \"A3\"]\n  let leadingTone = [\"D3\", \"Gb3\", \"A3\"]\n  let octave = [\"D3\", \"Gb3\", \"A3\"]\n// }\n\n\n  const [sampler, setSampler] = useState(\n    new Tone.Sampler({\n      urls: {\n        A3: \"FluteClean_A2.wav\",\n        Bb3: \"FluteClean_Asharp3.wav\",\n        B3: \"flute-sustain-b-note_B.wav\",\n        C3: \"arpeggiated-hit-note-c_123bpm_C.wav\",\n        Db3: \"arpeggiated-hit-note-c_123bpm_Csharp.wav\",\n        D3: \"FluteClean_D4.wav\",\n        E3: \"flute-sustain-vibrato-e-note.wav\",\n        Gb3: \"FluteClean2_Fsharp2.wav\",\n      },\n\n      baseUrl: \"http://localhost:3000/matthewMadore/samples/\"\n    }).toDestination()\n  );\n\n      \n    // if(myNewKeys.get(0)) {\n    //   var chordNotes = myNewKeys.get(0)?.chordNote\n    //   console.log(chordNotes)\n    // }\n   \n    \n  // `${key}${keyMember}`\n  let soundToPlay:string[]\n  // function keyDownHandler(event: React.KeyboardEvent<HTMLInputElement>): string[]  {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyDownHandler pressed\")\n  //     soundToPlay = majorI\n      \n  //     console.log(\" \")\n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = minorii\n      \n  //   }  \n  //   return (\n  //     soundToPlay\n  //   )\n  // }\n  // function keyUpHandler(event: React.KeyboardEvent<HTMLInputElement>): string[] {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = majorI    \n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = minorii\n  //   }  \n  //   return (\n  //     soundToPlay\n  //   )\n  // }\n\n   const keyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === \"Digit1\") {\n      console.log(\" keyDownHandler pressed\")\n      soundToPlay = majorI\n     \n      console.log(\" \")\n    } else if (event.code === \"Digit2\") {\n      console.log(\" keyUpHandler pressed\")\n      soundToPlay = minorii\n      \n    }  \n    \n  };\n\n  const keyUpHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === \"Digit1\") {\n      console.log(\" keyUpHandler pressed\")\n      soundToPlay = majorI\n    } else if (event.code === \"Digit2\") {\n      console.log(\" keyUpHandler pressed\")\n      soundToPlay = minorii\n     \n    }  \n  };\n\n  // let noteToPlay:\n  //   const keyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyDownHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Amaj\n  //     sampler?.triggerAttack(soundToPlay)\n  //     console.log(\" \")\n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Bmin\n  //     sampler?.triggerAttack(soundToPlay)\n  //   }  \n    \n  // };\n\n  // const keyUpHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n  //   if (event.code === \"Digit1\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Amaj\n  //     sampler?.triggerRelease(soundToPlay,'+0.20')\n  //   } else if (event.code === \"Digit2\") {\n  //     console.log(\" keyUpHandler pressed\")\n  //     soundToPlay = KeyOfDmajor.Bmin\n  //     sampler?.triggerRelease(soundToPlay,'+0.20')\n  //   }  \n  // };\n\n  return (\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    <div\n\n      // onMouseDown={() => sampler?.triggerAttack(`${majorV}`)} // Question: what is `onMouseDown`? \n      // // onMouseDown={() => sampler?.triggerAttack([\"D3\", \"Gb3\", \"A3\"])} // Question: what is `onMouseDown`? \n      // onMouseUp={() => sampler?.triggerRelease(`${majorV}`,'+0.20')} // Question: what is `onMouseUp`?\n\n      // onMouseDown={() => synth?.triggerAttack(`${note}`)} // Question: what is `onMouseDown`? \n      // onMouseUp={() => synth?.triggerRelease('+0.10')} // Question: what is `onMouseUp`?\n      \n        // onKeyDown = { keyDownHandler}\n       \n        // onKeyUp={ keyUpHandler} \n      onKeyDown = {() => sampler?.triggerAttack(`${keyDownHandler}`) }\n      tabIndex={0}\n      onKeyUp={ () => sampler?.triggerRelease(`${keyUpHandler}`,'+0.20')}\n\n      className={classNames('ba pointer absolute dim blue', {\n        'bg-black blue h1': chordOrNoteButton, // minor keys are black\n        'yellow bg-red h1': !chordOrNoteButton // major keys are white\n      })}\n      style={{\n        // CSS\n        top: 0,\n        left: `${index * 2}rem`,\n        zIndex: chordOrNoteButton ? 1 : 0,\n        width: chordOrNoteButton ? '1.5rem' : '2rem',\n        marginLeft: chordOrNoteButton ? '0.25rem' : 0,\n      }}\n    ></div>\n  )\n}\n\n\n\nfunction WaveformType ({ title, onClick, active }: any): JSX.Element {\n  return (\n    <div\n      onClick={onClick}\n      className={classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1 green', {\n        'b--yellow green': active,\n        'gray b--light-gray': !active\n      })}\n    >\n      {title}\n    </div>\n  )\n}\n\nfunction Piano ({ synth, setSynth }: InstrumentProps): JSX.Element {\n  const chordsOrNotes = List([\n    { chordOrNote: \"Amaj\", notes: [\"D3\", \"Gb3\", \"A3\"], idx: 1}, \n    { chordOrNote: \"Bmin\", notes: [\"B3\", \"D3\", \"Gb3\"], idx: 2}, \n    { chordOrNote: \"Csmin\", notes: [\"C3\", \"E3\"],idx: 3}, \n    { chordOrNote: \"Dmaj\", notes: [\"A3\",\"D3\",\"Gb3\" ],idx: 4},\n    { chordOrNote: \"Emaj\", notes: [\"E3\",\"B3\"] ,idx: 5},\n    { chordOrNote: \"Fsmin\", notes: [\"Gb3\", \"A3\", \"C3\"] ,idx: 6},\n    { chordOrNote: \"A2\", notes: [\"A3\"],idx: 7}, \n    { chordOrNote: \"B2\", notes: [\"B3\"],idx: 8},\n    { chordOrNote: \"Cs2\", notes: [\"Db3\"],idx: 9},\n    { chordOrNote: \"D2\", notes: [\"D3\"],idx: 10},\n    { chordOrNote: \"E2\", notes: [\"E3\"],idx: 11},\n    { chordOrNote: \"Fs2\", notes: [\"Gb3\"],idx: 12},\n    { chordOrNote: \"G2\", notes: [\"E3\"],idx: 13},\n    { chordOrNote: \"A3\", notes: [\"Gb3\"],idx: 14}\n  ])\n  // { chordOrNote: 'Amaj', notes: 0 },\n  // { note: 'Db', idx: 0.5 },\n  // { note: 'D', idx: 1 },\n  // { note: 'Eb', idx: 1.5 },\n  // { note: 'E', idx: 2 },\n  // { note: 'F', idx: 3 },\n  // { note: 'Gb', idx: 3.5 },\n  // { note: 'G', idx: 4 },\n  // { note: 'Ab', idx: 4.5 },\n  // { note: 'A', idx: 5 },\n  // { note: 'Bb', idx: 5.5 },\n  // { note: 'B', idx: 6 }\n\n\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect()\n\n      return new Tone.Synth({\n        oscillator: { type: newType } as Tone.OmniOscillatorOptions\n      }).toDestination()\n    })\n  }\n\n  const oscillators: List<OscillatorType> = List([\n    'sine',\n    'sawtooth',\n    'square',\n    'triangle',\n    'fmsine',\n    'fmsawtooth',\n    'fmtriangle',\n    'amsine',\n    'amsawtooth',\n    'amtriangle'\n  ]) as List<OscillatorType>\n\n  return (\n    <div className='pv4'>\n      <div className='relative flex-wrap h4 w-100 ml4'>\n        {chordsOrNotes.map(chordsOrNote => {\n          const stringOfNotes = chordsOrNote.notes\n            return (\n              <ChordOrNoteButton\n                chordOrNoteButton={true} //react key\n                notesToPlay= {stringOfNotes}\n                index = {chordsOrNote.idx}\n                // chordOrNote={true}\n                // sampler = {sampler}\n                // chordOrNote = {}\n                // setChordsAndnote = {}\n\n              />\n              );\n            })\n          }\n      </div>\n      <div className={'pl4 pt4 flex'}>\n\n        {oscillators.map(o => (\n          <WaveformType\n            key={o}\n            title={o}\n            onClick={() => setOscillator(o)}\n            //active={synth?.oscillator.type === o}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport const matthewMadore_Instrument = new Instrument(\n  'matthewMadore_Instrument',\n  Piano\n)\n"]},"metadata":{},"sourceType":"module"}