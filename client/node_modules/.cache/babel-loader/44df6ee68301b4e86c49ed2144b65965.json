{"ast":null,"code":"import { Monophonic } from \"./Monophonic\";\nimport { MonoSynth } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\n\nexport class DuoSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n    this.name = \"DuoSynth\";\n    const options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n    this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n      context: this.context,\n      onsilence: () => this.onsilence(this)\n    }));\n    this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n      context: this.context\n    }));\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this._vibrato = new LFO({\n      frequency: options.vibratoRate,\n      context: this.context,\n      min: -50,\n      max: 50\n    }); // start the vibrato immediately\n\n    this._vibrato.start();\n\n    this.vibratoRate = this._vibrato.frequency;\n    this._vibratoGain = new Gain({\n      context: this.context,\n      units: \"normalRange\",\n      gain: options.vibratoAmount\n    });\n    this.vibratoAmount = this._vibratoGain.gain;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: 440\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    }); // control the two voices frequency\n\n    this.frequency.connect(this.voice0.frequency);\n    this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n    this._vibrato.connect(this._vibratoGain);\n\n    this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n    this.detune.fan(this.voice0.detune, this.voice1.detune);\n    this.voice0.connect(this.output);\n    this.voice1.connect(this.output);\n    readOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      vibratoAmount: 0.5,\n      vibratoRate: 5,\n      harmonicity: 1.5,\n      voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      }),\n      voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n    this.voice1._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n    this.voice1._triggerEnvelopeRelease(time);\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.voice0.dispose();\n    this.voice1.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._vibrato.dispose();\n\n    this.vibratoRate.dispose();\n\n    this._vibratoGain.dispose();\n\n    this.harmonicity.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/instrument/DuoSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Monophonic } from \"./Monophonic\";\nimport { MonoSynth } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic {\n    constructor() {\n        super(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n        this.name = \"DuoSynth\";\n        const options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n        this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n            context: this.context,\n            onsilence: () => this.onsilence(this)\n        }));\n        this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n            context: this.context,\n        }));\n        this.harmonicity = new Multiply({\n            context: this.context,\n            units: \"positive\",\n            value: options.harmonicity,\n        });\n        this._vibrato = new LFO({\n            frequency: options.vibratoRate,\n            context: this.context,\n            min: -50,\n            max: 50\n        });\n        // start the vibrato immediately\n        this._vibrato.start();\n        this.vibratoRate = this._vibrato.frequency;\n        this._vibratoGain = new Gain({\n            context: this.context,\n            units: \"normalRange\",\n            gain: options.vibratoAmount\n        });\n        this.vibratoAmount = this._vibratoGain.gain;\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: 440\n        });\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune\n        });\n        // control the two voices frequency\n        this.frequency.connect(this.voice0.frequency);\n        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n        this._vibrato.connect(this._vibratoGain);\n        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n        this.detune.fan(this.voice0.detune, this.voice1.detune);\n        this.voice0.connect(this.output);\n        this.voice1.connect(this.output);\n        readOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n    }\n    getLevelAtTime(time) {\n        time = this.toSeconds(time);\n        return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n    }\n    static getDefaults() {\n        return deepMerge(Monophonic.getDefaults(), {\n            vibratoAmount: 0.5,\n            vibratoRate: 5,\n            harmonicity: 1.5,\n            voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n                filterEnvelope: {\n                    attack: 0.01,\n                    decay: 0.0,\n                    sustain: 1,\n                    release: 0.5\n                },\n                envelope: {\n                    attack: 0.01,\n                    decay: 0.0,\n                    sustain: 1,\n                    release: 0.5\n                }\n            }),\n            voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n                filterEnvelope: {\n                    attack: 0.01,\n                    decay: 0.0,\n                    sustain: 1,\n                    release: 0.5\n                },\n                envelope: {\n                    attack: 0.01,\n                    decay: 0.0,\n                    sustain: 1,\n                    release: 0.5\n                }\n            }),\n        });\n    }\n    /**\n     * Trigger the attack portion of the note\n     */\n    _triggerEnvelopeAttack(time, velocity) {\n        // @ts-ignore\n        this.voice0._triggerEnvelopeAttack(time, velocity);\n        // @ts-ignore\n        this.voice1._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n    _triggerEnvelopeRelease(time) {\n        // @ts-ignore\n        this.voice0._triggerEnvelopeRelease(time);\n        // @ts-ignore\n        this.voice1._triggerEnvelopeRelease(time);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this.voice0.dispose();\n        this.voice1.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this._vibrato.dispose();\n        this.vibratoRate.dispose();\n        this._vibratoGain.dispose();\n        this.harmonicity.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=DuoSynth.js.map"]},"metadata":{},"sourceType":"module"}