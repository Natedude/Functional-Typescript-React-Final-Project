{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\n\nexport class Merge extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n    this.name = \"Merge\";\n    const options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n    this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._merger.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/channel/Merge.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAoD,kCAApD;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AAMA;;;;;;;;;;AAUG;;AACH,OAAM,MAAO,KAAP,SAAqB,aAArB,CAAgD;AAwBrD,EAAA,WAAA,GAAA;AACC,UAAM,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAA1B;AAvBQ,SAAA,IAAA,GAAe,OAAf;AAwBR,UAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAApC;AAEA,SAAK,OAAL,GAAe,KAAK,MAAL,GAAc,KAAK,KAAL,GAAa,KAAK,OAAL,CAAa,mBAAb,CAAiC,OAAO,CAAC,QAAzC,CAA1C;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,QAAQ,EAAE;AADuC,KAA3C,CAAP;AAGA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,OAAL,CAAa,UAAb;;AACA,WAAO,IAAP;AACA;;AAzCoD","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n        this.name = \"Merge\";\n        const options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n        this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            channels: 2,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._merger.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=Merge.js.map"]},"metadata":{},"sourceType":"module"}