{"ast":null,"code":"export const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections) => {\n  return (nativeContext, channelMergerNode) => {\n    // Bug #15: Safari does not return the default properties.\n    channelMergerNode.channelCount = 1;\n    channelMergerNode.channelCountMode = 'explicit'; // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n\n    Object.defineProperty(channelMergerNode, 'channelCount', {\n      get: () => 1,\n      set: () => {\n        throw createInvalidStateError();\n      }\n    });\n    Object.defineProperty(channelMergerNode, 'channelCountMode', {\n      get: () => 'explicit',\n      set: () => {\n        throw createInvalidStateError();\n      }\n    }); // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n\n    const audioBufferSourceNode = nativeContext.createBufferSource();\n\n    const whenConnected = () => {\n      const length = channelMergerNode.numberOfInputs;\n\n      for (let i = 0; i < length; i += 1) {\n        audioBufferSourceNode.connect(channelMergerNode, 0, i);\n      }\n    };\n\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n\n    monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/wrap-channel-merger-node.ts"],"names":[],"mappings":"AAEA,OAAO,MAAM,2BAA2B,GAAkC,CAAC,uBAAD,EAA0B,kBAA1B,KAAgD;AACtH,SAAO,CAAC,aAAD,EAAgB,iBAAhB,KAAqC;AACxC;AACA,IAAA,iBAAiB,CAAC,YAAlB,GAAiC,CAAjC;AACA,IAAA,iBAAiB,CAAC,gBAAlB,GAAqC,UAArC,CAHwC,CAKxC;;AACA,IAAA,MAAM,CAAC,cAAP,CAAsB,iBAAtB,EAAyC,cAAzC,EAAyD;AACrD,MAAA,GAAG,EAAE,MAAM,CAD0C;AAErD,MAAA,GAAG,EAAE,MAAK;AACN,cAAM,uBAAuB,EAA7B;AACH;AAJoD,KAAzD;AAOA,IAAA,MAAM,CAAC,cAAP,CAAsB,iBAAtB,EAAyC,kBAAzC,EAA6D;AACzD,MAAA,GAAG,EAAE,MAAM,UAD8C;AAEzD,MAAA,GAAG,EAAE,MAAK;AACN,cAAM,uBAAuB,EAA7B;AACH;AAJwD,KAA7D,EAbwC,CAoBxC;;AACA,UAAM,qBAAqB,GAAG,aAAa,CAAC,kBAAd,EAA9B;;AAEA,UAAM,aAAa,GAAG,MAAK;AACvB,YAAM,MAAM,GAAG,iBAAiB,CAAC,cAAjC;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,IAAI,CAAjC,EAAoC;AAChC,QAAA,qBAAqB,CAAC,OAAtB,CAA8B,iBAA9B,EAAiD,CAAjD,EAAoD,CAApD;AACH;AACJ,KAND;;AAOA,UAAM,gBAAgB,GAAG,MAAM,qBAAqB,CAAC,UAAtB,CAAiC,iBAAjC,CAA/B;;AAEA,IAAA,kBAAkB,CAAC,iBAAD,EAAoB,aAApB,EAAmC,gBAAnC,CAAlB;AACH,GAjCD;AAkCH,CAnCM","sourceRoot":"","sourcesContent":["export const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections) => {\n    return (nativeContext, channelMergerNode) => {\n        // Bug #15: Safari does not return the default properties.\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = nativeContext.createBufferSource();\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=wrap-channel-merger-node.js.map"]},"metadata":{},"sourceType":"module"}