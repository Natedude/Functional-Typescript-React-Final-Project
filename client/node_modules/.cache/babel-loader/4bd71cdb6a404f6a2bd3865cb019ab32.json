{"ast":null,"code":"import { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\n\nexport class PitchShift extends FeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n    this.name = \"PitchShift\";\n    const options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n    this._frequency = new Signal({\n      context: this.context\n    });\n    this._delayA = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoA = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\"\n    }).connect(this._delayA.delayTime);\n    this._delayB = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoB = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\",\n      phase: 180\n    }).connect(this._delayB.delayTime);\n    this._crossFade = new CrossFade({\n      context: this.context\n    });\n    this._crossFadeLFO = new LFO({\n      context: this.context,\n      min: 0,\n      max: 1,\n      type: \"triangle\",\n      phase: 90\n    }).connect(this._crossFade.fade);\n    this._feedbackDelay = new Delay({\n      delayTime: options.delayTime,\n      context: this.context\n    });\n    this.delayTime = this._feedbackDelay.delayTime;\n    readOnly(this, \"delayTime\");\n    this._pitch = options.pitch;\n    this._windowSize = options.windowSize; // connect the two delay lines up\n\n    this._delayA.connect(this._crossFade.a);\n\n    this._delayB.connect(this._crossFade.b); // connect the frequency\n\n\n    this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency); // route the input\n\n\n    this.effectSend.fan(this._delayA, this._delayB);\n\n    this._crossFade.chain(this._feedbackDelay, this.effectReturn); // start the LFOs at the same time\n\n\n    const now = this.now();\n\n    this._lfoA.start(now);\n\n    this._lfoB.start(now);\n\n    this._crossFadeLFO.start(now); // set the initial value\n\n\n    this.windowSize = this._windowSize;\n  }\n\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    });\n  }\n  /**\n   * Repitch the incoming signal by some interval (measured in semi-tones).\n   * @example\n   * const pitchShift = new Tone.PitchShift().toDestination();\n   * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n   * pitchShift.pitch = -12; // down one octave\n   * pitchShift.pitch = 7; // up a fifth\n   */\n\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(interval) {\n    this._pitch = interval;\n    let factor = 0;\n\n    if (interval < 0) {\n      this._lfoA.min = 0;\n      this._lfoA.max = this._windowSize;\n      this._lfoB.min = 0;\n      this._lfoB.max = this._windowSize;\n      factor = intervalToFrequencyRatio(interval - 1) + 1;\n    } else {\n      this._lfoA.min = this._windowSize;\n      this._lfoA.max = 0;\n      this._lfoB.min = this._windowSize;\n      this._lfoB.max = 0;\n      factor = intervalToFrequencyRatio(interval) - 1;\n    }\n\n    this._frequency.value = factor * (1.2 / this._windowSize);\n  }\n  /**\n   * The window size corresponds roughly to the sample length in a looping sampler.\n   * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n   * signal, but larger values will result in smoother pitch shifting for larger intervals.\n   * A nominal range of 0.03 to 0.1 is recommended.\n   */\n\n\n  get windowSize() {\n    return this._windowSize;\n  }\n\n  set windowSize(size) {\n    this._windowSize = this.toSeconds(size);\n    this.pitch = this._pitch;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._frequency.dispose();\n\n    this._delayA.dispose();\n\n    this._delayB.dispose();\n\n    this._lfoA.dispose();\n\n    this._lfoB.dispose();\n\n    this._crossFade.dispose();\n\n    this._crossFadeLFO.dispose();\n\n    this._feedbackDelay.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/PitchShift.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect {\n    constructor() {\n        super(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n        this.name = \"PitchShift\";\n        const options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n        this._frequency = new Signal({ context: this.context });\n        this._delayA = new Delay({\n            maxDelay: 1,\n            context: this.context\n        });\n        this._lfoA = new LFO({\n            context: this.context,\n            min: 0,\n            max: 0.1,\n            type: \"sawtooth\"\n        }).connect(this._delayA.delayTime);\n        this._delayB = new Delay({\n            maxDelay: 1,\n            context: this.context\n        });\n        this._lfoB = new LFO({\n            context: this.context,\n            min: 0,\n            max: 0.1,\n            type: \"sawtooth\",\n            phase: 180\n        }).connect(this._delayB.delayTime);\n        this._crossFade = new CrossFade({ context: this.context });\n        this._crossFadeLFO = new LFO({\n            context: this.context,\n            min: 0,\n            max: 1,\n            type: \"triangle\",\n            phase: 90\n        }).connect(this._crossFade.fade);\n        this._feedbackDelay = new Delay({\n            delayTime: options.delayTime,\n            context: this.context,\n        });\n        this.delayTime = this._feedbackDelay.delayTime;\n        readOnly(this, \"delayTime\");\n        this._pitch = options.pitch;\n        this._windowSize = options.windowSize;\n        // connect the two delay lines up\n        this._delayA.connect(this._crossFade.a);\n        this._delayB.connect(this._crossFade.b);\n        // connect the frequency\n        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n        // route the input\n        this.effectSend.fan(this._delayA, this._delayB);\n        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n        // start the LFOs at the same time\n        const now = this.now();\n        this._lfoA.start(now);\n        this._lfoB.start(now);\n        this._crossFadeLFO.start(now);\n        // set the initial value\n        this.windowSize = this._windowSize;\n    }\n    static getDefaults() {\n        return Object.assign(FeedbackEffect.getDefaults(), {\n            pitch: 0,\n            windowSize: 0.1,\n            delayTime: 0,\n            feedback: 0\n        });\n    }\n    /**\n     * Repitch the incoming signal by some interval (measured in semi-tones).\n     * @example\n     * const pitchShift = new Tone.PitchShift().toDestination();\n     * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n     * pitchShift.pitch = -12; // down one octave\n     * pitchShift.pitch = 7; // up a fifth\n     */\n    get pitch() {\n        return this._pitch;\n    }\n    set pitch(interval) {\n        this._pitch = interval;\n        let factor = 0;\n        if (interval < 0) {\n            this._lfoA.min = 0;\n            this._lfoA.max = this._windowSize;\n            this._lfoB.min = 0;\n            this._lfoB.max = this._windowSize;\n            factor = intervalToFrequencyRatio(interval - 1) + 1;\n        }\n        else {\n            this._lfoA.min = this._windowSize;\n            this._lfoA.max = 0;\n            this._lfoB.min = this._windowSize;\n            this._lfoB.max = 0;\n            factor = intervalToFrequencyRatio(interval) - 1;\n        }\n        this._frequency.value = factor * (1.2 / this._windowSize);\n    }\n    /**\n     * The window size corresponds roughly to the sample length in a looping sampler.\n     * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n     * signal, but larger values will result in smoother pitch shifting for larger intervals.\n     * A nominal range of 0.03 to 0.1 is recommended.\n     */\n    get windowSize() {\n        return this._windowSize;\n    }\n    set windowSize(size) {\n        this._windowSize = this.toSeconds(size);\n        this.pitch = this._pitch;\n    }\n    dispose() {\n        super.dispose();\n        this._frequency.dispose();\n        this._delayA.dispose();\n        this._delayB.dispose();\n        this._lfoA.dispose();\n        this._lfoB.dispose();\n        this._crossFade.dispose();\n        this._crossFadeLFO.dispose();\n        this._feedbackDelay.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PitchShift.js.map"]},"metadata":{},"sourceType":"module"}