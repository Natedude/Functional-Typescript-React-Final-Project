{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\n\nexport class MidSideMerge extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n    this.name = \"MidSideMerge\";\n    this.mid = new Gain({\n      context: this.context\n    });\n    this.side = new Gain({\n      context: this.context\n    });\n    this._left = new Add({\n      context: this.context\n    });\n    this._leftMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._right = new Subtract({\n      context: this.context\n    });\n    this._rightMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._merge = this.output = new Merge({\n      context: this.context\n    });\n    this.mid.fan(this._left);\n    this.side.connect(this._left.addend);\n    this.mid.connect(this._right);\n    this.side.connect(this._right.subtrahend);\n\n    this._left.connect(this._leftMult);\n\n    this._right.connect(this._rightMult);\n\n    this._leftMult.connect(this._merge, 0, 0);\n\n    this._rightMult.connect(this._merge, 0, 1);\n  }\n\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._leftMult.dispose();\n\n    this._rightMult.dispose();\n\n    this._left.dispose();\n\n    this._right.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/channel/MidSideMerge.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAoD,kCAApD;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,GAAT,QAAoB,kBAApB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAS,oBAAT,QAAqC,0BAArC;AAIA;;;;;;;AAOG;;AACH,OAAM,MAAO,YAAP,SAA4B,aAA5B,CAA8D;AAkDnE,EAAA,WAAA,GAAA;AACC,UAAM,oBAAoB,CAAC,YAAY,CAAC,WAAb,EAAD,EAA6B,SAA7B,CAA1B;AAjDQ,SAAA,IAAA,GAAe,cAAf;AAkDR,SAAK,GAAL,GAAW,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAX;AACA,SAAK,IAAL,GAAY,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAZ;AACA,SAAK,KAAL,GAAa,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAR,CAAb;AACA,SAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa;AAC7B,MAAA,OAAO,EAAE,KAAK,OADe;AAE7B,MAAA,KAAK,EAAE,IAAI,CAAC;AAFiB,KAAb,CAAjB;AAIA,SAAK,MAAL,GAAc,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAb,CAAd;AACA,SAAK,UAAL,GAAkB,IAAI,QAAJ,CAAa;AAC9B,MAAA,OAAO,EAAE,KAAK,OADgB;AAE9B,MAAA,KAAK,EAAE,IAAI,CAAC;AAFkB,KAAb,CAAlB;AAIA,SAAK,MAAL,GAAc,KAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAV,CAA5B;AAEA,SAAK,GAAL,CAAS,GAAT,CAAa,KAAK,KAAlB;AACA,SAAK,IAAL,CAAU,OAAV,CAAkB,KAAK,KAAL,CAAW,MAA7B;AACA,SAAK,GAAL,CAAS,OAAT,CAAiB,KAAK,MAAtB;AACA,SAAK,IAAL,CAAU,OAAV,CAAkB,KAAK,MAAL,CAAY,UAA9B;;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,SAAxB;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,UAAzB;;AACA,SAAK,SAAL,CAAe,OAAf,CAAuB,KAAK,MAA5B,EAAoC,CAApC,EAAuC,CAAvC;;AACA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,MAA7B,EAAqC,CAArC,EAAwC,CAAxC;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,GAAL,CAAS,OAAT;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,KAAL,CAAW,OAAX;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA;;AArFkE","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideMerge extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n        this.name = \"MidSideMerge\";\n        this.mid = new Gain({ context: this.context });\n        this.side = new Gain({ context: this.context });\n        this._left = new Add({ context: this.context });\n        this._leftMult = new Multiply({\n            context: this.context,\n            value: Math.SQRT1_2\n        });\n        this._right = new Subtract({ context: this.context });\n        this._rightMult = new Multiply({\n            context: this.context,\n            value: Math.SQRT1_2\n        });\n        this._merge = this.output = new Merge({ context: this.context });\n        this.mid.fan(this._left);\n        this.side.connect(this._left.addend);\n        this.mid.connect(this._right);\n        this.side.connect(this._right.subtrahend);\n        this._left.connect(this._leftMult);\n        this._right.connect(this._rightMult);\n        this._leftMult.connect(this._merge, 0, 0);\n        this._rightMult.connect(this._merge, 0, 1);\n    }\n    dispose() {\n        super.dispose();\n        this.mid.dispose();\n        this.side.dispose();\n        this._leftMult.dispose();\n        this._rightMult.dispose();\n        this._left.dispose();\n        this._right.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MidSideMerge.js.map"]},"metadata":{},"sourceType":"module"}