{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\n\nexport class LowpassCombFilter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n    this.name = \"LowpassCombFilter\";\n    const options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n    this._combFilter = this.output = new FeedbackCombFilter({\n      context: this.context,\n      delayTime: options.delayTime,\n      resonance: options.resonance\n    });\n    this.delayTime = this._combFilter.delayTime;\n    this.resonance = this._combFilter.resonance;\n    this._lowpass = this.input = new OnePoleFilter({\n      context: this.context,\n      frequency: options.dampening,\n      type: \"lowpass\"\n    }); // connections\n\n    this._lowpass.connect(this._combFilter);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      dampening: 3000,\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n  /**\n   * The dampening control of the feedback\n   */\n\n\n  get dampening() {\n    return this._lowpass.frequency;\n  }\n\n  set dampening(fq) {\n    this._lowpass.frequency = fq;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._combFilter.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/filter/LowpassCombFilter.ts"],"names":[],"mappings":"AACA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAQA;;;;AAIG;;AACH,OAAM,MAAO,iBAAP,SAAiC,aAAjC,CAAwE;AAkC7E,EAAA,WAAA,GAAA;AACC,UAAM,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAA1B;AAjCQ,SAAA,IAAA,GAAO,mBAAP;AAkCR,UAAM,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAApC;AAEA,SAAK,WAAL,GAAmB,KAAK,MAAL,GAAc,IAAI,kBAAJ,CAAuB;AACvD,MAAA,OAAO,EAAE,KAAK,OADyC;AAEvD,MAAA,SAAS,EAAE,OAAO,CAAC,SAFoC;AAGvD,MAAA,SAAS,EAAE,OAAO,CAAC;AAHoC,KAAvB,CAAjC;AAKA,SAAK,SAAL,GAAiB,KAAK,WAAL,CAAiB,SAAlC;AACA,SAAK,SAAL,GAAiB,KAAK,WAAL,CAAiB,SAAlC;AAEA,SAAK,QAAL,GAAgB,KAAK,KAAL,GAAa,IAAI,aAAJ,CAAkB;AAC9C,MAAA,OAAO,EAAE,KAAK,OADgC;AAE9C,MAAA,SAAS,EAAE,OAAO,CAAC,SAF2B;AAG9C,MAAA,IAAI,EAAE;AAHwC,KAAlB,CAA7B,CAZD,CAkBC;;AACA,SAAK,QAAL,CAAc,OAAd,CAAsB,KAAK,WAA3B;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE,IADsC;AAEjD,MAAA,SAAS,EAAE,GAFsC;AAGjD,MAAA,SAAS,EAAE;AAHsC,KAA3C,CAAP;AAKA;AAED;;AAEG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,KAAK,QAAL,CAAc,SAArB;AACA;;AACY,MAAT,SAAS,CAAC,EAAD,EAAG;AACf,SAAK,QAAL,CAAc,SAAd,GAA0B,EAA1B;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,WAAO,IAAP;AACA;;AA/E4E","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n        this.name = \"LowpassCombFilter\";\n        const options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n        this._combFilter = this.output = new FeedbackCombFilter({\n            context: this.context,\n            delayTime: options.delayTime,\n            resonance: options.resonance,\n        });\n        this.delayTime = this._combFilter.delayTime;\n        this.resonance = this._combFilter.resonance;\n        this._lowpass = this.input = new OnePoleFilter({\n            context: this.context,\n            frequency: options.dampening,\n            type: \"lowpass\",\n        });\n        // connections\n        this._lowpass.connect(this._combFilter);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            dampening: 3000,\n            delayTime: 0.1,\n            resonance: 0.5,\n        });\n    }\n    /**\n     * The dampening control of the feedback\n     */\n    get dampening() {\n        return this._lowpass.frequency;\n    }\n    set dampening(fq) {\n        this._lowpass.frequency = fq;\n    }\n    dispose() {\n        super.dispose();\n        this._combFilter.dispose();\n        this._lowpass.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=LowpassCombFilter.js.map"]},"metadata":{},"sourceType":"module"}