{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\n\nexport class Player extends Source {\n  constructor() {\n    super(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n\n    this._activeSources = new Set();\n    const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer({\n      onload: this._onload.bind(this, options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this.autostart = options.autostart;\n    this._loop = options.loop;\n    this._loopStart = options.loopStart;\n    this._loopEnd = options.loopEnd;\n    this._playbackRate = options.playbackRate;\n    this.fadeIn = options.fadeIn;\n    this.fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      autostart: false,\n      fadeIn: 0,\n      fadeOut: 0,\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1,\n      reverse: false\n    });\n  }\n  /**\n   * Load the audio file as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * Note: this does not need to be called if a url\n   * was passed in to the constructor. Only use this\n   * if you want to manually load a new url.\n   * @param url The url of the buffer to load. Filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._buffer.load(url);\n\n      this._onload();\n\n      return this;\n    });\n  }\n  /**\n   * Internal callback when the buffer is loaded.\n   */\n\n\n  _onload(callback = noOp) {\n    callback();\n\n    if (this.autostart) {\n      this.start();\n    }\n  }\n  /**\n   * Internal callback when the buffer is done playing.\n   */\n\n\n  _onSourceEnd(source) {\n    // invoke the onstop function\n    this.onstop(this); // delete the source from the active sources\n\n    this._activeSources.delete(source);\n\n    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n      // remove the 'implicitEnd' event and replace with an explicit end\n      this._state.cancel(this.now());\n\n      this._state.setStateAtTime(\"stopped\", this.now());\n    }\n  }\n  /**\n   * Play the buffer at the given startTime. Optionally add an offset\n   * and/or duration which will play the buffer from a position\n   * within the buffer for the given duration.\n   *\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   */\n\n\n  start(time, offset, duration) {\n    super.start(time, offset, duration);\n    return this;\n  }\n  /**\n   * Internal start method\n   */\n\n\n  _start(startTime, offset, duration) {\n    // if it's a loop the default offset is the loopStart point\n    if (this._loop) {\n      offset = defaultArg(offset, this._loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    } // compute the values in seconds\n\n\n    const computedOffset = this.toSeconds(offset); // compute the duration which is either the passed in duration of the buffer.duration - offset\n\n    const origDuration = duration;\n    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n    let computedDuration = this.toSeconds(duration); // scale it by the playback rate\n\n    computedDuration = computedDuration / this._playbackRate; // get the start time\n\n    startTime = this.toSeconds(startTime); // make the source\n\n    const source = new ToneBufferSource({\n      url: this._buffer,\n      context: this.context,\n      fadeIn: this.fadeIn,\n      fadeOut: this.fadeOut,\n      loop: this._loop,\n      loopEnd: this._loopEnd,\n      loopStart: this._loopStart,\n      onended: this._onSourceEnd.bind(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output); // set the looping properties\n\n    if (!this._loop && !this._synced) {\n      // cancel the previous stop\n      this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample\n\n\n      this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n        implicitEnd: true\n      });\n    } // add it to the array of active sources\n\n\n    this._activeSources.add(source); // start it\n\n\n    if (this._loop && isUndef(origDuration)) {\n      source.start(startTime, computedOffset);\n    } else {\n      // subtract the fade out time\n      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n    }\n  }\n  /**\n   * Stop playback.\n   */\n\n\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n\n    this._activeSources.forEach(source => source.stop(computedTime));\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n\n  _restart(time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  }\n  /**\n   * Seek to a specific time in the player's buffer. If the\n   * source is no longer playing at that time, it will stop.\n   * @param offset The time to seek to.\n   * @param when The time for the seek event to occur.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n   * \tplayer.start();\n   * \t// seek to the offset in 1 second from now\n   * \tplayer.seek(0.4, \"+1\");\n   * }).toDestination();\n   */\n\n\n  seek(offset, when) {\n    const computedTime = this.toSeconds(when);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      const computedOffset = this.toSeconds(offset); // if it's currently playing, stop it\n\n      this._stop(computedTime); // restart it at the given time\n\n\n      this._start(computedTime, computedOffset);\n    }\n\n    return this;\n  }\n  /**\n   * Set the loop start and end. Will only loop if loop is set to true.\n   * @param loopStart The loop start time\n   * @param loopEnd The loop end time\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n   * // loop between the given points\n   * player.setLoopPoints(0.2, 0.3);\n   * player.loop = true;\n   * player.autostart = true;\n   */\n\n\n  setLoopPoints(loopStart, loopEnd) {\n    this.loopStart = loopStart;\n    this.loopEnd = loopEnd;\n    return this;\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = loopStart;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopStart = loopStart;\n    });\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = loopEnd;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopEnd = loopEnd;\n    });\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n   * player.loop = true;\n   * player.autostart = true;\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    // if no change, do nothing\n    if (this._loop === loop) {\n      return;\n    }\n\n    this._loop = loop; // set the loop of all of the sources\n\n    this._activeSources.forEach(source => {\n      source.loop = loop;\n    });\n\n    if (loop) {\n      // remove the next stopEvent\n      const stopEvent = this._state.getNextState(\"stopped\", this.now());\n\n      if (stopEvent) {\n        this._state.cancel(stopEvent.time);\n      }\n    }\n  }\n  /**\n   * Normal speed is 1. The pitch will change with the playback rate.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n   * // play at 1/4 speed\n   * player.playbackRate = 0.25;\n   * // play as soon as the buffer is loaded\n   * player.autostart = true;\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    const now = this.now(); // cancel the stop event since it's at a different time now\n\n    const stopEvent = this._state.getNextState(\"stopped\", now);\n\n    if (stopEvent && stopEvent.implicitEnd) {\n      this._state.cancel(stopEvent.time);\n\n      this._activeSources.forEach(source => source.cancelStop());\n    } // set all the sources\n\n\n    this._activeSources.forEach(source => {\n      source.playbackRate.setValueAtTime(rate, now);\n    });\n  }\n  /**\n   * If the buffer should be reversed\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n   * player.autostart = true;\n   * player.reverse = true;\n   */\n\n\n  get reverse() {\n    return this._buffer.reverse;\n  }\n\n  set reverse(rev) {\n    this._buffer.reverse = rev;\n  }\n  /**\n   * If the buffer is loaded\n   */\n\n\n  get loaded() {\n    return this._buffer.loaded;\n  }\n\n  dispose() {\n    super.dispose(); // disconnect all of the players\n\n    this._activeSources.forEach(source => source.dispose());\n\n    this._activeSources.clear();\n\n    this._buffer.dispose();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","map":{"version":3,"sources":["../../../../Tone/source/buffer/Player.ts"],"names":[],"mappings":";AAAA,SAAS,eAAT,QAAgC,oCAAhC;AAEA,SAAS,UAAT,EAAqB,oBAArB,QAAiD,0BAAjD;AACA,SAAS,IAAT,QAAqB,2BAArB;AACA,SAAS,OAAT,QAAwB,2BAAxB;AACA,SAAS,MAAT,QAAsC,WAAtC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,WAAT,QAA4B,uBAA5B;AACA,SAAS,SAAT,QAA0B,2BAA1B;AAgBA;;;;;;;AAOG;;AACH,OAAM,MAAO,MAAP,SAAsB,MAAtB,CAA2C;AA0DhD,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAA1B;AA1DQ,SAAA,IAAA,GAAe,QAAf;AAiCT;;AAEG;;AACK,SAAA,cAAA,GAAwC,IAAI,GAAJ,EAAxC;AAuBP,UAAM,OAAO,GAAG,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAApC;AAEA,SAAK,OAAL,GAAe,IAAI,eAAJ,CAAoB;AAClC,MAAA,MAAM,EAAE,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,EAAwB,OAAO,CAAC,MAAhC,CAD0B;AAElC,MAAA,OAAO,EAAE,OAAO,CAAC,OAFiB;AAGlC,MAAA,OAAO,EAAE,OAAO,CAAC,OAHiB;AAIlC,MAAA,GAAG,EAAE,OAAO,CAAC;AAJqB,KAApB,CAAf;AAMA,SAAK,SAAL,GAAiB,OAAO,CAAC,SAAzB;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,IAArB;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,SAA1B;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,OAAxB;AACA,SAAK,aAAL,GAAqB,OAAO,CAAC,YAA7B;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;AACA,SAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,SAAS,EAAE,KAD+B;AAE1C,MAAA,MAAM,EAAE,CAFkC;AAG1C,MAAA,OAAO,EAAE,CAHiC;AAI1C,MAAA,IAAI,EAAE,KAJoC;AAK1C,MAAA,OAAO,EAAE,CALiC;AAM1C,MAAA,SAAS,EAAE,CAN+B;AAO1C,MAAA,MAAM,EAAE,IAPkC;AAQ1C,MAAA,OAAO,EAAE,IARiC;AAS1C,MAAA,YAAY,EAAE,CAT4B;AAU1C,MAAA,OAAO,EAAE;AAViC,KAApC,CAAP;AAYA;AAED;;;;;;;;AAQG;;;AACG,EAAA,IAAI,CAAC,GAAD,EAAY;;AACrB,YAAM,KAAK,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAN;;AACA,WAAK,OAAL;;AACA,aAAO,IAAP;AACA,K;AAAA;AAED;;AAEG;;;AACK,EAAA,OAAO,CAAC,QAAA,GAAuB,IAAxB,EAA4B;AAC1C,IAAA,QAAQ;;AACR,QAAI,KAAK,SAAT,EAAoB;AACnB,WAAK,KAAL;AACA;AACD;AAED;;AAEG;;;AACK,EAAA,YAAY,CAAC,MAAD,EAAyB;AAC5C;AACA,SAAK,MAAL,CAAY,IAAZ,EAF4C,CAI5C;;AACA,SAAK,cAAL,CAAoB,MAApB,CAA2B,MAA3B;;AACA,QAAI,KAAK,cAAL,CAAoB,IAApB,KAA6B,CAA7B,IAAkC,CAAC,KAAK,OAAxC,IACH,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAAK,GAAL,EAA3B,MAA2C,SAD5C,EACuD;AACtD;AACA,WAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,GAAL,EAAnB;;AACA,WAAK,MAAL,CAAY,cAAZ,CAA2B,SAA3B,EAAsC,KAAK,GAAL,EAAtC;AACA;AACD;AAED;;;;;;;;AAQG;;;AACH,EAAA,KAAK,CAAC,IAAD,EAAc,MAAd,EAA6B,QAA7B,EAA4C;AAChD,UAAM,KAAN,CAAY,IAAZ,EAAkB,MAAlB,EAA0B,QAA1B;AACA,WAAO,IAAP;AACA;AAED;;AAEG;;;AACO,EAAA,MAAM,CAAC,SAAD,EAAmB,MAAnB,EAAkC,QAAlC,EAAiD;AAChE;AACA,QAAI,KAAK,KAAT,EAAgB;AACf,MAAA,MAAM,GAAG,UAAU,CAAC,MAAD,EAAS,KAAK,UAAd,CAAnB;AACA,KAFD,MAEO;AACN;AACA,MAAA,MAAM,GAAG,UAAU,CAAC,MAAD,EAAS,CAAT,CAAnB;AACA,KAP+D,CAShE;;;AACA,UAAM,cAAc,GAAG,KAAK,SAAL,CAAe,MAAf,CAAvB,CAVgE,CAYhE;;AACA,UAAM,YAAY,GAAG,QAArB;AACA,IAAA,QAAQ,GAAG,UAAU,CAAC,QAAD,EAAW,IAAI,CAAC,GAAL,CAAS,KAAK,OAAL,CAAa,QAAb,GAAwB,cAAjC,EAAiD,CAAjD,CAAX,CAArB;AACA,QAAI,gBAAgB,GAAG,KAAK,SAAL,CAAe,QAAf,CAAvB,CAfgE,CAiBhE;;AACA,IAAA,gBAAgB,GAAG,gBAAgB,GAAG,KAAK,aAA3C,CAlBgE,CAoBhE;;AACA,IAAA,SAAS,GAAG,KAAK,SAAL,CAAe,SAAf,CAAZ,CArBgE,CAuBhE;;AACA,UAAM,MAAM,GAAG,IAAI,gBAAJ,CAAqB;AACnC,MAAA,GAAG,EAAE,KAAK,OADyB;AAEnC,MAAA,OAAO,EAAE,KAAK,OAFqB;AAGnC,MAAA,MAAM,EAAE,KAAK,MAHsB;AAInC,MAAA,OAAO,EAAE,KAAK,OAJqB;AAKnC,MAAA,IAAI,EAAE,KAAK,KALwB;AAMnC,MAAA,OAAO,EAAE,KAAK,QANqB;AAOnC,MAAA,SAAS,EAAE,KAAK,UAPmB;AAQnC,MAAA,OAAO,EAAE,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAR0B;AASnC,MAAA,YAAY,EAAE,KAAK;AATgB,KAArB,EAUZ,OAVY,CAUJ,KAAK,MAVD,CAAf,CAxBgE,CAoChE;;AACA,QAAI,CAAC,KAAK,KAAN,IAAe,CAAC,KAAK,OAAzB,EAAkC;AACjC;AACA,WAAK,MAAL,CAAY,MAAZ,CAAmB,SAAS,GAAG,gBAA/B,EAFiC,CAGjC;;;AACA,WAAK,MAAL,CAAY,cAAZ,CAA2B,SAA3B,EAAsC,SAAS,GAAG,gBAAlD,EAAoE;AACnE,QAAA,WAAW,EAAE;AADsD,OAApE;AAGA,KA5C+D,CA8ChE;;;AACA,SAAK,cAAL,CAAoB,GAApB,CAAwB,MAAxB,EA/CgE,CAiDhE;;;AACA,QAAI,KAAK,KAAL,IAAc,OAAO,CAAC,YAAD,CAAzB,EAAyC;AACxC,MAAA,MAAM,CAAC,KAAP,CAAa,SAAb,EAAwB,cAAxB;AACA,KAFD,MAEO;AACN;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,SAAb,EAAwB,cAAxB,EAAwC,gBAAgB,GAAG,KAAK,SAAL,CAAe,KAAK,OAApB,CAA3D;AACA;AACD;AAED;;AAEG;;;AACO,EAAA,KAAK,CAAC,IAAD,EAAY;AAC1B,UAAM,YAAY,GAAG,KAAK,SAAL,CAAe,IAAf,CAArB;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,IAAI,MAAM,CAAC,IAAP,CAAY,YAAZ,CAAtC;AACA;AAED;;;;;;AAMG;;;AACH,EAAA,OAAO,CAAC,IAAD,EAAiB,MAAjB,EAAgC,QAAhC,EAA+C;AACrD,UAAM,OAAN,CAAc,IAAd,EAAoB,MAApB,EAA4B,QAA5B;AACA,WAAO,IAAP;AACA;;AAES,EAAA,QAAQ,CAAC,IAAD,EAAiB,MAAjB,EAAgC,QAAhC,EAA+C;AAChE,SAAK,KAAL,CAAW,IAAX;;AACA,SAAK,MAAL,CAAY,IAAZ,EAAkB,MAAlB,EAA0B,QAA1B;AACA;AAED;;;;;;;;;;;AAWG;;;AACH,EAAA,IAAI,CAAC,MAAD,EAAe,IAAf,EAA0B;AAC7B,UAAM,YAAY,GAAG,KAAK,SAAL,CAAe,IAAf,CAArB;;AACA,QAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,YAA3B,MAA6C,SAAjD,EAA4D;AAC3D,YAAM,cAAc,GAAG,KAAK,SAAL,CAAe,MAAf,CAAvB,CAD2D,CAE3D;;AACA,WAAK,KAAL,CAAW,YAAX,EAH2D,CAI3D;;;AACA,WAAK,MAAL,CAAY,YAAZ,EAA0B,cAA1B;AACA;;AACD,WAAO,IAAP;AACA;AAED;;;;;;;;;;AAUG;;;AACH,EAAA,aAAa,CAAC,SAAD,EAAkB,OAAlB,EAA+B;AAC3C,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,OAAL,GAAe,OAAf;AACA,WAAO,IAAP;AACA;AAED;;AAEG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,KAAK,UAAZ;AACA;;AACY,MAAT,SAAS,CAAC,SAAD,EAAU;AACtB,SAAK,UAAL,GAAkB,SAAlB;;AACA,QAAI,KAAK,MAAL,CAAY,MAAhB,EAAwB;AACvB,MAAA,WAAW,CAAC,KAAK,SAAL,CAAe,SAAf,CAAD,EAA4B,CAA5B,EAA+B,KAAK,MAAL,CAAY,QAA3C,CAAX;AACA,KAJqB,CAKtB;;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,IAAG;AACpC,MAAA,MAAM,CAAC,SAAP,GAAmB,SAAnB;AACA,KAFD;AAGA;AAED;;AAEG;;;AACQ,MAAP,OAAO,GAAA;AACV,WAAO,KAAK,QAAZ;AACA;;AACU,MAAP,OAAO,CAAC,OAAD,EAAQ;AAClB,SAAK,QAAL,GAAgB,OAAhB;;AACA,QAAI,KAAK,MAAL,CAAY,MAAhB,EAAwB;AACvB,MAAA,WAAW,CAAC,KAAK,SAAL,CAAe,OAAf,CAAD,EAA0B,CAA1B,EAA6B,KAAK,MAAL,CAAY,QAAzC,CAAX;AACA,KAJiB,CAKlB;;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,IAAG;AACpC,MAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;AACA,KAFD;AAGA;AAED;;AAEG;;;AACO,MAAN,MAAM,GAAA;AACT,WAAO,KAAK,OAAZ;AACA;;AACS,MAAN,MAAM,CAAC,MAAD,EAAO;AAChB,SAAK,OAAL,CAAa,GAAb,CAAiB,MAAjB;AACA;AAED;;;;;;AAMG;;;AACK,MAAJ,IAAI,GAAA;AACP,WAAO,KAAK,KAAZ;AACA;;AACO,MAAJ,IAAI,CAAC,IAAD,EAAK;AACZ;AACA,QAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;AACxB;AACA;;AACD,SAAK,KAAL,GAAa,IAAb,CALY,CAMZ;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,IAAG;AACpC,MAAA,MAAM,CAAC,IAAP,GAAc,IAAd;AACA,KAFD;;AAGA,QAAI,IAAJ,EAAU;AACT;AACA,YAAM,SAAS,GAAG,KAAK,MAAL,CAAY,YAAZ,CAAyB,SAAzB,EAAoC,KAAK,GAAL,EAApC,CAAlB;;AACA,UAAI,SAAJ,EAAe;AACd,aAAK,MAAL,CAAY,MAAZ,CAAmB,SAAS,CAAC,IAA7B;AACA;AACD;AACD;AAED;;;;;;;;AAQG;;;AACa,MAAZ,YAAY,GAAA;AACf,WAAO,KAAK,aAAZ;AACA;;AACe,MAAZ,YAAY,CAAC,IAAD,EAAK;AACpB,SAAK,aAAL,GAAqB,IAArB;AACA,UAAM,GAAG,GAAG,KAAK,GAAL,EAAZ,CAFoB,CAIpB;;AACA,UAAM,SAAS,GAAG,KAAK,MAAL,CAAY,YAAZ,CAAyB,SAAzB,EAAoC,GAApC,CAAlB;;AACA,QAAI,SAAS,IAAI,SAAS,CAAC,WAA3B,EAAwC;AACvC,WAAK,MAAL,CAAY,MAAZ,CAAmB,SAAS,CAAC,IAA7B;;AACA,WAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,IAAI,MAAM,CAAC,UAAP,EAAtC;AACA,KATmB,CAWpB;;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,IAAG;AACpC,MAAA,MAAM,CAAC,YAAP,CAAoB,cAApB,CAAmC,IAAnC,EAAyC,GAAzC;AACA,KAFD;AAGA;AAED;;;;;;AAMG;;;AACQ,MAAP,OAAO,GAAA;AACV,WAAO,KAAK,OAAL,CAAa,OAApB;AACA;;AACU,MAAP,OAAO,CAAC,GAAD,EAAI;AACd,SAAK,OAAL,CAAa,OAAb,GAAuB,GAAvB;AACA;AAED;;AAEG;;;AACO,MAAN,MAAM,GAAA;AACT,WAAO,KAAK,OAAL,CAAa,MAApB;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN,GADM,CAEN;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,IAAI,MAAM,CAAC,OAAP,EAAtC;;AACA,SAAK,cAAL,CAAoB,KAApB;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,WAAO,IAAP;AACA;;AAtZ+C;;AA4ChD,UAAA,CAAA,CADC,SAAS,CAAC,CAAD,CACV,CAAA,E,gBAAA,E,QAAA,E,KAAa,CAAb,CAAA;;AAMA,UAAA,CAAA,CADC,SAAS,CAAC,CAAD,CACV,CAAA,E,gBAAA,E,SAAA,E,KAAc,CAAd,CAAA","sourceRoot":"","sourcesContent":["import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source {\n    constructor() {\n        super(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n        this.name = \"Player\";\n        /**\n         * All of the active buffer source nodes\n         */\n        this._activeSources = new Set();\n        const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n        this._buffer = new ToneAudioBuffer({\n            onload: this._onload.bind(this, options.onload),\n            onerror: options.onerror,\n            reverse: options.reverse,\n            url: options.url,\n        });\n        this.autostart = options.autostart;\n        this._loop = options.loop;\n        this._loopStart = options.loopStart;\n        this._loopEnd = options.loopEnd;\n        this._playbackRate = options.playbackRate;\n        this.fadeIn = options.fadeIn;\n        this.fadeOut = options.fadeOut;\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            autostart: false,\n            fadeIn: 0,\n            fadeOut: 0,\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            onload: noOp,\n            onerror: noOp,\n            playbackRate: 1,\n            reverse: false,\n        });\n    }\n    /**\n     * Load the audio file as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * Note: this does not need to be called if a url\n     * was passed in to the constructor. Only use this\n     * if you want to manually load a new url.\n     * @param url The url of the buffer to load. Filetype support depends on the browser.\n     */\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._buffer.load(url);\n            this._onload();\n            return this;\n        });\n    }\n    /**\n     * Internal callback when the buffer is loaded.\n     */\n    _onload(callback = noOp) {\n        callback();\n        if (this.autostart) {\n            this.start();\n        }\n    }\n    /**\n     * Internal callback when the buffer is done playing.\n     */\n    _onSourceEnd(source) {\n        // invoke the onstop function\n        this.onstop(this);\n        // delete the source from the active sources\n        this._activeSources.delete(source);\n        if (this._activeSources.size === 0 && !this._synced &&\n            this._state.getValueAtTime(this.now()) === \"started\") {\n            // remove the 'implicitEnd' event and replace with an explicit end\n            this._state.cancel(this.now());\n            this._state.setStateAtTime(\"stopped\", this.now());\n        }\n    }\n    /**\n     * Play the buffer at the given startTime. Optionally add an offset\n     * and/or duration which will play the buffer from a position\n     * within the buffer for the given duration.\n     *\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     */\n    start(time, offset, duration) {\n        super.start(time, offset, duration);\n        return this;\n    }\n    /**\n     * Internal start method\n     */\n    _start(startTime, offset, duration) {\n        // if it's a loop the default offset is the loopStart point\n        if (this._loop) {\n            offset = defaultArg(offset, this._loopStart);\n        }\n        else {\n            // otherwise the default offset is 0\n            offset = defaultArg(offset, 0);\n        }\n        // compute the values in seconds\n        const computedOffset = this.toSeconds(offset);\n        // compute the duration which is either the passed in duration of the buffer.duration - offset\n        const origDuration = duration;\n        duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n        let computedDuration = this.toSeconds(duration);\n        // scale it by the playback rate\n        computedDuration = computedDuration / this._playbackRate;\n        // get the start time\n        startTime = this.toSeconds(startTime);\n        // make the source\n        const source = new ToneBufferSource({\n            url: this._buffer,\n            context: this.context,\n            fadeIn: this.fadeIn,\n            fadeOut: this.fadeOut,\n            loop: this._loop,\n            loopEnd: this._loopEnd,\n            loopStart: this._loopStart,\n            onended: this._onSourceEnd.bind(this),\n            playbackRate: this._playbackRate,\n        }).connect(this.output);\n        // set the looping properties\n        if (!this._loop && !this._synced) {\n            // cancel the previous stop\n            this._state.cancel(startTime + computedDuration);\n            // if it's not looping, set the state change at the end of the sample\n            this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n                implicitEnd: true,\n            });\n        }\n        // add it to the array of active sources\n        this._activeSources.add(source);\n        // start it\n        if (this._loop && isUndef(origDuration)) {\n            source.start(startTime, computedOffset);\n        }\n        else {\n            // subtract the fade out time\n            source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n        }\n    }\n    /**\n     * Stop playback.\n     */\n    _stop(time) {\n        const computedTime = this.toSeconds(time);\n        this._activeSources.forEach(source => source.stop(computedTime));\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n    restart(time, offset, duration) {\n        super.restart(time, offset, duration);\n        return this;\n    }\n    _restart(time, offset, duration) {\n        this._stop(time);\n        this._start(time, offset, duration);\n    }\n    /**\n     * Seek to a specific time in the player's buffer. If the\n     * source is no longer playing at that time, it will stop.\n     * @param offset The time to seek to.\n     * @param when The time for the seek event to occur.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n     * \tplayer.start();\n     * \t// seek to the offset in 1 second from now\n     * \tplayer.seek(0.4, \"+1\");\n     * }).toDestination();\n     */\n    seek(offset, when) {\n        const computedTime = this.toSeconds(when);\n        if (this._state.getValueAtTime(computedTime) === \"started\") {\n            const computedOffset = this.toSeconds(offset);\n            // if it's currently playing, stop it\n            this._stop(computedTime);\n            // restart it at the given time\n            this._start(computedTime, computedOffset);\n        }\n        return this;\n    }\n    /**\n     * Set the loop start and end. Will only loop if loop is set to true.\n     * @param loopStart The loop start time\n     * @param loopEnd The loop end time\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n     * // loop between the given points\n     * player.setLoopPoints(0.2, 0.3);\n     * player.loop = true;\n     * player.autostart = true;\n     */\n    setLoopPoints(loopStart, loopEnd) {\n        this.loopStart = loopStart;\n        this.loopEnd = loopEnd;\n        return this;\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n    get loopStart() {\n        return this._loopStart;\n    }\n    set loopStart(loopStart) {\n        this._loopStart = loopStart;\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n        }\n        // get the current source\n        this._activeSources.forEach(source => {\n            source.loopStart = loopStart;\n        });\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n    get loopEnd() {\n        return this._loopEnd;\n    }\n    set loopEnd(loopEnd) {\n        this._loopEnd = loopEnd;\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n        }\n        // get the current source\n        this._activeSources.forEach(source => {\n            source.loopEnd = loopEnd;\n        });\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n    get buffer() {\n        return this._buffer;\n    }\n    set buffer(buffer) {\n        this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n     * player.loop = true;\n     * player.autostart = true;\n     */\n    get loop() {\n        return this._loop;\n    }\n    set loop(loop) {\n        // if no change, do nothing\n        if (this._loop === loop) {\n            return;\n        }\n        this._loop = loop;\n        // set the loop of all of the sources\n        this._activeSources.forEach(source => {\n            source.loop = loop;\n        });\n        if (loop) {\n            // remove the next stopEvent\n            const stopEvent = this._state.getNextState(\"stopped\", this.now());\n            if (stopEvent) {\n                this._state.cancel(stopEvent.time);\n            }\n        }\n    }\n    /**\n     * Normal speed is 1. The pitch will change with the playback rate.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n     * // play at 1/4 speed\n     * player.playbackRate = 0.25;\n     * // play as soon as the buffer is loaded\n     * player.autostart = true;\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        this._playbackRate = rate;\n        const now = this.now();\n        // cancel the stop event since it's at a different time now\n        const stopEvent = this._state.getNextState(\"stopped\", now);\n        if (stopEvent && stopEvent.implicitEnd) {\n            this._state.cancel(stopEvent.time);\n            this._activeSources.forEach(source => source.cancelStop());\n        }\n        // set all the sources\n        this._activeSources.forEach(source => {\n            source.playbackRate.setValueAtTime(rate, now);\n        });\n    }\n    /**\n     * If the buffer should be reversed\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n     * player.autostart = true;\n     * player.reverse = true;\n     */\n    get reverse() {\n        return this._buffer.reverse;\n    }\n    set reverse(rev) {\n        this._buffer.reverse = rev;\n    }\n    /**\n     * If the buffer is loaded\n     */\n    get loaded() {\n        return this._buffer.loaded;\n    }\n    dispose() {\n        super.dispose();\n        // disconnect all of the players\n        this._activeSources.forEach(source => source.dispose());\n        this._activeSources.clear();\n        this._buffer.dispose();\n        return this;\n    }\n}\n__decorate([\n    timeRange(0)\n], Player.prototype, \"fadeIn\", void 0);\n__decorate([\n    timeRange(0)\n], Player.prototype, \"fadeOut\", void 0);\n//# sourceMappingURL=Player.js.map"]},"metadata":{},"sourceType":"module"}