{"ast":null,"code":"import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\n\nexport class ToneConstantSource extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n    this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n\n    this._source = this.context.createConstantSource();\n    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    connect(this._source, this._gainNode);\n    this.offset = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n\n\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._source.start(computedTime);\n\n    return this;\n  }\n\n  _stopSource(time) {\n    this._source.stop(time);\n  }\n\n  dispose() {\n    super.dispose();\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._source.disconnect();\n\n    this.offset.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/signal/ToneConstantSource.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,KAAT,QAAsB,uBAAtB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,aAAT,QAAoD,yBAApD;AAUA;;;;AAIG;;AACH,OAAM,MAAO,kBAAP,SAAwE,aAAxE,CAA0H;AAmB/H,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAA1B;AAnBQ,SAAA,IAAA,GAAe,oBAAf;AAET;;AAEG;;AACK,SAAA,OAAA,GAAU,KAAK,OAAL,CAAa,oBAAb,EAAV;AAeP,UAAM,OAAO,GAAG,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAApC;AAEA,IAAA,OAAO,CAAC,KAAK,OAAN,EAAe,KAAK,SAApB,CAAP;AAEA,SAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AACvB,MAAA,OAAO,EAAE,KAAK,OADS;AAEvB,MAAA,OAAO,EAAE,OAAO,CAAC,OAFM;AAGvB,MAAA,KAAK,EAAE,KAAK,OAAL,CAAa,MAHG;AAIvB,MAAA,KAAK,EAAE,OAAO,CAAC,KAJQ;AAKvB,MAAA,KAAK,EAAE,OAAO,CAAC,MALQ;AAMvB,MAAA,QAAQ,EAAE,OAAO,CAAC,QANK;AAOvB,MAAA,QAAQ,EAAE,OAAO,CAAC;AAPK,KAAV,CAAd;AASA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,OAAO,EAAE,IADwC;AAEjD,MAAA,MAAM,EAAE,CAFyC;AAGjD,MAAA,KAAK,EAAE;AAH0C,KAA3C,CAAP;AAKA;AAED;;;AAGG;;;AACH,EAAA,KAAK,CAAC,IAAD,EAAY;AAChB,UAAM,YAAY,GAAG,KAAK,SAAL,CAAe,IAAf,CAArB;AACA,SAAK,GAAL,CAAS,OAAT,EAAkB,YAAlB;;AACA,SAAK,UAAL,CAAgB,YAAhB;;AACA,SAAK,OAAL,CAAa,KAAb,CAAmB,YAAnB;;AACA,WAAO,IAAP;AACA;;AAES,EAAA,WAAW,CAAC,IAAD,EAAe;AACnC,SAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,QAAI,KAAK,KAAL,KAAe,SAAnB,EAA8B;AAC7B,WAAK,IAAL;AACA;;AACD,SAAK,OAAL,CAAa,UAAb;;AACA,SAAK,MAAL,CAAY,OAAZ;AACA,WAAO,IAAP;AACA;;AArE8H","sourceRoot":"","sourcesContent":["import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource extends OneShotSource {\n    constructor() {\n        super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n        this.name = \"ToneConstantSource\";\n        /**\n         * The signal generator\n         */\n        this._source = this.context.createConstantSource();\n        const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n        connect(this._source, this._gainNode);\n        this.offset = new Param({\n            context: this.context,\n            convert: options.convert,\n            param: this._source.offset,\n            units: options.units,\n            value: options.offset,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(OneShotSource.getDefaults(), {\n            convert: true,\n            offset: 1,\n            units: \"number\",\n        });\n    }\n    /**\n     * Start the source node at the given time\n     * @param  time When to start the source\n     */\n    start(time) {\n        const computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        this._startGain(computedTime);\n        this._source.start(computedTime);\n        return this;\n    }\n    _stopSource(time) {\n        this._source.stop(time);\n    }\n    dispose() {\n        super.dispose();\n        if (this.state === \"started\") {\n            this.stop();\n        }\n        this._source.disconnect();\n        this.offset.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneConstantSource.js.map"]},"metadata":{},"sourceType":"module"}