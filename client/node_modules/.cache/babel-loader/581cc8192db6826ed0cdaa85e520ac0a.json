{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\n\nexport class MultibandSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n\n    this.output = undefined;\n    /**\n     * The low band.\n     */\n\n    this.low = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n\n    this._lowMidFilter = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n\n    this.mid = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n\n    this.high = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    this._internalChannels = [this.low, this.mid, this.high];\n    const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    this.lowFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    this.highFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.input.fan(this.low, this.high);\n    this.input.chain(this._lowMidFilter, this.mid); // the frequency control signal\n\n    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n    this.highFrequency.fan(this.mid.frequency, this.high.frequency); // the Q value\n\n    this.Q.connect(this.low.Q);\n    this.Q.connect(this._lowMidFilter.Q);\n    this.Q.connect(this.mid.Q);\n    this.Q.connect(this.high.Q);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n\n    this._lowMidFilter.dispose();\n\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/channel/MultibandSplit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n        this.name = \"MultibandSplit\";\n        /**\n         * the input\n         */\n        this.input = new Gain({ context: this.context });\n        /**\n         * no output node, use either low, mid or high outputs\n         */\n        this.output = undefined;\n        /**\n         * The low band.\n         */\n        this.low = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"lowpass\",\n        });\n        /**\n         * the lower filter of the mid band\n         */\n        this._lowMidFilter = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"highpass\",\n        });\n        /**\n         * The mid band output.\n         */\n        this.mid = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"lowpass\",\n        });\n        /**\n         * The high band output.\n         */\n        this.high = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"highpass\",\n        });\n        this._internalChannels = [this.low, this.mid, this.high];\n        const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n        this.lowFrequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.lowFrequency,\n        });\n        this.highFrequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.highFrequency,\n        });\n        this.Q = new Signal({\n            context: this.context,\n            units: \"positive\",\n            value: options.Q,\n        });\n        this.input.fan(this.low, this.high);\n        this.input.chain(this._lowMidFilter, this.mid);\n        // the frequency control signal\n        this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n        this.highFrequency.fan(this.mid.frequency, this.high.frequency);\n        // the Q value\n        this.Q.connect(this.low.Q);\n        this.Q.connect(this._lowMidFilter.Q);\n        this.Q.connect(this.mid.Q);\n        this.Q.connect(this.high.Q);\n        readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            Q: 1,\n            highFrequency: 2500,\n            lowFrequency: 400,\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n        this.low.dispose();\n        this._lowMidFilter.dispose();\n        this.mid.dispose();\n        this.high.dispose();\n        this.lowFrequency.dispose();\n        this.highFrequency.dispose();\n        this.Q.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MultibandSplit.js.map"]},"metadata":{},"sourceType":"module"}