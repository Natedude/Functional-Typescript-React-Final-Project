{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { timeRange } from \"../core/util/Decorator\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\n\nexport class Monophonic extends Instrument {\n  constructor() {\n    super(optionsFromArguments(Monophonic.getDefaults(), arguments));\n    const options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n    this.portamento = options.portamento;\n    this.onsilence = options.onsilence;\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      detune: 0,\n      onsilence: noOp,\n      portamento: 0\n    });\n  }\n  /**\n   * Trigger the attack of the note optionally with a given velocity.\n   * @param  note The note to trigger.\n   * @param  time When the note should start.\n   * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger the note a half second from now at half velocity\n   * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n   */\n\n\n  triggerAttack(note, time, velocity = 1) {\n    this.log(\"triggerAttack\", note, time, velocity);\n    const seconds = this.toSeconds(time);\n\n    this._triggerEnvelopeAttack(seconds, velocity);\n\n    this.setNote(note, seconds);\n    return this;\n  }\n  /**\n   * Trigger the release portion of the envelope\n   * @param  time If no time is given, the release happens immediatly\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // trigger the release a second from now\n   * synth.triggerRelease(\"+1\");\n   */\n\n\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    const seconds = this.toSeconds(time);\n\n    this._triggerEnvelopeRelease(seconds);\n\n    return this;\n  }\n  /**\n   * Set the note at the given time. If no time is given, the note\n   * will set immediately.\n   * @param note The note to change to.\n   * @param  time The time when the note should be set.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // change to F#6 in one quarter note from now.\n   * synth.setNote(\"F#6\", \"+4n\");\n   */\n\n\n  setNote(note, time) {\n    const computedTime = this.toSeconds(time);\n    const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\n    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n      const portTime = this.toSeconds(this.portamento);\n      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n    } else {\n      this.frequency.setValueAtTime(computedFrequency, computedTime);\n    }\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Monophonic.prototype, \"portamento\", void 0);","map":{"version":3,"sources":["../../../Tone/instrument/Monophonic.ts"],"names":[],"mappings":";AAAA,SAAS,cAAT,QAA+B,wBAA/B;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,IAAT,QAAqB,wBAArB;AACA,SAAS,UAAT,QAA8C,0BAA9C;AAEA,SAAS,SAAT,QAA0B,wBAA1B;AAUA;;AAEG;;AACH,OAAM,MAAgB,UAAhB,SAAsE,UAAtE,CAAyF;AAwB9F,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,CAA1B;AACA,UAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,CAApC;AAEA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,SAAK,SAAL,GAAiB,OAAO,CAAC,SAAzB;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,UAAU,CAAC,WAAX,EAAd,EAAwC;AAC9C,MAAA,MAAM,EAAE,CADsC;AAE9C,MAAA,SAAS,EAAE,IAFmC;AAG9C,MAAA,UAAU,EAAE;AAHkC,KAAxC,CAAP;AAKA;AAED;;;;;;;;;AASG;;;AACH,EAAA,aAAa,CAAC,IAAD,EAAmC,IAAnC,EAAgD,QAAA,GAAwB,CAAxE,EAAyE;AACrF,SAAK,GAAL,CAAS,eAAT,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,QAAtC;AACA,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,IAAf,CAAhB;;AACA,SAAK,sBAAL,CAA4B,OAA5B,EAAqC,QAArC;;AACA,SAAK,OAAL,CAAa,IAAb,EAAmB,OAAnB;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAQG;;;AACH,EAAA,cAAc,CAAC,IAAD,EAAY;AACzB,SAAK,GAAL,CAAS,gBAAT,EAA2B,IAA3B;AACA,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,IAAf,CAAhB;;AACA,SAAK,uBAAL,CAA6B,OAA7B;;AACA,WAAO,IAAP;AACA;AAoBD;;;;;;;;;;AAUG;;;AACH,EAAA,OAAO,CAAC,IAAD,EAAmC,IAAnC,EAA8C;AACpD,UAAM,YAAY,GAAG,KAAK,SAAL,CAAe,IAAf,CAArB;AACA,UAAM,iBAAiB,GAAG,IAAI,YAAY,cAAhB,GAAiC,IAAI,CAAC,WAAL,EAAjC,GAAsD,IAAhF;;AACA,QAAI,KAAK,UAAL,GAAkB,CAAlB,IAAuB,KAAK,cAAL,CAAoB,YAApB,IAAoC,IAA/D,EAAqE;AACpE,YAAM,QAAQ,GAAG,KAAK,SAAL,CAAe,KAAK,UAApB,CAAjB;AACA,WAAK,SAAL,CAAe,iBAAf,CAAiC,iBAAjC,EAAoD,QAApD,EAA8D,YAA9D;AACA,KAHD,MAGO;AACN,WAAK,SAAL,CAAe,cAAf,CAA8B,iBAA9B,EAAiD,YAAjD;AACA;;AACD,WAAO,IAAP;AACA;;AAlH6F;;AAM9F,UAAA,CAAA,CADC,SAAS,CAAC,CAAD,CACV,CAAA,E,oBAAA,E,YAAA,E,KAAoB,CAApB,CAAA","sourceRoot":"","sourcesContent":["import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { timeRange } from \"../core/util/Decorator\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport class Monophonic extends Instrument {\n    constructor() {\n        super(optionsFromArguments(Monophonic.getDefaults(), arguments));\n        const options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n        this.portamento = options.portamento;\n        this.onsilence = options.onsilence;\n    }\n    static getDefaults() {\n        return Object.assign(Instrument.getDefaults(), {\n            detune: 0,\n            onsilence: noOp,\n            portamento: 0,\n        });\n    }\n    /**\n     * Trigger the attack of the note optionally with a given velocity.\n     * @param  note The note to trigger.\n     * @param  time When the note should start.\n     * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger the note a half second from now at half velocity\n     * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n     */\n    triggerAttack(note, time, velocity = 1) {\n        this.log(\"triggerAttack\", note, time, velocity);\n        const seconds = this.toSeconds(time);\n        this._triggerEnvelopeAttack(seconds, velocity);\n        this.setNote(note, seconds);\n        return this;\n    }\n    /**\n     * Trigger the release portion of the envelope\n     * @param  time If no time is given, the release happens immediatly\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * synth.triggerAttack(\"C4\");\n     * // trigger the release a second from now\n     * synth.triggerRelease(\"+1\");\n     */\n    triggerRelease(time) {\n        this.log(\"triggerRelease\", time);\n        const seconds = this.toSeconds(time);\n        this._triggerEnvelopeRelease(seconds);\n        return this;\n    }\n    /**\n     * Set the note at the given time. If no time is given, the note\n     * will set immediately.\n     * @param note The note to change to.\n     * @param  time The time when the note should be set.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * synth.triggerAttack(\"C4\");\n     * // change to F#6 in one quarter note from now.\n     * synth.setNote(\"F#6\", \"+4n\");\n     */\n    setNote(note, time) {\n        const computedTime = this.toSeconds(time);\n        const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n        if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n            const portTime = this.toSeconds(this.portamento);\n            this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n        }\n        else {\n            this.frequency.setValueAtTime(computedFrequency, computedTime);\n        }\n        return this;\n    }\n}\n__decorate([\n    timeRange(0)\n], Monophonic.prototype, \"portamento\", void 0);\n//# sourceMappingURL=Monophonic.js.map"]},"metadata":{},"sourceType":"module"}