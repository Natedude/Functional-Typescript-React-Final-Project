{"ast":null,"code":"import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  const trace = [];\n  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext, trace)\n  /*\n   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n   * destination.\n   */\n  .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext, trace)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n    if (typeof audioBuffer.copyFromChannel !== 'function') {\n      wrapAudioBufferCopyChannelMethods(audioBuffer);\n      wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n    }\n\n    audioBufferStore.add(audioBuffer);\n    return audioBuffer;\n  });\n};","map":{"version":3,"sources":["../../../src/factories/start-rendering.ts"],"names":[],"mappings":"AAAA,SAAS,mCAAT,QAAoD,sDAApD;AAGA,OAAO,MAAM,oBAAoB,GAA2B,CACxD,gBADwD,EAExD,eAFwD,EAGxD,oBAHwD,EAIxD,8BAJwD,EAKxD,+BALwD,EAMxD,mDANwD,EAOxD,iCAPwD,EAQxD,4CARwD,KASxD;AACA,QAAM,KAAK,GAAG,EAAd;AAEA,SAAO,CAAC,WAAD,EAAc,yBAAd,KACH,oBAAoB,CAAC,WAAD,CAApB,CACK,MADL,CACY,WADZ,EACyB,yBADzB,EACoD,KADpD;AAEI;;;AAGG;AALP,GAMK,IANL,CAMU,MACF,OAAO,CAAC,GAAR,CACI,KAAK,CAAC,IAAN,CAAW,8BAA8B,CAAC,yBAAD,CAAzC,EAAsE,GAAtE,CAA2E,gBAAD,IACtE,oBAAoB,CAAC,gBAAD,CAApB,CAAuC,MAAvC,CAA8C,gBAA9C,EAAgE,yBAAhE,EAA2F,KAA3F,CADJ,CADJ,CAPR,EAaK,IAbL,CAaU,MAAM,+BAA+B,CAAC,yBAAD,CAb/C,EAcK,IAdL,CAcW,WAAD,IAAgB;AAClB;AACA;AACA,QAAI,OAAO,WAAW,CAAC,eAAnB,KAAuC,UAA3C,EAAuD;AACnD,MAAA,iCAAiC,CAAC,WAAD,CAAjC;AACA,MAAA,mCAAmC,CAAC,WAAD,CAAnC,CAFmD,CAGnD;AACH,KAJD,MAIO,IACH,CAAC,eAAe,CAAC,mDAAD,EAAsD,MAClE,mDAAmD,CAAC,WAAD,CADvC,CADb,EAIL;AACE,MAAA,4CAA4C,CAAC,WAAD,CAA5C;AACH;;AAED,IAAA,gBAAgB,CAAC,GAAjB,CAAqB,WAArB;AAEA,WAAO,WAAP;AACH,GAhCL,CADJ;AAkCH,CA9CM","sourceRoot":"","sourcesContent":["import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    const trace = [];\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext, trace)\n        /*\n         * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n         * destination.\n         */\n        .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode) => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext, trace))))\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=start-rendering.js.map"]},"metadata":{},"sourceType":"module"}