{"ast":null,"code":"/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n  const piFactor = 0.5 * Math.PI;\n  return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\n\nexport function dbToGain(db) {\n  return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\n\nexport function gainToDb(gain) {\n  return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\n\nexport function intervalToFrequencyRatio(interval) {\n  return Math.pow(2, interval / 12);\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\n\nlet A4 = 440;\nexport function getA4() {\n  return A4;\n}\nexport function setA4(freq) {\n  A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\n\nexport function ftom(frequency) {\n  return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\n\nexport function ftomf(frequency) {\n  return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\n\nexport function mtof(midi) {\n  return A4 * Math.pow(2, (midi - 69) / 12);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Conversions.ts"],"names":[],"mappings":"AAEA;;;AAGG;AACH,OAAM,SAAU,eAAV,CAA0B,OAA1B,EAA8C;AACnD,QAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAA5B;AACA,SAAO,IAAI,CAAC,GAAL,CAAS,OAAO,GAAG,QAAnB,CAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,QAAV,CAAmB,EAAnB,EAA+B;AACpC,SAAO,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,EAAE,GAAG,EAAlB,CAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAAmC;AACxC,SAAO,MAAM,IAAI,CAAC,GAAL,CAAS,IAAT,IAAiB,IAAI,CAAC,IAA5B,CAAP;AACA;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,wBAAV,CAAmC,QAAnC,EAAqD;AAC1D,SAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAa,QAAQ,GAAG,EAAxB,CAAP;AACA;AAED;;;AAGG;;AACH,IAAI,EAAE,GAAU,GAAhB;AAEA,OAAM,SAAU,KAAV,GAAe;AACpB,SAAO,EAAP;AACA;AAED,OAAM,SAAU,KAAV,CAAgB,IAAhB,EAA2B;AAChC,EAAA,EAAE,GAAG,IAAL;AACA;AAED;;;;;AAKG;;AACH,OAAM,SAAU,IAAV,CAAe,SAAf,EAA+B;AACpC,SAAO,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,SAAD,CAAhB,CAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,KAAV,CAAgB,SAAhB,EAAgC;AACrC,SAAO,KAAK,KAAK,IAAI,CAAC,IAAL,CAAU,SAAS,GAAG,EAAtB,CAAjB;AACA;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,IAAV,CAAe,IAAf,EAA6B;AAClC,SAAO,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAC,IAAI,GAAG,EAAR,IAAc,EAA1B,CAAZ;AACA","sourceRoot":"","sourcesContent":["/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n    const piFactor = 0.5 * Math.PI;\n    return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db) {\n    return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain) {\n    return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval) {\n    return Math.pow(2, (interval / 12));\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4 = 440;\nexport function getA4() {\n    return A4;\n}\nexport function setA4(freq) {\n    A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\nexport function ftom(frequency) {\n    return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency) {\n    return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\nexport function mtof(midi) {\n    return A4 * Math.pow(2, (midi - 69) / 12);\n}\n//# sourceMappingURL=Conversions.js.map"]},"metadata":{},"sourceType":"module"}