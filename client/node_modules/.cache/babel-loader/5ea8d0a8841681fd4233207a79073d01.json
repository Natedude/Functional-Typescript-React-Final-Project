{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\n\nexport class Split extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n    this.name = \"Split\";\n    const options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n    this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n    this._internalChannels = [this._splitter];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._splitter.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/channel/Split.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAoD,kCAApD;AACA,SAAS,oBAAT,QAAqC,0BAArC;AAMA;;;;;;;AAOG;;AACH,OAAM,MAAO,KAAP,SAAqB,aAArB,CAAgD;AAgBrD,EAAA,WAAA,GAAA;AACC,UAAM,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAA1B;AAhBQ,SAAA,IAAA,GAAe,OAAf;AAiBR,UAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAApC;AAEA,SAAK,SAAL,GAAiB,KAAK,KAAL,GAAa,KAAK,MAAL,GAAc,KAAK,OAAL,CAAa,qBAAb,CAAmC,OAAO,CAAC,QAA3C,CAA5C;AACA,SAAK,iBAAL,GAAyB,CAAC,KAAK,SAAN,CAAzB;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,QAAQ,EAAE;AADuC,KAA3C,CAAP;AAGA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,SAAL,CAAe,UAAf;;AACA,WAAO,IAAP;AACA;;AAlCoD","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n        this.name = \"Split\";\n        const options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n        this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n        this._internalChannels = [this._splitter];\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            channels: 2,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._splitter.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=Split.js.map"]},"metadata":{},"sourceType":"module"}