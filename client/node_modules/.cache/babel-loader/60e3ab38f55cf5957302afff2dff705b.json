{"ast":null,"code":"export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n  return class AudioDestinationNode extends audioNodeConstructor {\n    constructor(context, channelCount) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      this._isNodeOfNativeOfflineAudioContext = isOffline;\n      this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n    }\n\n    get channelCount() {\n      return this._nativeAudioDestinationNode.channelCount;\n    }\n\n    set channelCount(value) {\n      // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n      // Bug #54: Firefox does throw an IndexSizeError.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      } // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n\n\n      if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n        throw createIndexSizeError();\n      }\n\n      this._nativeAudioDestinationNode.channelCount = value;\n    }\n\n    get channelCountMode() {\n      return this._nativeAudioDestinationNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      // Bug #53: No browser does throw an exception yet.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      }\n\n      this._nativeAudioDestinationNode.channelCountMode = value;\n    }\n\n    get maxChannelCount() {\n      return this._nativeAudioDestinationNode.maxChannelCount;\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-destination-node-constructor.ts"],"names":[],"mappings":"AASA,OAAO,MAAM,qCAAqC,GAA4C,CAC1F,oBAD0F,EAE1F,kCAF0F,EAG1F,oBAH0F,EAI1F,uBAJ0F,EAK1F,gCAL0F,EAM1F,gBAN0F,EAO1F,2BAP0F,EAQ1F,uBAR0F,KAS1F;AACA,SAAO,MAAM,oBAAN,SAAuD,oBAAvD,CAA8E;AAKjF,IAAA,WAAA,CAAY,OAAZ,EAAwB,YAAxB,EAA4C;AACxC,YAAM,aAAa,GAAG,gBAAgB,CAAC,OAAD,CAAtC;AACA,YAAM,SAAS,GAAG,2BAA2B,CAAC,aAAD,CAA7C;AACA,YAAM,0BAA0B,GAAG,gCAAgC,CAAC,aAAD,EAAgB,YAAhB,EAA8B,SAA9B,CAAnE;AACA,YAAM,4BAA4B,GAC7B,SAAS,GAAG,kCAAkC,CAAC,uBAAD,CAArC,GAAiE,IAD/E;AAIA,YAAM,OAAN,EAAe,KAAf,EAAsB,0BAAtB,EAAkD,4BAAlD;AAEA,WAAK,kCAAL,GAA0C,SAA1C;AACA,WAAK,2BAAL,GAAmC,0BAAnC;AACH;;AAEe,QAAZ,YAAY,GAAA;AACZ,aAAO,KAAK,2BAAL,CAAiC,YAAxC;AACH;;AAEe,QAAZ,YAAY,CAAC,KAAD,EAAM;AAClB;AACA;AACA,UAAI,KAAK,kCAAT,EAA6C;AACzC,cAAM,uBAAuB,EAA7B;AACH,OALiB,CAOlB;;;AACA,UAAI,KAAK,GAAG,KAAK,2BAAL,CAAiC,eAA7C,EAA8D;AAC1D,cAAM,oBAAoB,EAA1B;AACH;;AAED,WAAK,2BAAL,CAAiC,YAAjC,GAAgD,KAAhD;AACH;;AAEmB,QAAhB,gBAAgB,GAAA;AAChB,aAAO,KAAK,2BAAL,CAAiC,gBAAxC;AACH;;AAEmB,QAAhB,gBAAgB,CAAC,KAAD,EAAM;AACtB;AACA,UAAI,KAAK,kCAAT,EAA6C;AACzC,cAAM,uBAAuB,EAA7B;AACH;;AAED,WAAK,2BAAL,CAAiC,gBAAjC,GAAoD,KAApD;AACH;;AAEkB,QAAf,eAAe,GAAA;AACf,aAAO,KAAK,2BAAL,CAAiC,eAAxC;AACH;;AArDgF,GAArF;AAuDH,CAjEM","sourceRoot":"","sourcesContent":["export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null));\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=audio-destination-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}