{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\n\nexport class Chebyshev extends Effect {\n  constructor() {\n    super(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n    this.name = \"Chebyshev\";\n    const options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n    this._shaper = new WaveShaper({\n      context: this.context,\n      length: 4096\n    });\n    this._order = options.order;\n    this.connectEffect(this._shaper);\n    this.order = options.order;\n    this.oversample = options.oversample;\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      order: 1,\n      oversample: \"none\"\n    });\n  }\n  /**\n   * get the coefficient for that degree\n   * @param  x the x value\n   * @param  degree\n   * @param  memo memoize the computed value. this speeds up computation greatly.\n   */\n\n\n  _getCoefficient(x, degree, memo) {\n    if (memo.has(degree)) {\n      return memo.get(degree);\n    } else if (degree === 0) {\n      memo.set(degree, 0);\n    } else if (degree === 1) {\n      memo.set(degree, x);\n    } else {\n      memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n    }\n\n    return memo.get(degree);\n  }\n  /**\n   * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n   * signal through a Tone.WaveShaper. The equations are in the form:\n   * ```\n   * order 2: 2x^2 + 1\n   * order 3: 4x^3 + 3x\n   * ```\n   * @min 1\n   * @max 100\n   */\n\n\n  get order() {\n    return this._order;\n  }\n\n  set order(order) {\n    this._order = order;\n\n    this._shaper.setMap(x => {\n      return this._getCoefficient(x, order, new Map());\n    });\n  }\n  /**\n   * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n   */\n\n\n  get oversample() {\n    return this._shaper.oversample;\n  }\n\n  set oversample(oversampling) {\n    this._shaper.oversample = oversampling;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._shaper.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/Chebyshev.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAsC,UAAtC;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,UAAT,QAA2B,sBAA3B;AAOA;;;;;;;;;;;;;AAaG;;AACH,OAAM,MAAO,SAAP,SAAyB,MAAzB,CAAiD;AAmBtD,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,SAAS,CAAC,WAAV,EAAD,EAA0B,SAA1B,EAAqC,CAAC,OAAD,CAArC,CAA1B;AAnBQ,SAAA,IAAA,GAAe,WAAf;AAoBR,UAAM,OAAO,GAAG,oBAAoB,CAAC,SAAS,CAAC,WAAV,EAAD,EAA0B,SAA1B,EAAqC,CAAC,OAAD,CAArC,CAApC;AAEA,SAAK,OAAL,GAAe,IAAI,UAAJ,CAAe;AAC7B,MAAA,OAAO,EAAE,KAAK,OADe;AAE7B,MAAA,MAAM,EAAE;AAFqB,KAAf,CAAf;AAIA,SAAK,MAAL,GAAc,OAAO,CAAC,KAAtB;AAEA,SAAK,aAAL,CAAmB,KAAK,OAAxB;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,KAArB;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,KAAK,EAAE,CADmC;AAE1C,MAAA,UAAU,EAAE;AAF8B,KAApC,CAAP;AAIA;AAED;;;;;AAKG;;;AACK,EAAA,eAAe,CAAC,CAAD,EAAY,MAAZ,EAA4B,IAA5B,EAAqD;AAC3E,QAAI,IAAI,CAAC,GAAL,CAAS,MAAT,CAAJ,EAAsB;AACrB,aAAO,IAAI,CAAC,GAAL,CAAS,MAAT,CAAP;AACA,KAFD,MAEO,IAAI,MAAM,KAAK,CAAf,EAAkB;AACxB,MAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,CAAjB;AACA,KAFM,MAEA,IAAI,MAAM,KAAK,CAAf,EAAkB;AACxB,MAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,CAAjB;AACA,KAFM,MAEA;AACN,MAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,IAAI,CAAJ,GAAQ,KAAK,eAAL,CAAqB,CAArB,EAAwB,MAAM,GAAG,CAAjC,EAAoC,IAApC,CAAR,GAAoD,KAAK,eAAL,CAAqB,CAArB,EAAwB,MAAM,GAAG,CAAjC,EAAoC,IAApC,CAArE;AACA;;AACD,WAAO,IAAI,CAAC,GAAL,CAAS,MAAT,CAAP;AACA;AAED;;;;;;;;;AASG;;;AACM,MAAL,KAAK,GAAA;AACR,WAAO,KAAK,MAAZ;AACA;;AACQ,MAAL,KAAK,CAAC,KAAD,EAAM;AACd,SAAK,MAAL,GAAc,KAAd;;AACA,SAAK,OAAL,CAAa,MAAb,CAAqB,CAAC,IAAG;AACxB,aAAO,KAAK,eAAL,CAAqB,CAArB,EAAwB,KAAxB,EAA+B,IAAI,GAAJ,EAA/B,CAAP;AACA,KAFD;AAGA;AAED;;AAEG;;;AACW,MAAV,UAAU,GAAA;AACb,WAAO,KAAK,OAAL,CAAa,UAApB;AACA;;AACa,MAAV,UAAU,CAAC,YAAD,EAAa;AAC1B,SAAK,OAAL,CAAa,UAAb,GAA0B,YAA1B;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,WAAO,IAAP;AACA;;AA/FqD","sourceRoot":"","sourcesContent":["import { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport class Chebyshev extends Effect {\n    constructor() {\n        super(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n        this.name = \"Chebyshev\";\n        const options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n        this._shaper = new WaveShaper({\n            context: this.context,\n            length: 4096\n        });\n        this._order = options.order;\n        this.connectEffect(this._shaper);\n        this.order = options.order;\n        this.oversample = options.oversample;\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            order: 1,\n            oversample: \"none\"\n        });\n    }\n    /**\n     * get the coefficient for that degree\n     * @param  x the x value\n     * @param  degree\n     * @param  memo memoize the computed value. this speeds up computation greatly.\n     */\n    _getCoefficient(x, degree, memo) {\n        if (memo.has(degree)) {\n            return memo.get(degree);\n        }\n        else if (degree === 0) {\n            memo.set(degree, 0);\n        }\n        else if (degree === 1) {\n            memo.set(degree, x);\n        }\n        else {\n            memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n        }\n        return memo.get(degree);\n    }\n    /**\n     * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n     * signal through a Tone.WaveShaper. The equations are in the form:\n     * ```\n     * order 2: 2x^2 + 1\n     * order 3: 4x^3 + 3x\n     * ```\n     * @min 1\n     * @max 100\n     */\n    get order() {\n        return this._order;\n    }\n    set order(order) {\n        this._order = order;\n        this._shaper.setMap((x => {\n            return this._getCoefficient(x, order, new Map());\n        }));\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get oversample() {\n        return this._shaper.oversample;\n    }\n    set oversample(oversampling) {\n        this._shaper.oversample = oversampling;\n    }\n    dispose() {\n        super.dispose();\n        this._shaper.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Chebyshev.js.map"]},"metadata":{},"sourceType":"module"}