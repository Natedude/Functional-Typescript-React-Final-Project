{"ast":null,"code":"import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor, wrapChannelMergerNode) => {\n  return (nativeContext, options) => {\n    const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);\n    /*\n     * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n     * the webkitAudioContext is used as a workaround here.\n     */\n\n    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n      wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n    }\n\n    assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n    return nativeChannelMergerNode;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-channel-merger-node-factory.ts"],"names":[],"mappings":"AAAA,SAAS,4BAAT,QAA6C,6CAA7C;AAGA,OAAO,MAAM,oCAAoC,GAA2C,CACxF,6BADwF,EAExF,qBAFwF,KAGxF;AACA,SAAO,CAAC,aAAD,EAAgB,OAAhB,KAA2B;AAC9B,UAAM,uBAAuB,GAAG,aAAa,CAAC,mBAAd,CAAkC,OAAO,CAAC,cAA1C,CAAhC;AAEA;;;;AAIG;;AACH,QAAI,6BAA6B,KAAK,IAAlC,IAA0C,6BAA6B,CAAC,IAA9B,KAAuC,oBAArF,EAA2G;AACvG,MAAA,qBAAqB,CAAC,aAAD,EAAgB,uBAAhB,CAArB;AACH;;AAED,IAAA,4BAA4B,CAAC,uBAAD,EAA0B,OAA1B,CAA5B;AAEA,WAAO,uBAAP;AACH,GAfD;AAgBH,CApBM","sourceRoot":"","sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);\n        /*\n         * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=native-channel-merger-node-factory.js.map"]},"metadata":{},"sourceType":"module"}