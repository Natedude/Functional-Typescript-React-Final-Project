{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nexport class Tremolo extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    this.name = \"Tremolo\";\n    const options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    this._lfoL = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._amplitudeL = new Gain({\n      context: this.context\n    });\n    this._amplitudeR = new Gain({\n      context: this.context\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    this.depth = new Signal({\n      context: this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.connectEffectLeft(this._amplitudeL);\n    this.connectEffectRight(this._amplitudeR);\n\n    this._lfoL.connect(this._amplitudeL.gain);\n\n    this._lfoR.connect(this._amplitudeR.gain);\n\n    this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n    this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n    this.spread = options.spread;\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 10,\n      type: \"sine\",\n      depth: 0.5,\n      spread: 180\n    });\n  }\n  /**\n   * Start the tremolo.\n   */\n\n\n  start(time) {\n    this._lfoL.start(time);\n\n    this._lfoR.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the tremolo.\n   */\n\n\n  stop(time) {\n    this._lfoL.stop(time);\n\n    this._lfoR.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the effect to the transport.\n   */\n\n\n  sync() {\n    this._lfoL.sync();\n\n    this._lfoR.sync();\n\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport\n   */\n\n\n  unsync() {\n    this._lfoL.unsync();\n\n    this._lfoR.unsync();\n\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * The oscillator type.\n   */\n\n\n  get type() {\n    return this._lfoL.type;\n  }\n\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n\n\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase; // 180\n  }\n\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._amplitudeL.dispose();\n\n    this._amplitudeR.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/Tremolo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\nexport class Tremolo extends StereoEffect {\n    constructor() {\n        super(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n        this.name = \"Tremolo\";\n        const options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n        this._lfoL = new LFO({\n            context: this.context,\n            type: options.type,\n            min: 1,\n            max: 0,\n        });\n        this._lfoR = new LFO({\n            context: this.context,\n            type: options.type,\n            min: 1,\n            max: 0,\n        });\n        this._amplitudeL = new Gain({ context: this.context });\n        this._amplitudeR = new Gain({ context: this.context });\n        this.frequency = new Signal({\n            context: this.context,\n            value: options.frequency,\n            units: \"frequency\",\n        });\n        this.depth = new Signal({\n            context: this.context,\n            value: options.depth,\n            units: \"normalRange\",\n        });\n        readOnly(this, [\"frequency\", \"depth\"]);\n        this.connectEffectLeft(this._amplitudeL);\n        this.connectEffectRight(this._amplitudeR);\n        this._lfoL.connect(this._amplitudeL.gain);\n        this._lfoR.connect(this._amplitudeR.gain);\n        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n        this.spread = options.spread;\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            frequency: 10,\n            type: \"sine\",\n            depth: 0.5,\n            spread: 180,\n        });\n    }\n    /**\n     * Start the tremolo.\n     */\n    start(time) {\n        this._lfoL.start(time);\n        this._lfoR.start(time);\n        return this;\n    }\n    /**\n     * Stop the tremolo.\n     */\n    stop(time) {\n        this._lfoL.stop(time);\n        this._lfoR.stop(time);\n        return this;\n    }\n    /**\n     * Sync the effect to the transport.\n     */\n    sync() {\n        this._lfoL.sync();\n        this._lfoR.sync();\n        this.context.transport.syncSignal(this.frequency);\n        return this;\n    }\n    /**\n     * Unsync the filter from the transport\n     */\n    unsync() {\n        this._lfoL.unsync();\n        this._lfoR.unsync();\n        this.context.transport.unsyncSignal(this.frequency);\n        return this;\n    }\n    /**\n     * The oscillator type.\n     */\n    get type() {\n        return this._lfoL.type;\n    }\n    set type(type) {\n        this._lfoL.type = type;\n        this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n    get spread() {\n        return this._lfoR.phase - this._lfoL.phase; // 180\n    }\n    set spread(spread) {\n        this._lfoL.phase = 90 - (spread / 2);\n        this._lfoR.phase = (spread / 2) + 90;\n    }\n    dispose() {\n        super.dispose();\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._amplitudeL.dispose();\n        this._amplitudeR.dispose();\n        this.frequency.dispose();\n        this.depth.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Tremolo.js.map"]},"metadata":{},"sourceType":"module"}