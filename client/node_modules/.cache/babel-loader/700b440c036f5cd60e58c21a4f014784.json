{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport class DummyContext extends BaseContext {\n  constructor() {\n    super(...arguments);\n    this.lookAhead = 0;\n    this.latencyHint = 0;\n    this.isOffline = false;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAnalyser() {\n    return {};\n  }\n\n  createOscillator() {\n    return {};\n  }\n\n  createBufferSource() {\n    return {};\n  }\n\n  createBiquadFilter() {\n    return {};\n  }\n\n  createBuffer(_numberOfChannels, _length, _sampleRate) {\n    return {};\n  }\n\n  createChannelMerger(_numberOfInputs) {\n    return {};\n  }\n\n  createChannelSplitter(_numberOfOutputs) {\n    return {};\n  }\n\n  createConstantSource() {\n    return {};\n  }\n\n  createConvolver() {\n    return {};\n  }\n\n  createDelay(_maxDelayTime) {\n    return {};\n  }\n\n  createDynamicsCompressor() {\n    return {};\n  }\n\n  createGain() {\n    return {};\n  }\n\n  createIIRFilter(_feedForward, _feedback) {\n    return {};\n  }\n\n  createPanner() {\n    return {};\n  }\n\n  createPeriodicWave(_real, _imag, _constraints) {\n    return {};\n  }\n\n  createStereoPanner() {\n    return {};\n  }\n\n  createWaveShaper() {\n    return {};\n  }\n\n  createMediaStreamSource(_stream) {\n    return {};\n  }\n\n  createMediaElementSource(_element) {\n    return {};\n  }\n\n  createMediaStreamDestination() {\n    return {};\n  }\n\n  decodeAudioData(_audioData) {\n    return Promise.resolve({});\n  } //---------------------------\n  // TONE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAudioWorkletNode(_name, _options) {\n    return {};\n  }\n\n  get rawContext() {\n    return {};\n  }\n\n  addAudioWorkletModule(_url, _name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve();\n    });\n  }\n\n  resume() {\n    return Promise.resolve();\n  }\n\n  setTimeout(_fn, _timeout) {\n    return 0;\n  }\n\n  clearTimeout(_id) {\n    return this;\n  }\n\n  setInterval(_fn, _interval) {\n    return 0;\n  }\n\n  clearInterval(_id) {\n    return this;\n  }\n\n  getConstant(_val) {\n    return {};\n  }\n\n  get currentTime() {\n    return 0;\n  }\n\n  get state() {\n    return {};\n  }\n\n  get sampleRate() {\n    return 0;\n  }\n\n  get listener() {\n    return {};\n  }\n\n  get transport() {\n    return {};\n  }\n\n  get draw() {\n    return {};\n  }\n\n  set draw(_d) {}\n\n  get destination() {\n    return {};\n  }\n\n  set destination(_d) {}\n\n  now() {\n    return 0;\n  }\n\n  immediate() {\n    return 0;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/core/context/DummyContext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport class DummyContext extends BaseContext {\n    constructor() {\n        super(...arguments);\n        this.lookAhead = 0;\n        this.latencyHint = 0;\n        this.isOffline = false;\n    }\n    //---------------------------\n    // BASE AUDIO CONTEXT METHODS\n    //---------------------------\n    createAnalyser() {\n        return {};\n    }\n    createOscillator() {\n        return {};\n    }\n    createBufferSource() {\n        return {};\n    }\n    createBiquadFilter() {\n        return {};\n    }\n    createBuffer(_numberOfChannels, _length, _sampleRate) {\n        return {};\n    }\n    createChannelMerger(_numberOfInputs) {\n        return {};\n    }\n    createChannelSplitter(_numberOfOutputs) {\n        return {};\n    }\n    createConstantSource() {\n        return {};\n    }\n    createConvolver() {\n        return {};\n    }\n    createDelay(_maxDelayTime) {\n        return {};\n    }\n    createDynamicsCompressor() {\n        return {};\n    }\n    createGain() {\n        return {};\n    }\n    createIIRFilter(_feedForward, _feedback) {\n        return {};\n    }\n    createPanner() {\n        return {};\n    }\n    createPeriodicWave(_real, _imag, _constraints) {\n        return {};\n    }\n    createStereoPanner() {\n        return {};\n    }\n    createWaveShaper() {\n        return {};\n    }\n    createMediaStreamSource(_stream) {\n        return {};\n    }\n    createMediaElementSource(_element) {\n        return {};\n    }\n    createMediaStreamDestination() {\n        return {};\n    }\n    decodeAudioData(_audioData) {\n        return Promise.resolve({});\n    }\n    //---------------------------\n    // TONE AUDIO CONTEXT METHODS\n    //---------------------------\n    createAudioWorkletNode(_name, _options) {\n        return {};\n    }\n    get rawContext() {\n        return {};\n    }\n    addAudioWorkletModule(_url, _name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve();\n        });\n    }\n    resume() {\n        return Promise.resolve();\n    }\n    setTimeout(_fn, _timeout) {\n        return 0;\n    }\n    clearTimeout(_id) {\n        return this;\n    }\n    setInterval(_fn, _interval) {\n        return 0;\n    }\n    clearInterval(_id) {\n        return this;\n    }\n    getConstant(_val) {\n        return {};\n    }\n    get currentTime() {\n        return 0;\n    }\n    get state() {\n        return {};\n    }\n    get sampleRate() {\n        return 0;\n    }\n    get listener() {\n        return {};\n    }\n    get transport() {\n        return {};\n    }\n    get draw() {\n        return {};\n    }\n    set draw(_d) { }\n    get destination() {\n        return {};\n    }\n    set destination(_d) { }\n    now() {\n        return 0;\n    }\n    immediate() {\n        return 0;\n    }\n}\n//# sourceMappingURL=DummyContext.js.map"]},"metadata":{},"sourceType":"module"}