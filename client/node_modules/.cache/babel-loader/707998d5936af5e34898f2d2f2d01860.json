{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n\n    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeStereoPannerNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeStereoPannerNode.channelCount,\n          channelCountMode: nativeStereoPannerNode.channelCountMode,\n          channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n          pan: nativeStereoPannerNode.pan.value\n        };\n        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n      }\n\n      if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n      }\n\n      return nativeStereoPannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/stereo-panner-node-renderer-factory.ts"],"names":[],"mappings":"AAAA,SAAS,sBAAT,QAAuC,mCAAvC;AACA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAM,qCAAqC,GAA4C,CAC1F,iBAD0F,EAE1F,4BAF0F,EAG1F,kBAH0F,EAI1F,gBAJ0F,EAK1F,uBAL0F,KAM1F;AACA,SAAO,MAAmE;AACtE,UAAM,+BAA+B,GAAG,IAAI,OAAJ,EAAxC;;AAEA,UAAM,sBAAsB,GAAG,OAC3B,KAD2B,EAE3B,yBAF2B,EAG3B,KAH2B,KAI3B;AACA,UAAI,sBAAsB,GAAG,kBAAkB,CAA6B,KAA7B,CAA/C;AAEA;;;AAGG;;AACH,YAAM,sCAAsC,GAAG,gBAAgB,CAAC,sBAAD,EAAyB,yBAAzB,CAA/D;;AAEA,UAAI,CAAC,sCAAL,EAA6C;AACzC,cAAM,OAAO,GAAG;AACZ,UAAA,YAAY,EAAE,sBAAsB,CAAC,YADzB;AAEZ,UAAA,gBAAgB,EAAE,sBAAsB,CAAC,gBAF7B;AAGZ,UAAA,qBAAqB,EAAE,sBAAsB,CAAC,qBAHlC;AAIZ,UAAA,GAAG,EAAE,sBAAsB,CAAC,GAAvB,CAA2B;AAJpB,SAAhB;AAOA,QAAA,sBAAsB,GAAG,4BAA4B,CAAC,yBAAD,EAA4B,OAA5B,CAArD;AACH;;AAED,MAAA,+BAA+B,CAAC,GAAhC,CAAoC,yBAApC,EAA+D,sBAA/D;;AAEA,UAAI,CAAC,sCAAL,EAA6C;AACzC,cAAM,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,GAAlC,EAAuC,sBAAsB,CAAC,GAA9D,EAAmE,KAAnE,CAAtB;AACH,OAFD,MAEO;AACH,cAAM,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,GAAlC,EAAuC,sBAAsB,CAAC,GAA9D,EAAmE,KAAnE,CAAvB;AACH;;AAED,UAAI,sBAAsB,CAAC,sBAAD,CAA1B,EAAoD;AAChD,cAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,sBAAsB,CAAC,MAAvB,CAA8B,CAA9B,CAAnC,EAAqE,KAArE,CAA7B;AACH,OAFD,MAEO;AACH,cAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,sBAAnC,EAA2D,KAA3D,CAA7B;AACH;;AAED,aAAO,sBAAP;AACH,KAvCD;;AAyCA,WAAO;AACH,MAAA,MAAM,CACF,KADE,EAEF,yBAFE,EAGF,KAHE,EAG6B;AAE/B,cAAM,8BAA8B,GAAG,+BAA+B,CAAC,GAAhC,CAAoC,yBAApC,CAAvC;;AAEA,YAAI,8BAA8B,KAAK,SAAvC,EAAkD;AAC9C,iBAAO,OAAO,CAAC,OAAR,CAAgB,8BAAhB,CAAP;AACH;;AAED,eAAO,sBAAsB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAA7B;AACH;;AAbE,KAAP;AAeH,GA3DD;AA4DH,CAnEM","sourceRoot":"","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=stereo-panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}