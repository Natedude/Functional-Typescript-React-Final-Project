{"ast":null,"code":"export const createAudioParamRenderer = automationEventList => {\n  return {\n    replay(audioParam) {\n      for (const automationEvent of automationEventList) {\n        if (automationEvent.type === 'exponentialRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.exponentialRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'linearRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.linearRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'setTarget') {\n          const {\n            startTime,\n            target,\n            timeConstant\n          } = automationEvent;\n          audioParam.setTargetAtTime(target, startTime, timeConstant);\n        } else if (automationEvent.type === 'setValue') {\n          const {\n            startTime,\n            value\n          } = automationEvent;\n          audioParam.setValueAtTime(value, startTime);\n        } else if (automationEvent.type === 'setValueCurve') {\n          const {\n            duration,\n            startTime,\n            values\n          } = automationEvent;\n          audioParam.setValueCurveAtTime(values, startTime, duration);\n        } else {\n          throw new Error(\"Can't apply an unknown automation.\");\n        }\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-param-renderer.ts"],"names":[],"mappings":"AAEA,OAAO,MAAM,wBAAwB,GAAgC,mBAAD,IAAwB;AACxF,SAAO;AACH,IAAA,MAAM,CAAC,UAAD,EAA8B;AAChC,WAAK,MAAM,eAAX,IAA8B,mBAA9B,EAAmD;AAC/C,YAAI,eAAe,CAAC,IAAhB,KAAyB,wBAA7B,EAAuD;AACnD,gBAAM;AAAE,YAAA,OAAF;AAAW,YAAA;AAAX,cAAqB,eAA3B;AAEA,UAAA,UAAU,CAAC,4BAAX,CAAwC,KAAxC,EAA+C,OAA/C;AACH,SAJD,MAIO,IAAI,eAAe,CAAC,IAAhB,KAAyB,mBAA7B,EAAkD;AACrD,gBAAM;AAAE,YAAA,OAAF;AAAW,YAAA;AAAX,cAAqB,eAA3B;AAEA,UAAA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,OAA1C;AACH,SAJM,MAIA,IAAI,eAAe,CAAC,IAAhB,KAAyB,WAA7B,EAA0C;AAC7C,gBAAM;AAAE,YAAA,SAAF;AAAa,YAAA,MAAb;AAAqB,YAAA;AAArB,cAAsC,eAA5C;AAEA,UAAA,UAAU,CAAC,eAAX,CAA2B,MAA3B,EAAmC,SAAnC,EAA8C,YAA9C;AACH,SAJM,MAIA,IAAI,eAAe,CAAC,IAAhB,KAAyB,UAA7B,EAAyC;AAC5C,gBAAM;AAAE,YAAA,SAAF;AAAa,YAAA;AAAb,cAAuB,eAA7B;AAEA,UAAA,UAAU,CAAC,cAAX,CAA0B,KAA1B,EAAiC,SAAjC;AACH,SAJM,MAIA,IAAI,eAAe,CAAC,IAAhB,KAAyB,eAA7B,EAA8C;AACjD,gBAAM;AAAE,YAAA,QAAF;AAAY,YAAA,SAAZ;AAAuB,YAAA;AAAvB,cAAkC,eAAxC;AAEA,UAAA,UAAU,CAAC,mBAAX,CAA+B,MAA/B,EAAuC,SAAvC,EAAkD,QAAlD;AACH,SAJM,MAIA;AACH,gBAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH;AACJ;AACJ;;AA3BE,GAAP;AA6BH,CA9BM","sourceRoot":"","sourcesContent":["export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=audio-param-renderer.js.map"]},"metadata":{},"sourceType":"module"}