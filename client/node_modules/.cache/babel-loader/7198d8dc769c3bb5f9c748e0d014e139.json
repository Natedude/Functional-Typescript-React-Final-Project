{"ast":null,"code":"import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\n\nexport class Add extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n    this.override = false;\n    this.name = \"Add\";\n    /**\n     * the summing node\n     */\n\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * The value which is added to the input signal\n     */\n\n    this.addend = this._param;\n    connectSeries(this._constantSource, this._sum);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._sum.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/signal/Add.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAA8B,+BAA9B;AACA,SAAS,IAAT,QAAqB,sBAArB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,MAAT,QAAsC,UAAtC;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,MAAO,GAAP,SAAmB,MAAnB,CAAyB;AAuB9B,EAAA,WAAA,GAAA;AACC,UAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,GAAG,CAAC,WAAJ,EAAD,EAAoB,SAApB,EAA+B,CAAC,OAAD,CAA/B,CAAlC,CAAN;AAtBD,SAAA,QAAA,GAAW,KAAX;AAES,SAAA,IAAA,GAAe,KAAf;AAET;;AAEG;;AACK,SAAA,IAAA,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAb;AACC,SAAA,KAAA,GAAQ,KAAK,IAAb;AACA,SAAA,MAAA,GAAS,KAAK,IAAd;AAET;;AAEG;;AACM,SAAA,MAAA,GAA0B,KAAK,MAA/B;AAUR,IAAA,aAAa,CAAC,KAAK,eAAN,EAAuB,KAAK,IAA5B,CAAb;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,KAAK,EAAE;AADmC,KAApC,CAAP;AAGA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,WAAO,IAAP;AACA;;AAvC6B","sourceRoot":"","sourcesContent":["import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Add extends Signal {\n    constructor() {\n        super(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n        this.override = false;\n        this.name = \"Add\";\n        /**\n         * the summing node\n         */\n        this._sum = new Gain({ context: this.context });\n        this.input = this._sum;\n        this.output = this._sum;\n        /**\n         * The value which is added to the input signal\n         */\n        this.addend = this._param;\n        connectSeries(this._constantSource, this._sum);\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._sum.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Add.js.map"]},"metadata":{},"sourceType":"module"}