{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\n\nexport class Limiter extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n    this.name = \"Limiter\";\n    const options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    this._compressor = this.input = this.output = new Compressor({\n      context: this.context,\n      ratio: 20,\n      attack: 0.003,\n      release: 0.01,\n      threshold: options.threshold\n    });\n    this.threshold = this._compressor.threshold;\n    readOnly(this, \"threshold\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      threshold: -12\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal.\n   */\n\n\n  get reduction() {\n    return this._compressor.reduction;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._compressor.dispose();\n\n    this.threshold.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Limiter.ts"],"names":[],"mappings":"AAAA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,UAAT,QAA2B,cAA3B;AAEA,SAAS,QAAT,QAAyB,2BAAzB;AAIC;AAED;;;;;;;;;;AAUG;;AACH,OAAM,MAAO,OAAP,SAAuB,aAAvB,CAAoD;AAmBzD,EAAA,WAAA,GAAA;AACC,UAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAAlC,CAAN;AAlBQ,SAAA,IAAA,GAAe,SAAf;AAmBR,UAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAApC;AAEA,SAAK,WAAL,GAAmB,KAAK,KAAL,GAAa,KAAK,MAAL,GAAc,IAAI,UAAJ,CAAe;AAC5D,MAAA,OAAO,EAAE,KAAK,OAD8C;AAE5D,MAAA,KAAK,EAAE,EAFqD;AAG5D,MAAA,MAAM,EAAE,KAHoD;AAI5D,MAAA,OAAO,EAAE,IAJmD;AAK5D,MAAA,SAAS,EAAE,OAAO,CAAC;AALyC,KAAf,CAA9C;AAQA,SAAK,SAAL,GAAiB,KAAK,WAAL,CAAiB,SAAlC;AACA,IAAA,QAAQ,CAAC,IAAD,EAAO,WAAP,CAAR;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE,CAAC;AADqC,KAA3C,CAAP;AAGA;AAED;;;AAGG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,KAAK,WAAL,CAAiB,SAAxB;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,SAAK,SAAL,CAAe,OAAf;AACA,WAAO,IAAP;AACA;;AAtDwD","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\nexport class Limiter extends ToneAudioNode {\n    constructor() {\n        super(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n        this.name = \"Limiter\";\n        const options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n        this._compressor = this.input = this.output = new Compressor({\n            context: this.context,\n            ratio: 20,\n            attack: 0.003,\n            release: 0.01,\n            threshold: options.threshold\n        });\n        this.threshold = this._compressor.threshold;\n        readOnly(this, \"threshold\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            threshold: -12\n        });\n    }\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal.\n     */\n    get reduction() {\n        return this._compressor.reduction;\n    }\n    dispose() {\n        super.dispose();\n        this._compressor.dispose();\n        this.threshold.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Limiter.js.map"]},"metadata":{},"sourceType":"module"}