{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\n\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\n\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\n\nexport class Freeverb extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n    this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n\n    this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n\n    this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n\n    this._allpassFiltersR = [];\n    const options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    }); // make the allpass filters on the right\n\n    this._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n      const allpassL = this.context.createBiquadFilter();\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    }); // make the allpass filters on the left\n\n    this._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n      const allpassR = this.context.createBiquadFilter();\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    }); // make the comb filters\n\n    this._combFilters = combFilterTunings.map((delayTime, index) => {\n      const lfpf = new LowpassCombFilter({\n        context: this.context,\n        dampening: options.dampening,\n        delayTime\n      });\n\n      if (index < combFilterTunings.length / 2) {\n        this.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n      } else {\n        this.connectEffectRight(lfpf, ...this._allpassFiltersR);\n      }\n\n      this.roomSize.connect(lfpf.resonance);\n      return lfpf;\n    });\n    readOnly(this, [\"roomSize\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.7,\n      dampening: 3000\n    });\n  }\n  /**\n   * The amount of dampening of the reverberant signal.\n   */\n\n\n  get dampening() {\n    return this._combFilters[0].dampening;\n  }\n\n  set dampening(d) {\n    this._combFilters.forEach(c => c.dampening = d);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._allpassFiltersL.forEach(al => al.disconnect());\n\n    this._allpassFiltersR.forEach(ar => ar.disconnect());\n\n    this._combFilters.forEach(cf => cf.dispose());\n\n    this.roomSize.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/Freeverb.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect {\n    constructor() {\n        super(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n        this.name = \"Freeverb\";\n        /**\n         * the comb filters\n         */\n        this._combFilters = [];\n        /**\n         * the allpass filters on the left\n         */\n        this._allpassFiltersL = [];\n        /**\n         * the allpass filters on the right\n         */\n        this._allpassFiltersR = [];\n        const options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n        this.roomSize = new Signal({\n            context: this.context,\n            value: options.roomSize,\n            units: \"normalRange\",\n        });\n        // make the allpass filters on the right\n        this._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n            const allpassL = this.context.createBiquadFilter();\n            allpassL.type = \"allpass\";\n            allpassL.frequency.value = freq;\n            return allpassL;\n        });\n        // make the allpass filters on the left\n        this._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n            const allpassR = this.context.createBiquadFilter();\n            allpassR.type = \"allpass\";\n            allpassR.frequency.value = freq;\n            return allpassR;\n        });\n        // make the comb filters\n        this._combFilters = combFilterTunings.map((delayTime, index) => {\n            const lfpf = new LowpassCombFilter({\n                context: this.context,\n                dampening: options.dampening,\n                delayTime,\n            });\n            if (index < combFilterTunings.length / 2) {\n                this.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n            }\n            else {\n                this.connectEffectRight(lfpf, ...this._allpassFiltersR);\n            }\n            this.roomSize.connect(lfpf.resonance);\n            return lfpf;\n        });\n        readOnly(this, [\"roomSize\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            roomSize: 0.7,\n            dampening: 3000\n        });\n    }\n    /**\n     * The amount of dampening of the reverberant signal.\n     */\n    get dampening() {\n        return this._combFilters[0].dampening;\n    }\n    set dampening(d) {\n        this._combFilters.forEach(c => c.dampening = d);\n    }\n    dispose() {\n        super.dispose();\n        this._allpassFiltersL.forEach(al => al.disconnect());\n        this._allpassFiltersR.forEach(ar => ar.disconnect());\n        this._combFilters.forEach(cf => cf.dispose());\n        this.roomSize.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Freeverb.js.map"]},"metadata":{},"sourceType":"module"}