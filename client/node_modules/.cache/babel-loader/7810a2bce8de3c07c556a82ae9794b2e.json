{"ast":null,"code":"import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\n\nfunction divide(a, b) {\n  const denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient, z) {\n  let result = [0, 0];\n\n  for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n\n  return result;\n}\n\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n  return (nativeContext, baseLatency, {\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    feedback,\n    feedforward\n  }) => {\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (feedbackLength === 0 || feedbackLength > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (convertedFeedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedforwardLength === 0 || feedforwardLength > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (convertedFeedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (convertedFeedback[0] !== 1) {\n      for (let i = 0; i < feedforwardLength; i += 1) {\n        convertedFeedforward[i] /= convertedFeedback[0];\n      }\n\n      for (let i = 1; i < feedbackLength; i += 1) {\n        convertedFeedback[i] /= convertedFeedback[0];\n      }\n    }\n\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    const bufferLength = 32;\n    const bufferIndexes = [];\n    const xBuffers = [];\n    const yBuffers = [];\n\n    for (let i = 0; i < channelCount; i += 1) {\n      bufferIndexes.push(0);\n      const xBuffer = new Float32Array(bufferLength);\n      const yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    } // tslint:disable-next-line:deprecation\n\n\n    scriptProcessorNode.onaudioprocess = event => {\n      const inputBuffer = event.inputBuffer;\n      const outputBuffer = event.outputBuffer;\n      const numberOfChannels = inputBuffer.numberOfChannels;\n\n      for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = inputBuffer.getChannelData(i);\n        const output = outputBuffer.getChannelData(i);\n        bufferIndexes[i] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n      }\n    };\n\n    const nyquist = nativeContext.sampleRate / 2;\n    const nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n\n      addEventListener(...args) {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n\n      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n\n        const length = frequencyHz.length;\n\n        for (let i = 0; i < length; i += 1) {\n          const omega = -Math.PI * (frequencyHz[i] / nyquist);\n          const z = [Math.cos(omega), Math.sin(omega)];\n          const numerator = evaluatePolynomial(convertedFeedforward, z);\n          const denominator = evaluatePolynomial(convertedFeedback, z);\n          const response = divide(numerator, denominator);\n          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[i] = Math.atan2(response[1], response[0]);\n        }\n      },\n\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-iir-filter-node-faker-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = b[0] * b[0] + b[1] * b[1];\n    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\nfunction multiply(a, b) {\n    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n        const feedbackLength = convertedFeedback.length;\n        const feedforwardLength = convertedFeedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedbackLength === 0 || feedbackLength > 20) {\n            throw createNotSupportedError();\n        }\n        if (convertedFeedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforwardLength === 0 || feedforwardLength > 20) {\n            throw createNotSupportedError();\n        }\n        if (convertedFeedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (convertedFeedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                convertedFeedforward[i] /= convertedFeedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                convertedFeedback[i] /= convertedFeedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(convertedFeedforward, z);\n                    const denominator = evaluatePolynomial(convertedFeedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=native-iir-filter-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}