{"ast":null,"code":"import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\n\nexport class ModulationSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n    this.name = \"ModulationSynth\";\n    const options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    this._carrier = new Synth({\n      context: this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: () => this.onsilence(this),\n      volume: -10\n    });\n    this._modulator = new Synth({\n      context: this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    this.oscillator = this._carrier.oscillator;\n    this.envelope = this._carrier.envelope;\n    this.modulation = this._modulator.oscillator;\n    this.modulationEnvelope = this._modulator.envelope;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this.detune = new Signal({\n      context: this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    readOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      harmonicity: 3,\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"sine\"\n      }),\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.01,\n        decay: 0.01,\n        sustain: 1,\n        release: 0.5\n      }),\n      modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"square\"\n      }),\n      modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.5,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.5\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeRelease(time);\n\n    return this;\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._modulationNode.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/instrument/ModulationSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\nexport class ModulationSynth extends Monophonic {\n    constructor() {\n        super(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n        this.name = \"ModulationSynth\";\n        const options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n        this._carrier = new Synth({\n            context: this.context,\n            oscillator: options.oscillator,\n            envelope: options.envelope,\n            onsilence: () => this.onsilence(this),\n            volume: -10,\n        });\n        this._modulator = new Synth({\n            context: this.context,\n            oscillator: options.modulation,\n            envelope: options.modulationEnvelope,\n            volume: -10,\n        });\n        this.oscillator = this._carrier.oscillator;\n        this.envelope = this._carrier.envelope;\n        this.modulation = this._modulator.oscillator;\n        this.modulationEnvelope = this._modulator.envelope;\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n        });\n        this.detune = new Signal({\n            context: this.context,\n            value: options.detune,\n            units: \"cents\"\n        });\n        this.harmonicity = new Multiply({\n            context: this.context,\n            value: options.harmonicity,\n            minValue: 0,\n        });\n        this._modulationNode = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        readOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Monophonic.getDefaults(), {\n            harmonicity: 3,\n            oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [\n                ...Object.keys(Source.getDefaults()),\n                \"frequency\",\n                \"detune\"\n            ]), {\n                type: \"sine\"\n            }),\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.01,\n                decay: 0.01,\n                sustain: 1,\n                release: 0.5\n            }),\n            modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [\n                ...Object.keys(Source.getDefaults()),\n                \"frequency\",\n                \"detune\"\n            ]), {\n                type: \"square\"\n            }),\n            modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.5,\n                decay: 0.0,\n                sustain: 1,\n                release: 0.5\n            })\n        });\n    }\n    /**\n     * Trigger the attack portion of the note\n     */\n    _triggerEnvelopeAttack(time, velocity) {\n        // @ts-ignore\n        this._carrier._triggerEnvelopeAttack(time, velocity);\n        // @ts-ignore\n        this._modulator._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n    _triggerEnvelopeRelease(time) {\n        // @ts-ignore\n        this._carrier._triggerEnvelopeRelease(time);\n        // @ts-ignore\n        this._modulator._triggerEnvelopeRelease(time);\n        return this;\n    }\n    getLevelAtTime(time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    }\n    dispose() {\n        super.dispose();\n        this._carrier.dispose();\n        this._modulator.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this.harmonicity.dispose();\n        this._modulationNode.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ModulationSynth.js.map"]},"metadata":{},"sourceType":"module"}