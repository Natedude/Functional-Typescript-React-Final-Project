{"ast":null,"code":"import \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\n\nexport class ToneEvent extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n    this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n\n    this._startOffset = 0;\n    const options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    this._loop = options.loop;\n    this.callback = options.callback;\n    this.value = options.value;\n    this._loopStart = this.toTicks(options.loopStart);\n    this._loopEnd = this.toTicks(options.loopEnd);\n    this._playbackRate = options.playbackRate;\n    this._probability = options.probability;\n    this._humanize = options.humanize;\n    this.mute = options.mute;\n    this._playbackRate = options.playbackRate;\n    this._state.increasing = true; // schedule the events for the first time\n\n    this._rescheduleEvents();\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      humanize: false,\n      loop: false,\n      loopEnd: \"1m\",\n      loopStart: 0,\n      mute: false,\n      playbackRate: 1,\n      probability: 1,\n      value: null\n    });\n  }\n  /**\n   * Reschedule all of the events along the timeline\n   * with the updated values.\n   * @param after Only reschedules events after the given time.\n   */\n\n\n  _rescheduleEvents(after = -1) {\n    // if no argument is given, schedules all of the events\n    this._state.forEachFrom(after, event => {\n      let duration;\n\n      if (event.state === \"started\") {\n        if (event.id !== -1) {\n          this.context.transport.clear(event.id);\n        }\n\n        const startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\n        if (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n          duration = Infinity;\n\n          if (isNumber(this._loop)) {\n            duration = this._loop * this._getLoopDuration();\n          }\n\n          const nextEvent = this._state.getAfter(startTick);\n\n          if (nextEvent !== null) {\n            duration = Math.min(duration, nextEvent.time - startTick);\n          }\n\n          if (duration !== Infinity) {\n            // schedule a stop since it's finite duration\n            this._state.setStateAtTime(\"stopped\", startTick + duration + 1, {\n              id: -1\n            });\n\n            duration = new TicksClass(this.context, duration);\n          }\n\n          const interval = new TicksClass(this.context, this._getLoopDuration());\n          event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n        } else {\n          event.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n        }\n      }\n    });\n  }\n  /**\n   * Returns the playback state of the note, either \"started\" or \"stopped\".\n   */\n\n\n  get state() {\n    return this._state.getValueAtTime(this.context.transport.ticks);\n  }\n  /**\n   * The start from the scheduled start time.\n   */\n\n\n  get startOffset() {\n    return this._startOffset;\n  }\n\n  set startOffset(offset) {\n    this._startOffset = offset;\n  }\n  /**\n   * The probability of the notes being triggered.\n   */\n\n\n  get probability() {\n    return this._probability;\n  }\n\n  set probability(prob) {\n    this._probability = prob;\n  }\n  /**\n   * If set to true, will apply small random variation\n   * to the callback time. If the value is given as a time, it will randomize\n   * by that amount.\n   * @example\n   * const event = new Tone.ToneEvent();\n   * event.humanize = true;\n   */\n\n\n  get humanize() {\n    return this._humanize;\n  }\n\n  set humanize(variation) {\n    this._humanize = variation;\n  }\n  /**\n   * Start the note at the given time.\n   * @param  time  When the event should start.\n   */\n\n\n  start(time) {\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"stopped\") {\n      this._state.add({\n        id: -1,\n        state: \"started\",\n        time: ticks\n      });\n\n      this._rescheduleEvents(ticks);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the Event at the given time.\n   * @param  time  When the event should stop.\n   */\n\n\n  stop(time) {\n    this.cancel(time);\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", ticks, {\n        id: -1\n      });\n\n      const previousEvent = this._state.getBefore(ticks);\n\n      let reschedulTime = ticks;\n\n      if (previousEvent !== null) {\n        reschedulTime = previousEvent.time;\n      }\n\n      this._rescheduleEvents(reschedulTime);\n    }\n\n    return this;\n  }\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n\n\n  cancel(time) {\n    time = defaultArg(time, -Infinity);\n    const ticks = this.toTicks(time);\n\n    this._state.forEachFrom(ticks, event => {\n      this.context.transport.clear(event.id);\n    });\n\n    this._state.cancel(ticks);\n\n    return this;\n  }\n  /**\n   * The callback function invoker. Also\n   * checks if the Event is done playing\n   * @param  time  The time of the event in seconds\n   */\n\n\n  _tick(time) {\n    const ticks = this.context.transport.getTicksAtTime(time);\n\n    if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n      if (this.probability < 1 && Math.random() > this.probability) {\n        return;\n      }\n\n      if (this.humanize) {\n        let variation = 0.02;\n\n        if (!isBoolean(this.humanize)) {\n          variation = this.toSeconds(this.humanize);\n        }\n\n        time += (Math.random() * 2 - 1) * variation;\n      }\n\n      this.callback(time, this.value);\n    }\n  }\n  /**\n   * Get the duration of the loop.\n   */\n\n\n  _getLoopDuration() {\n    return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n  }\n  /**\n   * If the note should loop or not\n   * between ToneEvent.loopStart and\n   * ToneEvent.loopEnd. If set to true,\n   * the event will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    this._loop = loop;\n\n    this._rescheduleEvents();\n  }\n  /**\n   * The playback rate of the note. Defaults to 1.\n   * @example\n   * const note = new Tone.ToneEvent();\n   * note.loop = true;\n   * // repeat the note twice as fast\n   * note.playbackRate = 2;\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n\n    this._rescheduleEvents();\n  }\n  /**\n   * The loopEnd point is the time the event will loop\n   * if ToneEvent.loop is true.\n   */\n\n\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The time when the loop should start.\n   */\n\n\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The current progress of the loop interval.\n   * Returns 0 if the event is not started yet or\n   * it is not set to loop.\n   */\n\n\n  get progress() {\n    if (this._loop) {\n      const ticks = this.context.transport.ticks;\n\n      const lastEvent = this._state.get(ticks);\n\n      if (lastEvent !== null && lastEvent.state === \"started\") {\n        const loopDuration = this._getLoopDuration();\n\n        const progress = (ticks - lastEvent.time) % loopDuration;\n        return progress / loopDuration;\n      } else {\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    this.cancel();\n\n    this._state.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/event/ToneEvent.ts"],"names":[],"mappings":"AAAA,OAAO,yBAAP;AACA,SAAS,eAAT,QAAwD,iCAAxD;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAGA,SAAS,UAAT,EAAqB,oBAArB,QAAiD,uBAAjD;AACA,SAAS,IAAT,QAAqB,wBAArB;AACA,SAA6B,aAA7B,QAAkD,4BAAlD;AACA,SAAS,SAAT,EAAoB,QAApB,QAAoC,wBAApC;AAgBA;;;;;;;;;;;;;;;;;AAiBG;;AACH,OAAM,MAAO,SAAP,SAA0C,eAA1C,CAAsF;AAqE3F,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,SAAS,CAAC,WAAV,EAAD,EAA0B,SAA1B,EAAqC,CAAC,UAAD,EAAa,OAAb,CAArC,CAA1B;AArEQ,SAAA,IAAA,GAAe,WAAf;AA4BT;;AAEG;;AACO,SAAA,MAAA,GAEL,IAAI,aAAJ,CAAkB,SAAlB,CAFK;AAUV;;AAEG;;AACO,SAAA,YAAA,GAAsB,CAAtB;AA0BT,UAAM,OAAO,GAAG,oBAAoB,CAAC,SAAS,CAAC,WAAV,EAAD,EAA0B,SAA1B,EAAqC,CAAC,UAAD,EAAa,OAAb,CAArC,CAApC;AAEA,SAAK,KAAL,GAAa,OAAO,CAAC,IAArB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,KAArB;AACA,SAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,OAAO,CAAC,SAArB,CAAlB;AACA,SAAK,QAAL,GAAgB,KAAK,OAAL,CAAa,OAAO,CAAC,OAArB,CAAhB;AACA,SAAK,aAAL,GAAqB,OAAO,CAAC,YAA7B;AACA,SAAK,YAAL,GAAoB,OAAO,CAAC,WAA5B;AACA,SAAK,SAAL,GAAiB,OAAO,CAAC,QAAzB;AACA,SAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,SAAK,aAAL,GAAqB,OAAO,CAAC,YAA7B;AACA,SAAK,MAAL,CAAY,UAAZ,GAAyB,IAAzB,CAfD,CAgBC;;AACA,SAAK,iBAAL;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,eAAe,CAAC,WAAhB,EAAd,EAA6C;AACnD,MAAA,QAAQ,EAAE,IADyC;AAEnD,MAAA,QAAQ,EAAE,KAFyC;AAGnD,MAAA,IAAI,EAAE,KAH6C;AAInD,MAAA,OAAO,EAAE,IAJ0C;AAKnD,MAAA,SAAS,EAAE,CALwC;AAMnD,MAAA,IAAI,EAAE,KAN6C;AAOnD,MAAA,YAAY,EAAE,CAPqC;AAQnD,MAAA,WAAW,EAAE,CARsC;AASnD,MAAA,KAAK,EAAE;AAT4C,KAA7C,CAAP;AAWA;AAED;;;;AAIG;;;AACK,EAAA,iBAAiB,CAAC,KAAA,GAAe,CAAC,CAAjB,EAAkB;AAC1C;AACA,SAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,EAA+B,KAAK,IAAG;AACtC,UAAI,QAAJ;;AACA,UAAI,KAAK,CAAC,KAAN,KAAgB,SAApB,EAA+B;AAC9B,YAAI,KAAK,CAAC,EAAN,KAAa,CAAC,CAAlB,EAAqB;AACpB,eAAK,OAAL,CAAa,SAAb,CAAuB,KAAvB,CAA6B,KAAK,CAAC,EAAnC;AACA;;AACD,cAAM,SAAS,GAAG,KAAK,CAAC,IAAN,GAAa,IAAI,CAAC,KAAL,CAAW,KAAK,WAAL,GAAmB,KAAK,aAAnC,CAA/B;;AACA,YAAI,KAAK,KAAL,KAAe,IAAf,IAAuB,QAAQ,CAAC,KAAK,KAAN,CAAR,IAAwB,KAAK,KAAL,GAAa,CAAhE,EAAmE;AAClE,UAAA,QAAQ,GAAG,QAAX;;AACA,cAAI,QAAQ,CAAC,KAAK,KAAN,CAAZ,EAA0B;AACzB,YAAA,QAAQ,GAAI,KAAK,KAAN,GAAe,KAAK,gBAAL,EAA1B;AACA;;AACD,gBAAM,SAAS,GAAG,KAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,CAAlB;;AACA,cAAI,SAAS,KAAK,IAAlB,EAAwB;AACvB,YAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,SAAS,CAAC,IAAV,GAAiB,SAApC,CAAX;AACA;;AACD,cAAI,QAAQ,KAAK,QAAjB,EAA2B;AAC1B;AACA,iBAAK,MAAL,CAAY,cAAZ,CAA2B,SAA3B,EAAsC,SAAS,GAAG,QAAZ,GAAuB,CAA7D,EAAgE;AAAE,cAAA,EAAE,EAAE,CAAC;AAAP,aAAhE;;AACA,YAAA,QAAQ,GAAG,IAAI,UAAJ,CAAe,KAAK,OAApB,EAA6B,QAA7B,CAAX;AACA;;AACD,gBAAM,QAAQ,GAAG,IAAI,UAAJ,CAAe,KAAK,OAApB,EAA6B,KAAK,gBAAL,EAA7B,CAAjB;AACA,UAAA,KAAK,CAAC,EAAN,GAAW,KAAK,OAAL,CAAa,SAAb,CAAuB,cAAvB,CACV,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CADU,EACa,QADb,EACuB,IAAI,UAAJ,CAAe,KAAK,OAApB,EAA6B,SAA7B,CADvB,EACgE,QADhE,CAAX;AAEA,SAjBD,MAiBO;AACN,UAAA,KAAK,CAAC,EAAN,GAAW,KAAK,OAAL,CAAa,SAAb,CAAuB,QAAvB,CAAgC,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAAhC,EAAuD,IAAI,UAAJ,CAAe,KAAK,OAApB,EAA6B,SAA7B,CAAvD,CAAX;AACA;AACD;AACD,KA5BD;AA6BA;AAED;;AAEG;;;AACM,MAAL,KAAK,GAAA;AACR,WAAO,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAAK,OAAL,CAAa,SAAb,CAAuB,KAAlD,CAAP;AACA;AAED;;AAEG;;;AACY,MAAX,WAAW,GAAA;AACd,WAAO,KAAK,YAAZ;AACA;;AACc,MAAX,WAAW,CAAC,MAAD,EAAO;AACrB,SAAK,YAAL,GAAoB,MAApB;AACA;AAED;;AAEG;;;AACY,MAAX,WAAW,GAAA;AACd,WAAO,KAAK,YAAZ;AACA;;AACc,MAAX,WAAW,CAAC,IAAD,EAAK;AACnB,SAAK,YAAL,GAAoB,IAApB;AACA;AAED;;;;;;;AAOG;;;AACS,MAAR,QAAQ,GAAA;AACX,WAAO,KAAK,SAAZ;AACA;;AAEW,MAAR,QAAQ,CAAC,SAAD,EAAU;AACrB,SAAK,SAAL,GAAiB,SAAjB;AACA;AAED;;;AAGG;;;AACH,EAAA,KAAK,CAAC,IAAD,EAA0C;AAC9C,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,IAAb,CAAd;;AACA,QAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,MAAsC,SAA1C,EAAqD;AACpD,WAAK,MAAL,CAAY,GAAZ,CAAgB;AACf,QAAA,EAAE,EAAE,CAAC,CADU;AAEf,QAAA,KAAK,EAAE,SAFQ;AAGf,QAAA,IAAI,EAAE;AAHS,OAAhB;;AAKA,WAAK,iBAAL,CAAuB,KAAvB;AACA;;AACD,WAAO,IAAP;AACA;AAED;;;AAGG;;;AACH,EAAA,IAAI,CAAC,IAAD,EAA0C;AAC7C,SAAK,MAAL,CAAY,IAAZ;AACA,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,IAAb,CAAd;;AACA,QAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,MAAsC,SAA1C,EAAqD;AACpD,WAAK,MAAL,CAAY,cAAZ,CAA2B,SAA3B,EAAsC,KAAtC,EAA6C;AAAE,QAAA,EAAE,EAAE,CAAC;AAAP,OAA7C;;AACA,YAAM,aAAa,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAsB,KAAtB,CAAtB;;AACA,UAAI,aAAa,GAAG,KAApB;;AACA,UAAI,aAAa,KAAK,IAAtB,EAA4B;AAC3B,QAAA,aAAa,GAAG,aAAa,CAAC,IAA9B;AACA;;AACD,WAAK,iBAAL,CAAuB,aAAvB;AACA;;AACD,WAAO,IAAP;AACA;AAED;;;AAGG;;;AACH,EAAA,MAAM,CAAC,IAAD,EAA0C;AAC/C,IAAA,IAAI,GAAG,UAAU,CAAC,IAAD,EAAO,CAAC,QAAR,CAAjB;AACA,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,IAAb,CAAd;;AACA,SAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,EAA+B,KAAK,IAAG;AACtC,WAAK,OAAL,CAAa,SAAb,CAAuB,KAAvB,CAA6B,KAAK,CAAC,EAAnC;AACA,KAFD;;AAGA,SAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB;;AACA,WAAO,IAAP;AACA;AAED;;;;AAIG;;;AACO,EAAA,KAAK,CAAC,IAAD,EAAc;AAC5B,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,SAAb,CAAuB,cAAvB,CAAsC,IAAtC,CAAd;;AACA,QAAI,CAAC,KAAK,IAAN,IAAc,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,MAAsC,SAAxD,EAAmE;AAClE,UAAI,KAAK,WAAL,GAAmB,CAAnB,IAAwB,IAAI,CAAC,MAAL,KAAgB,KAAK,WAAjD,EAA8D;AAC7D;AACA;;AACD,UAAI,KAAK,QAAT,EAAmB;AAClB,YAAI,SAAS,GAAG,IAAhB;;AACA,YAAI,CAAC,SAAS,CAAC,KAAK,QAAN,CAAd,EAA+B;AAC9B,UAAA,SAAS,GAAG,KAAK,SAAL,CAAe,KAAK,QAApB,CAAZ;AACA;;AACD,QAAA,IAAI,IAAI,CAAC,IAAI,CAAC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0B,SAAlC;AACA;;AACD,WAAK,QAAL,CAAc,IAAd,EAAoB,KAAK,KAAzB;AACA;AACD;AAED;;AAEG;;;AACO,EAAA,gBAAgB,GAAA;AACzB,WAAO,IAAI,CAAC,KAAL,CAAW,CAAC,KAAK,QAAL,GAAgB,KAAK,UAAtB,IAAoC,KAAK,aAApD,CAAP;AACA;AAED;;;;;;;;;AASG;;;AACK,MAAJ,IAAI,GAAA;AACP,WAAO,KAAK,KAAZ;AACA;;AACO,MAAJ,IAAI,CAAC,IAAD,EAAK;AACZ,SAAK,KAAL,GAAa,IAAb;;AACA,SAAK,iBAAL;AACA;AAED;;;;;;;AAOG;;;AACa,MAAZ,YAAY,GAAA;AACf,WAAO,KAAK,aAAZ;AACA;;AACe,MAAZ,YAAY,CAAC,IAAD,EAAK;AACpB,SAAK,aAAL,GAAqB,IAArB;;AACA,SAAK,iBAAL;AACA;AAED;;;AAGG;;;AACQ,MAAP,OAAO,GAAA;AACV,WAAO,IAAI,UAAJ,CAAe,KAAK,OAApB,EAA6B,KAAK,QAAlC,EAA4C,SAA5C,EAAP;AACA;;AACU,MAAP,OAAO,CAAC,OAAD,EAAQ;AAClB,SAAK,QAAL,GAAgB,KAAK,OAAL,CAAa,OAAb,CAAhB;;AACA,QAAI,KAAK,KAAT,EAAgB;AACf,WAAK,iBAAL;AACA;AACD;AAED;;AAEG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,IAAI,UAAJ,CAAe,KAAK,OAApB,EAA6B,KAAK,UAAlC,EAA8C,SAA9C,EAAP;AACA;;AACY,MAAT,SAAS,CAAC,SAAD,EAAU;AACtB,SAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,SAAb,CAAlB;;AACA,QAAI,KAAK,KAAT,EAAgB;AACf,WAAK,iBAAL;AACA;AACD;AAED;;;;AAIG;;;AACS,MAAR,QAAQ,GAAA;AACX,QAAI,KAAK,KAAT,EAAgB;AACf,YAAM,KAAK,GAAG,KAAK,OAAL,CAAa,SAAb,CAAuB,KAArC;;AACA,YAAM,SAAS,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,CAAlB;;AACA,UAAI,SAAS,KAAK,IAAd,IAAsB,SAAS,CAAC,KAAV,KAAoB,SAA9C,EAAyD;AACxD,cAAM,YAAY,GAAG,KAAK,gBAAL,EAArB;;AACA,cAAM,QAAQ,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,IAAnB,IAA2B,YAA5C;AACA,eAAO,QAAQ,GAAG,YAAlB;AACA,OAJD,MAIO;AACN,eAAO,CAAP;AACA;AACD,KAVD,MAUO;AACN,aAAO,CAAP;AACA;AACD;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,MAAL;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA;;AA9V0F","sourceRoot":"","sourcesContent":["import \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent extends ToneWithContext {\n    constructor() {\n        super(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n        this.name = \"ToneEvent\";\n        /**\n         * Tracks the scheduled events\n         */\n        this._state = new StateTimeline(\"stopped\");\n        /**\n         * A delay time from when the event is scheduled to start\n         */\n        this._startOffset = 0;\n        const options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n        this._loop = options.loop;\n        this.callback = options.callback;\n        this.value = options.value;\n        this._loopStart = this.toTicks(options.loopStart);\n        this._loopEnd = this.toTicks(options.loopEnd);\n        this._playbackRate = options.playbackRate;\n        this._probability = options.probability;\n        this._humanize = options.humanize;\n        this.mute = options.mute;\n        this._playbackRate = options.playbackRate;\n        this._state.increasing = true;\n        // schedule the events for the first time\n        this._rescheduleEvents();\n    }\n    static getDefaults() {\n        return Object.assign(ToneWithContext.getDefaults(), {\n            callback: noOp,\n            humanize: false,\n            loop: false,\n            loopEnd: \"1m\",\n            loopStart: 0,\n            mute: false,\n            playbackRate: 1,\n            probability: 1,\n            value: null,\n        });\n    }\n    /**\n     * Reschedule all of the events along the timeline\n     * with the updated values.\n     * @param after Only reschedules events after the given time.\n     */\n    _rescheduleEvents(after = -1) {\n        // if no argument is given, schedules all of the events\n        this._state.forEachFrom(after, event => {\n            let duration;\n            if (event.state === \"started\") {\n                if (event.id !== -1) {\n                    this.context.transport.clear(event.id);\n                }\n                const startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n                if (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n                    duration = Infinity;\n                    if (isNumber(this._loop)) {\n                        duration = (this._loop) * this._getLoopDuration();\n                    }\n                    const nextEvent = this._state.getAfter(startTick);\n                    if (nextEvent !== null) {\n                        duration = Math.min(duration, nextEvent.time - startTick);\n                    }\n                    if (duration !== Infinity) {\n                        // schedule a stop since it's finite duration\n                        this._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n                        duration = new TicksClass(this.context, duration);\n                    }\n                    const interval = new TicksClass(this.context, this._getLoopDuration());\n                    event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n                }\n                else {\n                    event.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n                }\n            }\n        });\n    }\n    /**\n     * Returns the playback state of the note, either \"started\" or \"stopped\".\n     */\n    get state() {\n        return this._state.getValueAtTime(this.context.transport.ticks);\n    }\n    /**\n     * The start from the scheduled start time.\n     */\n    get startOffset() {\n        return this._startOffset;\n    }\n    set startOffset(offset) {\n        this._startOffset = offset;\n    }\n    /**\n     * The probability of the notes being triggered.\n     */\n    get probability() {\n        return this._probability;\n    }\n    set probability(prob) {\n        this._probability = prob;\n    }\n    /**\n     * If set to true, will apply small random variation\n     * to the callback time. If the value is given as a time, it will randomize\n     * by that amount.\n     * @example\n     * const event = new Tone.ToneEvent();\n     * event.humanize = true;\n     */\n    get humanize() {\n        return this._humanize;\n    }\n    set humanize(variation) {\n        this._humanize = variation;\n    }\n    /**\n     * Start the note at the given time.\n     * @param  time  When the event should start.\n     */\n    start(time) {\n        const ticks = this.toTicks(time);\n        if (this._state.getValueAtTime(ticks) === \"stopped\") {\n            this._state.add({\n                id: -1,\n                state: \"started\",\n                time: ticks,\n            });\n            this._rescheduleEvents(ticks);\n        }\n        return this;\n    }\n    /**\n     * Stop the Event at the given time.\n     * @param  time  When the event should stop.\n     */\n    stop(time) {\n        this.cancel(time);\n        const ticks = this.toTicks(time);\n        if (this._state.getValueAtTime(ticks) === \"started\") {\n            this._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n            const previousEvent = this._state.getBefore(ticks);\n            let reschedulTime = ticks;\n            if (previousEvent !== null) {\n                reschedulTime = previousEvent.time;\n            }\n            this._rescheduleEvents(reschedulTime);\n        }\n        return this;\n    }\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n    cancel(time) {\n        time = defaultArg(time, -Infinity);\n        const ticks = this.toTicks(time);\n        this._state.forEachFrom(ticks, event => {\n            this.context.transport.clear(event.id);\n        });\n        this._state.cancel(ticks);\n        return this;\n    }\n    /**\n     * The callback function invoker. Also\n     * checks if the Event is done playing\n     * @param  time  The time of the event in seconds\n     */\n    _tick(time) {\n        const ticks = this.context.transport.getTicksAtTime(time);\n        if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n            if (this.probability < 1 && Math.random() > this.probability) {\n                return;\n            }\n            if (this.humanize) {\n                let variation = 0.02;\n                if (!isBoolean(this.humanize)) {\n                    variation = this.toSeconds(this.humanize);\n                }\n                time += (Math.random() * 2 - 1) * variation;\n            }\n            this.callback(time, this.value);\n        }\n    }\n    /**\n     * Get the duration of the loop.\n     */\n    _getLoopDuration() {\n        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n    }\n    /**\n     * If the note should loop or not\n     * between ToneEvent.loopStart and\n     * ToneEvent.loopEnd. If set to true,\n     * the event will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     */\n    get loop() {\n        return this._loop;\n    }\n    set loop(loop) {\n        this._loop = loop;\n        this._rescheduleEvents();\n    }\n    /**\n     * The playback rate of the note. Defaults to 1.\n     * @example\n     * const note = new Tone.ToneEvent();\n     * note.loop = true;\n     * // repeat the note twice as fast\n     * note.playbackRate = 2;\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        this._playbackRate = rate;\n        this._rescheduleEvents();\n    }\n    /**\n     * The loopEnd point is the time the event will loop\n     * if ToneEvent.loop is true.\n     */\n    get loopEnd() {\n        return new TicksClass(this.context, this._loopEnd).toSeconds();\n    }\n    set loopEnd(loopEnd) {\n        this._loopEnd = this.toTicks(loopEnd);\n        if (this._loop) {\n            this._rescheduleEvents();\n        }\n    }\n    /**\n     * The time when the loop should start.\n     */\n    get loopStart() {\n        return new TicksClass(this.context, this._loopStart).toSeconds();\n    }\n    set loopStart(loopStart) {\n        this._loopStart = this.toTicks(loopStart);\n        if (this._loop) {\n            this._rescheduleEvents();\n        }\n    }\n    /**\n     * The current progress of the loop interval.\n     * Returns 0 if the event is not started yet or\n     * it is not set to loop.\n     */\n    get progress() {\n        if (this._loop) {\n            const ticks = this.context.transport.ticks;\n            const lastEvent = this._state.get(ticks);\n            if (lastEvent !== null && lastEvent.state === \"started\") {\n                const loopDuration = this._getLoopDuration();\n                const progress = (ticks - lastEvent.time) % loopDuration;\n                return progress / loopDuration;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    dispose() {\n        super.dispose();\n        this.cancel();\n        this._state.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneEvent.js.map"]},"metadata":{},"sourceType":"module"}