{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeAudioBufferSourceNode.buffer,\n          channelCount: nativeAudioBufferSourceNode.channelCount,\n          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          loop: nativeAudioBufferSourceNode.loop,\n          loopEnd: nativeAudioBufferSourceNode.loopEnd,\n          loopStart: nativeAudioBufferSourceNode.loopStart,\n          playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n        };\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeAudioBufferSourceNode.start(...start);\n        }\n\n        if (stop !== null) {\n          nativeAudioBufferSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      } else {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n      return nativeAudioBufferSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-buffer-source-node-renderer-factory.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAM,0CAA0C,GAAiD,CACpG,iBADoG,EAEpG,iCAFoG,EAGpG,kBAHoG,EAIpG,gBAJoG,EAKpG,uBALoG,KAMpG;AACA,SAAO,MAAmE;AACtE,UAAM,oCAAoC,GAAG,IAAI,OAAJ,EAA7C;AAEA,QAAI,KAAK,GAAuD,IAAhE;AACA,QAAI,IAAI,GAAkB,IAA1B;;AAEA,UAAM,2BAA2B,GAAG,OAChC,KADgC,EAEhC,yBAFgC,EAGhC,KAHgC,KAIhC;AACA,UAAI,2BAA2B,GAAG,kBAAkB,CAAkC,KAAlC,CAApD;AAEA;;;AAGG;;AACH,YAAM,2CAA2C,GAAG,gBAAgB,CAAC,2BAAD,EAA8B,yBAA9B,CAApE;;AAEA,UAAI,CAAC,2CAAL,EAAkD;AAC9C,cAAM,OAAO,GAAG;AACZ,UAAA,MAAM,EAAE,2BAA2B,CAAC,MADxB;AAEZ,UAAA,YAAY,EAAE,2BAA2B,CAAC,YAF9B;AAGZ,UAAA,gBAAgB,EAAE,2BAA2B,CAAC,gBAHlC;AAIZ,UAAA,qBAAqB,EAAE,2BAA2B,CAAC,qBAJvC;AAKZ;AACA,UAAA,IAAI,EAAE,2BAA2B,CAAC,IANtB;AAOZ,UAAA,OAAO,EAAE,2BAA2B,CAAC,OAPzB;AAQZ,UAAA,SAAS,EAAE,2BAA2B,CAAC,SAR3B;AASZ,UAAA,YAAY,EAAE,2BAA2B,CAAC,YAA5B,CAAyC;AAT3C,SAAhB;AAYA,QAAA,2BAA2B,GAAG,iCAAiC,CAAC,yBAAD,EAA4B,OAA5B,CAA/D;;AAEA,YAAI,KAAK,KAAK,IAAd,EAAoB;AAChB,UAAA,2BAA2B,CAAC,KAA5B,CAAkC,GAAG,KAArC;AACH;;AAED,YAAI,IAAI,KAAK,IAAb,EAAmB;AACf,UAAA,2BAA2B,CAAC,IAA5B,CAAiC,IAAjC;AACH;AACJ;;AAED,MAAA,oCAAoC,CAAC,GAArC,CAAyC,yBAAzC,EAAoE,2BAApE;;AAEA,UAAI,CAAC,2CAAL,EAAkD;AAC9C;AACA,cAAM,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,YAAlC,EAAgD,2BAA2B,CAAC,YAA5E,EAA0F,KAA1F,CAAtB;AACH,OAHD,MAGO;AACH;AACA,cAAM,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,YAAlC,EAAgD,2BAA2B,CAAC,YAA5E,EAA0F,KAA1F,CAAvB;AACH;;AAED,YAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,2BAAnC,EAAgE,KAAhE,CAA7B;AAEA,aAAO,2BAAP;AACH,KAlDD;;AAoDA,WAAO;AACH,UAAI,KAAJ,CAAU,KAAV,EAA4D;AACxD,QAAA,KAAK,GAAG,KAAR;AACH,OAHE;;AAIH,UAAI,IAAJ,CAAS,KAAT,EAAsB;AAClB,QAAA,IAAI,GAAG,KAAP;AACH,OANE;;AAOH,MAAA,MAAM,CACF,KADE,EAEF,yBAFE,EAGF,KAHE,EAG6B;AAE/B,cAAM,mCAAmC,GAAG,oCAAoC,CAAC,GAArC,CAAyC,yBAAzC,CAA5C;;AAEA,YAAI,mCAAmC,KAAK,SAA5C,EAAuD;AACnD,iBAAO,OAAO,CAAC,OAAR,CAAgB,mCAAhB,CAAP;AACH;;AAED,eAAO,2BAA2B,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAAlC;AACH;;AAnBE,KAAP;AAqBH,GA/ED;AAgFH,CAvFM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=audio-buffer-source-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}