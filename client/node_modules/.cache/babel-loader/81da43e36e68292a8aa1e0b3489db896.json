{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n      return nativeDynamicsCompressorNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/dynamics-compressor-node-renderer-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}