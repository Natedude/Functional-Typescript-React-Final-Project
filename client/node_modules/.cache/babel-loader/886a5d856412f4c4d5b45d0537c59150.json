{"ast":null,"code":"import { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\n\nexport class StereoWidener extends MidSideEffect {\n  constructor() {\n    super(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n    this.name = \"StereoWidener\";\n    const options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"width\"]);\n    this._twoTimesWidthMid = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._twoTimesWidthSide = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._midMult = new Multiply({\n      context: this.context\n    });\n\n    this._twoTimesWidthMid.connect(this._midMult.factor);\n\n    this.connectEffectMid(this._midMult);\n    this._oneMinusWidth = new Subtract({\n      context: this.context\n    });\n\n    this._oneMinusWidth.connect(this._twoTimesWidthMid);\n\n    connect(this.context.getConstant(1), this._oneMinusWidth);\n    this.width.connect(this._oneMinusWidth.subtrahend);\n    this._sideMult = new Multiply({\n      context: this.context\n    });\n    this.width.connect(this._twoTimesWidthSide);\n\n    this._twoTimesWidthSide.connect(this._sideMult.factor);\n\n    this.connectEffectSide(this._sideMult);\n  }\n\n  static getDefaults() {\n    return Object.assign(MidSideEffect.getDefaults(), {\n      width: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.width.dispose();\n\n    this._midMult.dispose();\n\n    this._sideMult.dispose();\n\n    this._twoTimesWidthMid.dispose();\n\n    this._twoTimesWidthSide.dispose();\n\n    this._oneMinusWidth.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/StereoWidener.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAoD,yBAApD;AACA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,QAAT,QAAyB,oBAAzB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,OAAT,QAAwB,+BAAxB;AAMA;;;;;;;;;AASG;;AACH,OAAM,MAAO,aAAP,SAA6B,aAA7B,CAAgE;AAuCrE,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,OAAD,CAAzC,CAA1B;AAvCQ,SAAA,IAAA,GAAe,eAAf;AAwCR,UAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,OAAD,CAAzC,CAApC;AACA,SAAK,KAAL,GAAa,IAAI,MAAJ,CAAW;AACvB,MAAA,OAAO,EAAE,KAAK,OADS;AAEvB,MAAA,KAAK,EAAE,OAAO,CAAC,KAFQ;AAGvB,MAAA,KAAK,EAAE;AAHgB,KAAX,CAAb;AAKA,IAAA,QAAQ,CAAC,IAAD,EAAO,CAAC,OAAD,CAAP,CAAR;AACA,SAAK,iBAAL,GAAyB,IAAI,QAAJ,CAAa;AACrC,MAAA,OAAO,EAAE,KAAK,OADuB;AAErC,MAAA,KAAK,EAAE;AAF8B,KAAb,CAAzB;AAIA,SAAK,kBAAL,GAA0B,IAAI,QAAJ,CAAa;AACtC,MAAA,OAAO,EAAE,KAAK,OADwB;AAEtC,MAAA,KAAK,EAAE;AAF+B,KAAb,CAA1B;AAIA,SAAK,QAAL,GAAgB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAb,CAAhB;;AACA,SAAK,iBAAL,CAAuB,OAAvB,CAA+B,KAAK,QAAL,CAAc,MAA7C;;AACA,SAAK,gBAAL,CAAsB,KAAK,QAA3B;AAEA,SAAK,cAAL,GAAsB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAb,CAAtB;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,iBAAjC;;AACA,IAAA,OAAO,CAAC,KAAK,OAAL,CAAa,WAAb,CAAyB,CAAzB,CAAD,EAA8B,KAAK,cAAnC,CAAP;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,cAAL,CAAoB,UAAvC;AAEA,SAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAb,CAAjB;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,kBAAxB;;AACA,SAAK,kBAAL,CAAwB,OAAxB,CAAgC,KAAK,SAAL,CAAe,MAA/C;;AACA,SAAK,iBAAL,CAAuB,KAAK,SAA5B;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,KAAK,EAAE;AAD0C,KAA3C,CAAP;AAGA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,KAAL,CAAW,OAAX;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,SAAK,iBAAL,CAAuB,OAAvB;;AACA,SAAK,kBAAL,CAAwB,OAAxB;;AACA,SAAK,cAAL,CAAoB,OAApB;;AACA,WAAO,IAAP;AACA;;AAvFoE","sourceRoot":"","sourcesContent":["import { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect {\n    constructor() {\n        super(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n        this.name = \"StereoWidener\";\n        const options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n        this.width = new Signal({\n            context: this.context,\n            value: options.width,\n            units: \"normalRange\",\n        });\n        readOnly(this, [\"width\"]);\n        this._twoTimesWidthMid = new Multiply({\n            context: this.context,\n            value: 2,\n        });\n        this._twoTimesWidthSide = new Multiply({\n            context: this.context,\n            value: 2,\n        });\n        this._midMult = new Multiply({ context: this.context });\n        this._twoTimesWidthMid.connect(this._midMult.factor);\n        this.connectEffectMid(this._midMult);\n        this._oneMinusWidth = new Subtract({ context: this.context });\n        this._oneMinusWidth.connect(this._twoTimesWidthMid);\n        connect(this.context.getConstant(1), this._oneMinusWidth);\n        this.width.connect(this._oneMinusWidth.subtrahend);\n        this._sideMult = new Multiply({ context: this.context });\n        this.width.connect(this._twoTimesWidthSide);\n        this._twoTimesWidthSide.connect(this._sideMult.factor);\n        this.connectEffectSide(this._sideMult);\n    }\n    static getDefaults() {\n        return Object.assign(MidSideEffect.getDefaults(), {\n            width: 0.5,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.width.dispose();\n        this._midMult.dispose();\n        this._sideMult.dispose();\n        this._twoTimesWidthMid.dispose();\n        this._twoTimesWidthSide.dispose();\n        this._oneMinusWidth.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=StereoWidener.js.map"]},"metadata":{},"sourceType":"module"}