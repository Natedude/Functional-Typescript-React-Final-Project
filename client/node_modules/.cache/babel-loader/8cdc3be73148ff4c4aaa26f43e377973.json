{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class BiquadFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Safari does not export the correct values for maxValue and minValue.\n\n      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)); // Bug #77: Firefox & Safari do not export the correct value for minValue.\n\n      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      this._nativeBiquadFilterNode = nativeBiquadFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n    get Q() {\n      return this._Q;\n    }\n\n    get type() {\n      return this._nativeBiquadFilterNode.type;\n    }\n\n    set type(value) {\n      this._nativeBiquadFilterNode.type = value;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      // Bug #189: Safari does throw an InvalidStateError.\n      try {\n        this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n      } catch (err) {\n        if (err.code === 11) {\n          throw createInvalidAccessError();\n        }\n\n        throw err;\n      } // Bug #68: Safari does not throw an error if the parameters differ in their length.\n\n\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/biquad-filter-node-constructor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class BiquadFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = (isOffline ? createBiquadFilterNodeRenderer() : null);\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Safari does not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n            // Bug #77: Firefox & Safari do not export the correct value for minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            // Bug #189: Safari does throw an InvalidStateError.\n            try {\n                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            }\n            catch (err) {\n                if (err.code === 11) {\n                    throw createInvalidAccessError();\n                }\n                throw err;\n            }\n            // Bug #68: Safari does not throw an error if the parameters differ in their length.\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=biquad-filter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}