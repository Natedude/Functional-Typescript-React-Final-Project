{"ast":null,"code":"import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\n\nexport class Panner3D extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n    this.name = \"Panner3D\";\n    const options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    this._panner = this.input = this.output = this.context.createPanner(); // set some values\n\n    this.panningModel = options.panningModel;\n    this.maxDistance = options.maxDistance;\n    this.distanceModel = options.distanceModel;\n    this.coneOuterGain = options.coneOuterGain;\n    this.coneOuterAngle = options.coneOuterAngle;\n    this.coneInnerAngle = options.coneInnerAngle;\n    this.refDistance = options.refDistance;\n    this.rolloffFactor = options.rolloffFactor;\n    this.positionX = new Param({\n      context: this.context,\n      param: this._panner.positionX,\n      value: options.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this._panner.positionY,\n      value: options.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this._panner.positionZ,\n      value: options.positionZ\n    });\n    this.orientationX = new Param({\n      context: this.context,\n      param: this._panner.orientationX,\n      value: options.orientationX\n    });\n    this.orientationY = new Param({\n      context: this.context,\n      param: this._panner.orientationY,\n      value: options.orientationY\n    });\n    this.orientationZ = new Param({\n      context: this.context,\n      param: this._panner.orientationZ,\n      value: options.orientationZ\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      coneInnerAngle: 360,\n      coneOuterAngle: 360,\n      coneOuterGain: 0,\n      distanceModel: \"inverse\",\n      maxDistance: 10000,\n      orientationX: 0,\n      orientationY: 0,\n      orientationZ: 0,\n      panningModel: \"equalpower\",\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      refDistance: 1,\n      rolloffFactor: 1\n    });\n  }\n  /**\n   * Sets the position of the source in 3d space.\n   */\n\n\n  setPosition(x, y, z) {\n    this.positionX.value = x;\n    this.positionY.value = y;\n    this.positionZ.value = z;\n    return this;\n  }\n  /**\n   * Sets the orientation of the source in 3d space.\n   */\n\n\n  setOrientation(x, y, z) {\n    this.orientationX.value = x;\n    this.orientationY.value = y;\n    this.orientationZ.value = z;\n    return this;\n  }\n  /**\n   * The panning model. Either \"equalpower\" or \"HRTF\".\n   */\n\n\n  get panningModel() {\n    return this._panner.panningModel;\n  }\n\n  set panningModel(val) {\n    this._panner.panningModel = val;\n  }\n  /**\n   * A reference distance for reducing volume as source move further from the listener\n   */\n\n\n  get refDistance() {\n    return this._panner.refDistance;\n  }\n\n  set refDistance(val) {\n    this._panner.refDistance = val;\n  }\n  /**\n   * Describes how quickly the volume is reduced as source moves away from listener.\n   */\n\n\n  get rolloffFactor() {\n    return this._panner.rolloffFactor;\n  }\n\n  set rolloffFactor(val) {\n    this._panner.rolloffFactor = val;\n  }\n  /**\n   * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n   */\n\n\n  get distanceModel() {\n    return this._panner.distanceModel;\n  }\n\n  set distanceModel(val) {\n    this._panner.distanceModel = val;\n  }\n  /**\n   * The angle, in degrees, inside of which there will be no volume reduction\n   */\n\n\n  get coneInnerAngle() {\n    return this._panner.coneInnerAngle;\n  }\n\n  set coneInnerAngle(val) {\n    this._panner.coneInnerAngle = val;\n  }\n  /**\n   * The angle, in degrees, outside of which the volume will be reduced\n   * to a constant value of coneOuterGain\n   */\n\n\n  get coneOuterAngle() {\n    return this._panner.coneOuterAngle;\n  }\n\n  set coneOuterAngle(val) {\n    this._panner.coneOuterAngle = val;\n  }\n  /**\n   * The gain outside of the coneOuterAngle\n   */\n\n\n  get coneOuterGain() {\n    return this._panner.coneOuterGain;\n  }\n\n  set coneOuterGain(val) {\n    this._panner.coneOuterGain = val;\n  }\n  /**\n   * The maximum distance between source and listener,\n   * after which the volume will not be reduced any further.\n   */\n\n\n  get maxDistance() {\n    return this._panner.maxDistance;\n  }\n\n  set maxDistance(val) {\n    this._panner.maxDistance = val;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.disconnect();\n\n    this.orientationX.dispose();\n    this.orientationY.dispose();\n    this.orientationZ.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/channel/Panner3D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n        this.name = \"Panner3D\";\n        const options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n        this._panner = this.input = this.output = this.context.createPanner();\n        // set some values\n        this.panningModel = options.panningModel;\n        this.maxDistance = options.maxDistance;\n        this.distanceModel = options.distanceModel;\n        this.coneOuterGain = options.coneOuterGain;\n        this.coneOuterAngle = options.coneOuterAngle;\n        this.coneInnerAngle = options.coneInnerAngle;\n        this.refDistance = options.refDistance;\n        this.rolloffFactor = options.rolloffFactor;\n        this.positionX = new Param({\n            context: this.context,\n            param: this._panner.positionX,\n            value: options.positionX,\n        });\n        this.positionY = new Param({\n            context: this.context,\n            param: this._panner.positionY,\n            value: options.positionY,\n        });\n        this.positionZ = new Param({\n            context: this.context,\n            param: this._panner.positionZ,\n            value: options.positionZ,\n        });\n        this.orientationX = new Param({\n            context: this.context,\n            param: this._panner.orientationX,\n            value: options.orientationX,\n        });\n        this.orientationY = new Param({\n            context: this.context,\n            param: this._panner.orientationY,\n            value: options.orientationY,\n        });\n        this.orientationZ = new Param({\n            context: this.context,\n            param: this._panner.orientationZ,\n            value: options.orientationZ,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            coneInnerAngle: 360,\n            coneOuterAngle: 360,\n            coneOuterGain: 0,\n            distanceModel: \"inverse\",\n            maxDistance: 10000,\n            orientationX: 0,\n            orientationY: 0,\n            orientationZ: 0,\n            panningModel: \"equalpower\",\n            positionX: 0,\n            positionY: 0,\n            positionZ: 0,\n            refDistance: 1,\n            rolloffFactor: 1,\n        });\n    }\n    /**\n     * Sets the position of the source in 3d space.\n     */\n    setPosition(x, y, z) {\n        this.positionX.value = x;\n        this.positionY.value = y;\n        this.positionZ.value = z;\n        return this;\n    }\n    /**\n     * Sets the orientation of the source in 3d space.\n     */\n    setOrientation(x, y, z) {\n        this.orientationX.value = x;\n        this.orientationY.value = y;\n        this.orientationZ.value = z;\n        return this;\n    }\n    /**\n     * The panning model. Either \"equalpower\" or \"HRTF\".\n     */\n    get panningModel() {\n        return this._panner.panningModel;\n    }\n    set panningModel(val) {\n        this._panner.panningModel = val;\n    }\n    /**\n     * A reference distance for reducing volume as source move further from the listener\n     */\n    get refDistance() {\n        return this._panner.refDistance;\n    }\n    set refDistance(val) {\n        this._panner.refDistance = val;\n    }\n    /**\n     * Describes how quickly the volume is reduced as source moves away from listener.\n     */\n    get rolloffFactor() {\n        return this._panner.rolloffFactor;\n    }\n    set rolloffFactor(val) {\n        this._panner.rolloffFactor = val;\n    }\n    /**\n     * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n     */\n    get distanceModel() {\n        return this._panner.distanceModel;\n    }\n    set distanceModel(val) {\n        this._panner.distanceModel = val;\n    }\n    /**\n     * The angle, in degrees, inside of which there will be no volume reduction\n     */\n    get coneInnerAngle() {\n        return this._panner.coneInnerAngle;\n    }\n    set coneInnerAngle(val) {\n        this._panner.coneInnerAngle = val;\n    }\n    /**\n     * The angle, in degrees, outside of which the volume will be reduced\n     * to a constant value of coneOuterGain\n     */\n    get coneOuterAngle() {\n        return this._panner.coneOuterAngle;\n    }\n    set coneOuterAngle(val) {\n        this._panner.coneOuterAngle = val;\n    }\n    /**\n     * The gain outside of the coneOuterAngle\n     */\n    get coneOuterGain() {\n        return this._panner.coneOuterGain;\n    }\n    set coneOuterGain(val) {\n        this._panner.coneOuterGain = val;\n    }\n    /**\n     * The maximum distance between source and listener,\n     * after which the volume will not be reduced any further.\n     */\n    get maxDistance() {\n        return this._panner.maxDistance;\n    }\n    set maxDistance(val) {\n        this._panner.maxDistance = val;\n    }\n    dispose() {\n        super.dispose();\n        this._panner.disconnect();\n        this.orientationX.dispose();\n        this.orientationY.dispose();\n        this.orientationZ.dispose();\n        this.positionX.dispose();\n        this.positionY.dispose();\n        this.positionZ.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Panner3D.js.map"]},"metadata":{},"sourceType":"module"}