{"ast":null,"code":"import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.\n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\n\nexport class AutoPanner extends LFOEffect {\n  constructor() {\n    super(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"AutoPanner\";\n    const options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n    this._panner = new Panner({\n      context: this.context,\n      channelCount: options.channelCount\n    }); // connections\n\n    this.connectEffect(this._panner);\n\n    this._lfo.connect(this._panner.pan);\n\n    this._lfo.min = -1;\n    this._lfo.max = 1;\n  }\n\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      channelCount: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/AutoPanner.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,6BAAvB;AACA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,SAAT,QAA4C,aAA5C;AAOA;;;;;;;;;;AAUG;;AACH,OAAM,MAAO,UAAP,SAA0B,SAA1B,CAAsD;AAc3D,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,WAAD,CAAtC,CAA1B;AAdQ,SAAA,IAAA,GAAe,YAAf;AAeR,UAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,WAAD,CAAtC,CAApC;AAEA,SAAK,OAAL,GAAe,IAAI,MAAJ,CAAW;AACzB,MAAA,OAAO,EAAE,KAAK,OADW;AAEzB,MAAA,YAAY,EAAE,OAAO,CAAC;AAFG,KAAX,CAAf,CALD,CASC;;AACA,SAAK,aAAL,CAAmB,KAAK,OAAxB;;AACA,SAAK,IAAL,CAAU,OAAV,CAAkB,KAAK,OAAL,CAAa,GAA/B;;AACA,SAAK,IAAL,CAAU,GAAV,GAAgB,CAAC,CAAjB;AACA,SAAK,IAAL,CAAU,GAAV,GAAgB,CAAhB;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,WAAV,EAAd,EAAuC;AAC7C,MAAA,YAAY,EAAE;AAD+B,KAAvC,CAAP;AAGA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,WAAO,IAAP;AACA;;AAxC0D","sourceRoot":"","sourcesContent":["import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.\n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect {\n    constructor() {\n        super(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n        this.name = \"AutoPanner\";\n        const options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n        this._panner = new Panner({\n            context: this.context,\n            channelCount: options.channelCount\n        });\n        // connections\n        this.connectEffect(this._panner);\n        this._lfo.connect(this._panner.pan);\n        this._lfo.min = -1;\n        this._lfo.max = 1;\n    }\n    static getDefaults() {\n        return Object.assign(LFOEffect.getDefaults(), {\n            channelCount: 1\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._panner.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AutoPanner.js.map"]},"metadata":{},"sourceType":"module"}