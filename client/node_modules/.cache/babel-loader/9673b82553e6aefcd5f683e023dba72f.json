{"ast":null,"code":"// 3rd party library imports\nimport { Visualizer } from '../Visualizers'; //project imports\n\nexport const jaq19_visual = new Visualizer('Wavy_Lines', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight; //const height = window.innerHeight / 2;\n  //const dim = Math.min(width, height);\n\n  p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n\n  p5.stroke(255); // p5.stroke(255, 255, 255, 255);\n\n  p5.noFill();\n  const values = analyzer.getValue();\n  p5.beginShape();\n\n  for (let i = 0; i < 360; i++) {\n    //p5.stroke(255);\n    const amplitude = values[i];\n    var r = p5.map(amplitude, values.length * .55, values.length, 0, 1500); //var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n\n    var x = p5.map(i, 360, values.length, 0, width);\n    var y = height + amplitude * height;\n    x = r * Math.cos(y);\n    y = r * Math.sin(x);\n    p5.curveVertex(x, y);\n  }\n\n  p5.endShape();\n});\n/*  working code\n     for (let i = 0; i < values.length; i++) {\n     const amplitude = values[i] as number;\n     //const x = p5.map(i, 0, values.length - 1, 0, width);\n     //const y = height / 2 + amplitude * height;\n     // Place vertex\n     var r = p5.map(amplitude,(values.length)*(.5), values.length, 5, 1500);//var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n     var x = p5.map(i, 610, values.length, 0, width);// var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n     var y = height + amplitude * height;//var y = height / 2 + amplitude * height;\n       x = r * Math.cos(x)\n       y = r * Math.sin(y)\n     p5.curveVertex(x, y);\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n   } */\n\n/* working code\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n    p5.strokeWeight(dim * 0.01);\n    p5.stroke(255, 255, 138, 255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n*/\n\n/**\\\n\n    //start of new code here\n    const fft = new Tone.FFT();\n     // default mode is radians\n    p5.angleMode(\"radians\");\n    p5.translate(width/2, height/2);\n    p5.background(255, 255, 255, 100);\n    p5.stroke(237, 34, 93, 120);\n      // min radius of ellipse\n    let minRad = 2;\n\n    // max radius of ellipse\n    let maxRad = height;\n    // array of values from -1 to 1\n    let timeDomain = new Tone.Waveform(1024);\n    let corrBuff = autoCorrelate(timeDomain);\n\n\n    function autoCorrelate(buffer: number): [] {\n      var newBuffer = [];\n      var len = corrBuff.length;\n      var nSamples = buffer.length;\n      const centerClip = 0;\n      const bNormalize = true;\n      var autocorrelation = [];\n\n      // center clip removes any samples under 0.1\n      if (centerClip) {\n        var cutoff = centerClip;\n        for (var i = 0; i < buffer.length; i++) {\n          var val = buffer[i];\n          buffer[i] = Math.abs(val) > cutoff ? val : 0;\n        }\n      }\n\n      for (var lag = 0; lag < nSamples; lag++){\n        var sum = 0;\n        for (var index = 0; index < nSamples; index++){\n          var indexLagged = index+lag;\n          var sound1 = buffer[index];\n          var sound2 = buffer[indexLagged % nSamples];\n          var product = sound1 * sound2;\n          sum += product;\n        }\n\n        // average to a value between -1 and 1\n        newBuffer[lag] = sum/nSamples;\n      }\n\n      if (bNormalize){\n        var biggestVal = 0;\n        for (var index = 0; index < nSamples; index++){\n          if (abs(newBuffer[index]) > biggestVal){\n            biggestVal = abs(newBuffer[index]);\n          }\n        }\n        // dont divide by zero\n        if (biggestVal !== 0) {\n          for (var index = 0; index < nSamples; index++){\n            newBuffer[index] /= biggestVal;\n          }\n        }\n      }\n\n      return newBuffer;\n    };\n*/\n\n/*\n\nproject imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n\n    p5.strokeWeight(dim * 0.01);\n    //p5.stroke(255, 255, 138, 255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n */\n\n/*\n  export const jaq19_Visual = new Visualizer(\n  'jaq19_Visual',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight/2;//const height = window.innerHeight / 2;\n    //const dim = Math.min(width, height);\n\n    //const fft = analyzer.set({type:'fft', size:128}); // NEED TO FIX, DOES NOT WORK!!!\n\n    p5.background(0); // p5.background(0, 0, 0, 255);\n    p5.stroke(255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      //const x = p5.map(i, 0, values.length - 1, 0, width);\n      //const y = height / 2 + amplitude * height;\n      // Place vertex\n      var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n      var x = p5.map(i, 4080, values.length - 1, 0, width/2);// var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n      var y = height + amplitude * height/2;//var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x+20)\n        y = r * Math.sin(y+20)\n      p5.vertex(x+200, y+200);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n*/\n\n/**\n *\n * // project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0);\n    p5.noFill();\n    p5.translate(width/2, height/2);\n    const values = analyzer.getValue();\n    let fft:any;\n    var spectrum = fft.analyze();\n\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const vol = amplitude.getLevel();\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n */","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/jaq19_visual.tsx"],"names":["Visualizer","jaq19_visual","p5","analyzer","width","window","innerWidth","height","innerHeight","background","stroke","noFill","values","getValue","beginShape","i","amplitude","r","map","length","x","y","Math","cos","sin","curveVertex","endShape"],"mappings":"AAAA;AAIA,SAASA,UAAT,QAA2B,gBAA3B,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,IAAID,UAAJ,CAC1B,YAD0B,EAE1B,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAtB,CAFmC,CAED;AAClC;;AAEAN,EAAAA,EAAE,CAACO,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,GAApB,EAAyB,GAAzB,EALmC,CAKJ;;AAC/BP,EAAAA,EAAE,CAACQ,MAAH,CAAU,GAAV,EANmC,CAMnB;;AAChBR,EAAAA,EAAE,CAACS,MAAH;AAEA,QAAMC,MAAM,GAAGT,QAAQ,CAACU,QAAT,EAAf;AAEAX,EAAAA,EAAE,CAACY,UAAH;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B;AACA,UAAMC,SAAS,GAAGJ,MAAM,CAACG,CAAD,CAAxB;AACA,QAAIE,CAAC,GAAGf,EAAE,CAACgB,GAAH,CAAOF,SAAP,EAAkBJ,MAAM,CAACO,MAAR,GAAiB,GAAlC,EAAwCP,MAAM,CAACO,MAA/C,EAAuD,CAAvD,EAA0D,IAA1D,CAAR,CAH4B,CAG4C;;AACxE,QAAIC,CAAC,GAAGlB,EAAE,CAACgB,GAAH,CAAOH,CAAP,EAAU,GAAV,EAAeH,MAAM,CAACO,MAAtB,EAA8B,CAA9B,EAAiCf,KAAjC,CAAR;AACA,QAAIiB,CAAC,GAAGd,MAAM,GAAGS,SAAS,GAAGT,MAA7B;AACCa,IAAAA,CAAC,GAAGH,CAAC,GAAGK,IAAI,CAACC,GAAL,CAASF,CAAT,CAAR;AACAA,IAAAA,CAAC,GAAGJ,CAAC,GAAGK,IAAI,CAACE,GAAL,CAASJ,CAAT,CAAR;AACDlB,IAAAA,EAAE,CAACuB,WAAH,CAAeL,CAAf,EAAkBC,CAAlB;AACD;;AAEDnB,EAAAA,EAAE,CAACwB,QAAH;AAED,CA5ByB,CAArB;AAiCN;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\nimport { FFT } from 'tone';\nimport { Visualizer } from '../Visualizers';\n\n//project imports\nexport const jaq19_visual = new Visualizer(\n  'Wavy_Lines',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;//const height = window.innerHeight / 2;\n    //const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n    p5.stroke(255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n\n    p5.beginShape();\n\n    for (let i = 0; i < 360; i++) {\n      //p5.stroke(255);\n      const amplitude = values[i] as number;\n      var r = p5.map(amplitude,(values.length)*(.55), values.length, 0, 1500);//var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n      var x = p5.map(i, 360, values.length, 0, width);\n      var y = height + amplitude * height;\n       x = r * Math.cos(y);\n       y = r * Math.sin(x);\n      p5.curveVertex(x, y);\n    }\n\n    p5.endShape();\n\n  },\n);\n\n\n\n /*  working code\n      for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      //const x = p5.map(i, 0, values.length - 1, 0, width);\n      //const y = height / 2 + amplitude * height;\n      // Place vertex\n      var r = p5.map(amplitude,(values.length)*(.5), values.length, 5, 1500);//var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n      var x = p5.map(i, 610, values.length, 0, width);// var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n      var y = height + amplitude * height;//var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x)\n        y = r * Math.sin(y)\n      p5.curveVertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n    } */\n\n\n\n/* working code\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n    p5.strokeWeight(dim * 0.01);\n    p5.stroke(255, 255, 138, 255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n*/\n\n/**\\\n\n    //start of new code here\n    const fft = new Tone.FFT();\n     // default mode is radians\n    p5.angleMode(\"radians\");\n    p5.translate(width/2, height/2);\n    p5.background(255, 255, 255, 100);\n    p5.stroke(237, 34, 93, 120);\n      // min radius of ellipse\n    let minRad = 2;\n\n    // max radius of ellipse\n    let maxRad = height;\n    // array of values from -1 to 1\n    let timeDomain = new Tone.Waveform(1024);\n    let corrBuff = autoCorrelate(timeDomain);\n\n\n    function autoCorrelate(buffer: number): [] {\n      var newBuffer = [];\n      var len = corrBuff.length;\n      var nSamples = buffer.length;\n      const centerClip = 0;\n      const bNormalize = true;\n      var autocorrelation = [];\n\n      // center clip removes any samples under 0.1\n      if (centerClip) {\n        var cutoff = centerClip;\n        for (var i = 0; i < buffer.length; i++) {\n          var val = buffer[i];\n          buffer[i] = Math.abs(val) > cutoff ? val : 0;\n        }\n      }\n\n      for (var lag = 0; lag < nSamples; lag++){\n        var sum = 0;\n        for (var index = 0; index < nSamples; index++){\n          var indexLagged = index+lag;\n          var sound1 = buffer[index];\n          var sound2 = buffer[indexLagged % nSamples];\n          var product = sound1 * sound2;\n          sum += product;\n        }\n\n        // average to a value between -1 and 1\n        newBuffer[lag] = sum/nSamples;\n      }\n\n      if (bNormalize){\n        var biggestVal = 0;\n        for (var index = 0; index < nSamples; index++){\n          if (abs(newBuffer[index]) > biggestVal){\n            biggestVal = abs(newBuffer[index]);\n          }\n        }\n        // dont divide by zero\n        if (biggestVal !== 0) {\n          for (var index = 0; index < nSamples; index++){\n            newBuffer[index] /= biggestVal;\n          }\n        }\n      }\n\n      return newBuffer;\n    };\n*/\n\n\n\n/*\n\nproject imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0, 0, 138, 255); // p5.background(0, 0, 0, 255);\n\n    p5.strokeWeight(dim * 0.01);\n    //p5.stroke(255, 255, 138, 255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n */\n\n\n\n\n/*\n  export const jaq19_Visual = new Visualizer(\n  'jaq19_Visual',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight/2;//const height = window.innerHeight / 2;\n    //const dim = Math.min(width, height);\n\n    //const fft = analyzer.set({type:'fft', size:128}); // NEED TO FIX, DOES NOT WORK!!!\n\n    p5.background(0); // p5.background(0, 0, 0, 255);\n    p5.stroke(255); // p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    const values = analyzer.getValue();\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      //const x = p5.map(i, 0, values.length - 1, 0, width);\n      //const y = height / 2 + amplitude * height;\n      // Place vertex\n      var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n      var x = p5.map(i, 4080, values.length - 1, 0, width/2);// var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n      var y = height + amplitude * height/2;//var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x+20)\n        y = r * Math.sin(y+20)\n      p5.vertex(x+200, y+200);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n*/\n\n\n/**\n *\n * // project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const jaq19_visual = new Visualizer(\n  'jaq19',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0);\n    p5.noFill();\n    p5.translate(width/2, height/2);\n    const values = analyzer.getValue();\n    let fft:any;\n    var spectrum = fft.analyze();\n\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const vol = amplitude.getLevel();\n      const x = p5.map(i, 0, values.length - 1, 0, width);\n      const y = height + 2*amplitude * height; //const y = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x, y);\n\n      // console.log(`Amplitude: ${amplitude}, x:${x}, y:${y}`);\n\n    }\n\n    p5.endShape();\n  },\n);\n */\n"]},"metadata":{},"sourceType":"module"}