{"ast":null,"code":"import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n  return class MinimalBaseAudioContext extends eventTargetConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext);\n      this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(this, _nativeContext);\n\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n\n      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n      this._listener = createAudioListener(this, _nativeContext);\n      this._onstatechange = null;\n    }\n\n    get currentTime() {\n      return this._nativeContext.currentTime;\n    }\n\n    get destination() {\n      return this._destination;\n    }\n\n    get listener() {\n      return this._listener;\n    }\n\n    get onstatechange() {\n      return this._onstatechange;\n    }\n\n    set onstatechange(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeContext.onstatechange = wrappedListener;\n      const nativeOnStateChange = this._nativeContext.onstatechange;\n      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n    }\n\n    get sampleRate() {\n      return this._nativeContext.sampleRate;\n    }\n\n    get state() {\n      return this._nativeContext.state;\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/minimal-base-audio-context-constructor.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAA8B,YAA9B;AAIA,OAAO,MAAM,wCAAwC,GAA+C,CAChG,+BADgG,EAEhG,mBAFgG,EAGhG,sBAHgG,EAIhG,2BAJgG,EAKhG,+BALgG,EAMhG,iBANgG,KAOhG;AACA,SAAO,MAAM,uBAAN,SACK,sBADL,CAC6D;AAShE,IAAA,WAAA,CAAoB,cAApB,EAAoD,gBAApD,EAA4E;AACxE,YAAM,cAAN;AADgB,WAAA,cAAA,GAAA,cAAA;AAGhB,MAAA,aAAa,CAAC,GAAd,CAA+B,IAA/B,EAAsC,cAAtC;;AAEA,UAAI,2BAA2B,CAAC,cAAD,CAA/B,EAAiD;AAC7C,QAAA,+BAA+B,CAAC,GAAhC,CAAoC,cAApC,EAAoD,IAAI,GAAJ,EAApD;AACH;;AAED,WAAK,YAAL,GAAoB,IAAI,+BAAJ,CAAiD,IAAjD,EAAwD,gBAAxD,CAApB;AACA,WAAK,SAAL,GAAiB,mBAAmB,CAAc,IAAd,EAAqB,cAArB,CAApC;AACA,WAAK,cAAL,GAAsB,IAAtB;AACH;;AAEc,QAAX,WAAW,GAAA;AACX,aAAO,KAAK,cAAL,CAAoB,WAA3B;AACH;;AAEc,QAAX,WAAW,GAAA;AACX,aAAO,KAAK,YAAZ;AACH;;AAEW,QAAR,QAAQ,GAAA;AACR,aAAO,KAAK,SAAZ;AACH;;AAEgB,QAAb,aAAa,GAAA;AACb,aAAO,KAAK,cAAZ;AACH;;AAEgB,QAAb,aAAa,CAAC,KAAD,EAAM;AACnB,YAAM,eAAe,GAAG,OAAO,KAAP,KAAiB,UAAjB,GAA8B,iBAAiB,CAAC,IAAD,EAAO,KAAP,CAA/C,GAA+D,IAAvF;AAEA,WAAK,cAAL,CAAoB,aAApB,GAAoC,eAApC;AAEA,YAAM,mBAAmB,GAAG,KAAK,cAAL,CAAoB,aAAhD;AAEA,WAAK,cAAL,GAAsB,mBAAmB,KAAK,IAAxB,IAAgC,mBAAmB,KAAK,eAAxD,GAA0E,KAA1E,GAAkF,mBAAxG;AACH;;AAEa,QAAV,UAAU,GAAA;AACV,aAAO,KAAK,cAAL,CAAoB,UAA3B;AACH;;AAEQ,QAAL,KAAK,GAAA;AACL,aAAO,KAAK,cAAL,CAAoB,KAA3B;AACH;;AAvD+D,GADpE;AA0DH,CAlEM","sourceRoot":"","sourcesContent":["import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n    return class MinimalBaseAudioContext extends eventTargetConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            if (isNativeOfflineAudioContext(_nativeContext)) {\n                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n            }\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=minimal-base-audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}