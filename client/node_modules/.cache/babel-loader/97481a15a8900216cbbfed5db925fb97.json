{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const matthewMadore_Visual = new Visualizer('matthewMadore', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2; // console.log('width: ' + width)\n  // console.log('height: ' + height)\n\n  const dim = Math.min(width, height);\n  const fftSize = 2048;\n  analyzer.set({\n    type: 'fft',\n    size: fftSize,\n    smoothing: 0.5\n  });\n  p5.background(0, 0, 0, 255);\n  p5.stroke(255, 255, 255, 255); // for (let i = 0; i < 220; i++) {\n  //   p5.strokeWeight(dim * 0.01);\n  //   p5.stroke(255 - i, 255-i, 255-i, 255);\n  //   p5.noFill();\n  // }\n\n  p5.angleMode('degrees');\n  const values = analyzer.getValue();\n  p5.translate(width / 2, height / 2); //for (let j = 0; j < 100; j++) {\n\n  p5.beginShape();\n\n  for (let i = 2030; i < values.length; i++) {\n    const amplitude = values[i];\n    var r = p5.map(amplitude, (values.length - 1) * .75, values.length - 1, 0, 20);\n    var x = p5.map(i, 2040, values.length - 1, 0, width / 2);\n    var y = height / 2 + amplitude * height;\n    x = r * Math.cos(x);\n    y = r * Math.sin(y); // Place vertex-\n\n    p5.vertex(x - 200, y + 10);\n  }\n\n  p5.endShape();\n  p5.beginShape();\n\n  for (let i = 2030; i < values.length; i++) {\n    const amplitude = values[i];\n    var r = p5.map(amplitude, (values.length - 1) * .75, values.length - 1, 0, 20);\n    var x = p5.map(i, 2040, values.length - 1, 0, width / 2);\n    var y = height / 2 + amplitude * height;\n    x = r * Math.cos(x);\n    y = r * Math.sin(y); // Place vertex-\n\n    p5.vertex(x, y + 10);\n  }\n\n  p5.endShape();\n  p5.beginShape();\n\n  for (let i = 2030; i < values.length; i++) {\n    const amplitude = values[i];\n    var r = p5.map(amplitude, (values.length - 1) * .75, values.length - 1, 0, 20);\n    var x = p5.map(i, 2040, values.length - 1, 0, width / 2);\n    var y = height / 2 + amplitude * height;\n    x = r * Math.cos(x);\n    y = r * Math.sin(y); // Place vertex-\n\n    p5.vertex(x + 200, y + 10);\n  }\n\n  p5.endShape(); //}\n});","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/matthewMadore_Visual.tsx"],"names":["Visualizer","matthewMadore_Visual","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","fftSize","set","type","size","smoothing","background","stroke","angleMode","values","getValue","translate","beginShape","i","length","amplitude","r","map","x","y","cos","sin","vertex","endShape"],"mappings":"AAAA;AAOA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAGA,OAAO,MAAMC,oBAAoB,GAAG,IAAID,UAAJ,CAClC,eADkC,EAElC,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC,CAFmC,CAGnC;AACA;;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASP,KAAT,EAAgBG,MAAhB,CAAZ;AAEA,QAAMK,OAAO,GAAG,IAAhB;AACAT,EAAAA,QAAQ,CAACU,GAAT,CAAa;AACXC,IAAAA,IAAI,EAAE,KADK;AAEXC,IAAAA,IAAI,EAAGH,OAFI;AAGXI,IAAAA,SAAS,EAAE;AAHA,GAAb;AAMAd,EAAAA,EAAE,CAACe,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB;AACAf,EAAAA,EAAE,CAACgB,MAAH,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAfmC,CAmBnC;AACA;AACA;AACA;AACA;;AAGAhB,EAAAA,EAAE,CAACiB,SAAH,CAAa,SAAb;AACA,QAAMC,MAAM,GAAGjB,QAAQ,CAACkB,QAAT,EAAf;AAKFnB,EAAAA,EAAE,CAACoB,SAAH,CAAalB,KAAK,GAAG,CAArB,EAAyBG,MAAM,GAAG,CAAlC,EAhCqC,CAiCrC;;AAEIL,EAAAA,EAAE,CAACqB,UAAH;;AAEA,OAAK,IAAIC,CAAC,GAAG,IAAb,EAAmBA,CAAC,GAAGJ,MAAM,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAME,SAAS,GAAGN,MAAM,CAACI,CAAD,CAAxB;AACA,QAAIG,CAAC,GAAGzB,EAAE,CAAC0B,GAAH,CAAOF,SAAP,EAAiB,CAACN,MAAM,CAACK,MAAP,GAAgB,CAAjB,IAAqB,GAAtC,EAA4CL,MAAM,CAACK,MAAP,GAAgB,CAA5D,EAA+D,CAA/D,EAAkE,EAAlE,CAAR;AACA,QAAII,CAAC,GAAG3B,EAAE,CAAC0B,GAAH,CAAOJ,CAAP,EAAU,IAAV,EAAgBJ,MAAM,CAACK,MAAP,GAAgB,CAAhC,EAAmC,CAAnC,EAAsCrB,KAAK,GAAC,CAA5C,CAAR;AACA,QAAI0B,CAAC,GAAGvB,MAAM,GAAG,CAAT,GAAamB,SAAS,GAAGnB,MAAjC;AACAsB,IAAAA,CAAC,GAAGF,CAAC,GAAGjB,IAAI,CAACqB,GAAL,CAASF,CAAT,CAAR;AACAC,IAAAA,CAAC,GAAGH,CAAC,GAAGjB,IAAI,CAACsB,GAAL,CAASF,CAAT,CAAR,CANyC,CAOzC;;AACA5B,IAAAA,EAAE,CAAC+B,MAAH,CAAUJ,CAAC,GAAC,GAAZ,EAAiBC,CAAC,GAAC,EAAnB;AACD;;AACD5B,EAAAA,EAAE,CAACgC,QAAH;AAEAhC,EAAAA,EAAE,CAACqB,UAAH;;AAEA,OAAK,IAAIC,CAAC,GAAG,IAAb,EAAmBA,CAAC,GAAGJ,MAAM,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAME,SAAS,GAAGN,MAAM,CAACI,CAAD,CAAxB;AACA,QAAIG,CAAC,GAAGzB,EAAE,CAAC0B,GAAH,CAAOF,SAAP,EAAiB,CAACN,MAAM,CAACK,MAAP,GAAgB,CAAjB,IAAqB,GAAtC,EAA4CL,MAAM,CAACK,MAAP,GAAgB,CAA5D,EAA+D,CAA/D,EAAkE,EAAlE,CAAR;AACA,QAAII,CAAC,GAAG3B,EAAE,CAAC0B,GAAH,CAAOJ,CAAP,EAAU,IAAV,EAAgBJ,MAAM,CAACK,MAAP,GAAgB,CAAhC,EAAmC,CAAnC,EAAsCrB,KAAK,GAAC,CAA5C,CAAR;AACA,QAAI0B,CAAC,GAAGvB,MAAM,GAAG,CAAT,GAAamB,SAAS,GAAGnB,MAAjC;AACAsB,IAAAA,CAAC,GAAGF,CAAC,GAAGjB,IAAI,CAACqB,GAAL,CAASF,CAAT,CAAR;AACAC,IAAAA,CAAC,GAAGH,CAAC,GAAGjB,IAAI,CAACsB,GAAL,CAASF,CAAT,CAAR,CANyC,CAOzC;;AACA5B,IAAAA,EAAE,CAAC+B,MAAH,CAAUJ,CAAV,EAAaC,CAAC,GAAC,EAAf;AACD;;AACD5B,EAAAA,EAAE,CAACgC,QAAH;AAEAhC,EAAAA,EAAE,CAACqB,UAAH;;AAEA,OAAK,IAAIC,CAAC,GAAG,IAAb,EAAmBA,CAAC,GAAGJ,MAAM,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAME,SAAS,GAAGN,MAAM,CAACI,CAAD,CAAxB;AACA,QAAIG,CAAC,GAAGzB,EAAE,CAAC0B,GAAH,CAAOF,SAAP,EAAiB,CAACN,MAAM,CAACK,MAAP,GAAgB,CAAjB,IAAqB,GAAtC,EAA4CL,MAAM,CAACK,MAAP,GAAgB,CAA5D,EAA+D,CAA/D,EAAkE,EAAlE,CAAR;AACA,QAAII,CAAC,GAAG3B,EAAE,CAAC0B,GAAH,CAAOJ,CAAP,EAAU,IAAV,EAAgBJ,MAAM,CAACK,MAAP,GAAgB,CAAhC,EAAmC,CAAnC,EAAsCrB,KAAK,GAAC,CAA5C,CAAR;AACA,QAAI0B,CAAC,GAAGvB,MAAM,GAAG,CAAT,GAAamB,SAAS,GAAGnB,MAAjC;AACAsB,IAAAA,CAAC,GAAGF,CAAC,GAAGjB,IAAI,CAACqB,GAAL,CAASF,CAAT,CAAR;AACAC,IAAAA,CAAC,GAAGH,CAAC,GAAGjB,IAAI,CAACsB,GAAL,CAASF,CAAT,CAAR,CANyC,CAOzC;;AACA5B,IAAAA,EAAE,CAAC+B,MAAH,CAAUJ,CAAC,GAAC,GAAZ,EAAiBC,CAAC,GAAC,EAAnB;AACD;;AACD5B,EAAAA,EAAE,CAACgC,QAAH,GA3EiC,CA4EnC;AACD,CA/EiC,CAA7B","sourcesContent":["// 3rd party library imports\nimport { Translate32 } from '@carbon/icons-react';\nimport P5 from 'p5';\nimport * as Tone from 'tone';\nimport { SideNav } from '../SideNav';\n\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\n\nexport const matthewMadore_Visual = new Visualizer(\n  'matthewMadore',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    // console.log('width: ' + width)\n    // console.log('height: ' + height)\n    const dim = Math.min(width, height);\n\n    const fftSize = 2048;\n    analyzer.set({\n      type: 'fft',\n      size:  fftSize,\n      smoothing: 0.5\n    });\n\n    p5.background(0, 0, 0, 255);\n    p5.stroke(255, 255, 255, 255);\n    \n\n\n    // for (let i = 0; i < 220; i++) {\n    //   p5.strokeWeight(dim * 0.01);\n    //   p5.stroke(255 - i, 255-i, 255-i, 255);\n    //   p5.noFill();\n    // }\n   \n   \n    p5.angleMode('degrees')\n    const values = analyzer.getValue();\n    \n\n    \n\n  p5.translate(width / 2 , height / 2)\n  //for (let j = 0; j < 100; j++) {\n    \n      p5.beginShape();\n\n      for (let i = 2030; i < values.length; i++) {\n        const amplitude = values[i] as number;\n        var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n        var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n        var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x)\n        y = r * Math.sin(y)\n        // Place vertex-\n        p5.vertex(x-200, y+10);\n      }\n      p5.endShape();\n\n      p5.beginShape();\n\n      for (let i = 2030; i < values.length; i++) {\n        const amplitude = values[i] as number;\n        var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n        var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n        var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x)\n        y = r * Math.sin(y)\n        // Place vertex-\n        p5.vertex(x, y+10);\n      }\n      p5.endShape();\n\n      p5.beginShape();\n\n      for (let i = 2030; i < values.length; i++) {\n        const amplitude = values[i] as number;\n        var r = p5.map(amplitude,(values.length - 1)*(.75), values.length - 1, 0, 20);\n        var x = p5.map(i, 2040, values.length - 1, 0, width/2);\n        var y = height / 2 + amplitude * height;\n        x = r * Math.cos(x)\n        y = r * Math.sin(y)\n        // Place vertex-\n        p5.vertex(x+200, y+10);\n      }\n      p5.endShape();\n    //}\n  },\n);\n\n \n"]},"metadata":{},"sourceType":"module"}