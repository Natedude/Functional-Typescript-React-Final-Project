{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\n\nexport class MidiClass extends FrequencyClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"MidiClass\";\n    this.defaultUnits = \"midi\";\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return ftom(super._frequencyToUnits(freq));\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ftom(super._ticksToUnits(ticks));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return ftom(super._beatsToUnits(beats));\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return ftom(super._secondsToUnits(seconds));\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toFrequency(); // 261.6255653005986\n   */\n\n\n  toFrequency() {\n    return mtof(this.toMidi());\n  }\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return A new transposed MidiClass\n   * @example\n   * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new MidiClass(this.context, this.toMidi() + interval);\n  }\n\n}\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\n\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Midi.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,WAA3B;AACA,SAAS,IAAT,EAAe,IAAf,QAA2B,eAA3B;AACA,SAAS,cAAT,QAA8C,aAA9C;AAIA;;;;;AAKG;;AACH,OAAM,MAAO,SAAP,SAAyB,cAAzB,CAAiD;AAAvD,EAAA,WAAA,GAAA;;AAEU,SAAA,IAAA,GAAe,WAAf;AAEA,SAAA,YAAA,GAAe,MAAf;AAyDT;AAvDA;;AAEG;;;AACO,EAAA,iBAAiB,CAAC,IAAD,EAAY;AACtC,WAAO,IAAI,CAAC,MAAM,iBAAN,CAAwB,IAAxB,CAAD,CAAX;AACA;AAED;;AAEG;;;AACO,EAAA,aAAa,CAAC,KAAD,EAAa;AACnC,WAAO,IAAI,CAAC,MAAM,aAAN,CAAoB,KAApB,CAAD,CAAX;AACA;AAED;;AAEG;;;AACO,EAAA,aAAa,CAAC,KAAD,EAAc;AACpC,WAAO,IAAI,CAAC,MAAM,aAAN,CAAoB,KAApB,CAAD,CAAX;AACA;AAED;;AAEG;;;AACO,EAAA,eAAe,CAAC,OAAD,EAAiB;AACzC,WAAO,IAAI,CAAC,MAAM,eAAN,CAAsB,OAAtB,CAAD,CAAX;AACA;AAED;;;;AAIG;;;AACH,EAAA,MAAM,GAAA;AACL,WAAO,KAAK,OAAL,EAAP;AACA;AAED;;;;AAIG;;;AACH,EAAA,WAAW,GAAA;AACV,WAAO,IAAI,CAAC,KAAK,MAAL,EAAD,CAAX;AACA;AAED;;;;;AAKG;;;AACH,EAAA,SAAS,CAAC,QAAD,EAAmB;AAC3B,WAAO,IAAI,SAAJ,CAAc,KAAK,OAAnB,EAA4B,KAAK,MAAL,KAAgB,QAA5C,CAAP;AACA;;AA5DqD;AA+DvD;;;AAGG;;AACH,OAAM,SAAU,IAAV,CAAe,KAAf,EAAkC,KAAlC,EAAuD;AAC5D,SAAO,IAAI,SAAJ,CAAc,UAAU,EAAxB,EAA4B,KAA5B,EAAmC,KAAnC,CAAP;AACA","sourceRoot":"","sourcesContent":["import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"MidiClass\";\n        this.defaultUnits = \"midi\";\n    }\n    /**\n     * Returns the value of a frequency in the current units\n     */\n    _frequencyToUnits(freq) {\n        return ftom(super._frequencyToUnits(freq));\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return ftom(super._ticksToUnits(ticks));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return ftom(super._beatsToUnits(beats));\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return ftom(super._secondsToUnits(seconds));\n    }\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Midi(60).toMidi(); // 60\n     */\n    toMidi() {\n        return this.valueOf();\n    }\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Midi(60).toFrequency(); // 261.6255653005986\n     */\n    toFrequency() {\n        return mtof(this.toMidi());\n    }\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return A new transposed MidiClass\n     * @example\n     * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n     */\n    transpose(interval) {\n        return new MidiClass(this.context, this.toMidi() + interval);\n    }\n}\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value, units) {\n    return new MidiClass(getContext(), value, units);\n}\n//# sourceMappingURL=Midi.js.map"]},"metadata":{},"sourceType":"module"}