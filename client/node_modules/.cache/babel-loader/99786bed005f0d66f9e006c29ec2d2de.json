{"ast":null,"code":"// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\n//import { SideNav } from '../SideNav';\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const matthewMadore_Visual = new Visualizer('matthewMadore', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  p5.background(0, 0, 0, 255); // p5.stroke(255, 255, 255, 255);\n\n  p5.angleMode('degrees');\n  const values = analyzer.getValue(); // AVERAGE IS 0\n\n  p5.translate(width / 2, height / 2);\n  const radiusRange = 50; // r - 50px and r + 50px will be range for waveform\n\n  const radiusCenter = 50;\n  p5.noFill();\n\n  for (let j = 1; j <= 3; j++) {\n    p5.stroke(255, 255 - 85 * j, 255 - 90 * j, 255);\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i];\n      const angle = p5.map(i, 0, values.length - 1, 0, 359);\n      let radius = p5.map(amplitude, -1, 1, radiusCenter - radiusRange, radiusCenter + radiusRange);\n      radius *= j;\n      let x = radius * Math.cos(angle);\n      let y = radius * Math.sin(angle); // Place vertex-\n\n      p5.vertex(x, y);\n    }\n\n    p5.endShape();\n  }\n}); // const average = (array:number[]) => array.reduce((a:number, b:number) => a + b) / values.length;\n// const numArr: number[] = values.map(value => value as number) as number[]\n// console.log(typeof(values[0]))\n// console.log(average(numArr))","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/matthewMadore_Visual.tsx"],"names":["Visualizer","matthewMadore_Visual","p5","analyzer","width","window","innerWidth","height","innerHeight","background","angleMode","values","getValue","translate","radiusRange","radiusCenter","noFill","j","stroke","beginShape","i","length","amplitude","angle","map","radius","x","Math","cos","y","sin","vertex","endShape"],"mappings":"AAAA;AACA;AAGA;AAGA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAGA,OAAO,MAAMC,oBAAoB,GAAG,IAAID,UAAJ,CAClC,eADkC,EAElC,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC;AAEAN,EAAAA,EAAE,CAACO,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,EAJmC,CAKnC;;AAEAP,EAAAA,EAAE,CAACQ,SAAH,CAAa,SAAb;AACA,QAAMC,MAAM,GAAGR,QAAQ,CAACS,QAAT,EAAf,CARmC,CASnC;;AACAV,EAAAA,EAAE,CAACW,SAAH,CAAaT,KAAK,GAAG,CAArB,EAAwBG,MAAM,GAAG,CAAjC;AACA,QAAMO,WAAW,GAAG,EAApB,CAXmC,CAWX;;AACxB,QAAMC,YAAY,GAAG,EAArB;AAEAb,EAAAA,EAAE,CAACc,MAAH;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1Bf,IAAAA,EAAE,CAACgB,MAAH,CAAU,GAAV,EAAe,MAAK,KAAGD,CAAvB,EAA2B,MAAK,KAAGA,CAAnC,EAAuC,GAAvC;AACAf,IAAAA,EAAE,CAACiB,UAAH;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACU,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAME,SAAS,GAAGX,MAAM,CAACS,CAAD,CAAxB;AACA,YAAMG,KAAK,GAAGrB,EAAE,CAACsB,GAAH,CAAOJ,CAAP,EAAU,CAAV,EAAaT,MAAM,CAACU,MAAP,GAAgB,CAA7B,EAAgC,CAAhC,EAAmC,GAAnC,CAAd;AACA,UAAII,MAAM,GAAGvB,EAAE,CAACsB,GAAH,CAAOF,SAAP,EAAkB,CAAC,CAAnB,EAAqB,CAArB,EAAuBP,YAAY,GAACD,WAApC,EAAiDC,YAAY,GAACD,WAA9D,CAAb;AACAW,MAAAA,MAAM,IAAIR,CAAV;AACA,UAAIS,CAAC,GAAGD,MAAM,GAAGE,IAAI,CAACC,GAAL,CAASL,KAAT,CAAjB;AACA,UAAIM,CAAC,GAAGJ,MAAM,GAAGE,IAAI,CAACG,GAAL,CAASP,KAAT,CAAjB,CANsC,CAOtC;;AACArB,MAAAA,EAAE,CAAC6B,MAAH,CAAUL,CAAV,EAAaG,CAAb;AACD;;AACD3B,IAAAA,EAAE,CAAC8B,QAAH;AACD;AACF,CAhCiC,CAA7B,C,CAsCL;AACA;AACA;AACA","sourcesContent":["// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n//import { SideNav } from '../SideNav';\n\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\n\nexport const matthewMadore_Visual = new Visualizer(\n  'matthewMadore',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n\n    p5.background(0, 0, 0, 255);\n    // p5.stroke(255, 255, 255, 255);\n\n    p5.angleMode('degrees');\n    const values = analyzer.getValue();\n    // AVERAGE IS 0\n    p5.translate(width / 2, height / 2);\n    const radiusRange = 50; // r - 50px and r + 50px will be range for waveform\n    const radiusCenter = 50;\n\n    p5.noFill();\n    for(let j = 1; j <= 3; j++ ){\n      p5.stroke(255, 255-(85*j), 255-(90*j), 255);\n      p5.beginShape();\n      for (let i = 0; i < values.length; i++) {\n        const amplitude = values[i] as number;\n        const angle = p5.map(i, 0, values.length - 1, 0, 359);\n        let radius = p5.map(amplitude, -1,1,radiusCenter-radiusRange, radiusCenter+radiusRange )\n        radius *= j;\n        let x = radius * Math.cos(angle);\n        let y = radius * Math.sin(angle);\n        // Place vertex-\n        p5.vertex(x, y);\n      }\n      p5.endShape();\n    }\n  },\n  );\n\n\n\n\n  // const average = (array:number[]) => array.reduce((a:number, b:number) => a + b) / values.length;\n  // const numArr: number[] = values.map(value => value as number) as number[]\n  // console.log(typeof(values[0]))\n  // console.log(average(numArr))"]},"metadata":{},"sourceType":"module"}