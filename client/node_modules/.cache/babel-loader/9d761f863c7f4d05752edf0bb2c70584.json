{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\n\nexport class Follower extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Follower\";\n    const options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    this._abs = this.input = new Abs({\n      context: this.context\n    });\n    this._lowpass = this.output = new OnePoleFilter({\n      context: this.context,\n      frequency: 1 / this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n\n    this._abs.connect(this._lowpass);\n\n    this._smoothing = options.smoothing;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.05\n    });\n  }\n  /**\n   * The amount of time it takes a value change to arrive at the updated value.\n   */\n\n\n  get smoothing() {\n    return this._smoothing;\n  }\n\n  set smoothing(smoothing) {\n    this._smoothing = smoothing;\n    this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._abs.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/analysis/Follower.ts"],"names":[],"mappings":"AACA,SAAgC,aAAhC,QAA2E,kCAA3E;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,aAAT,QAA8B,yBAA9B;AACA,SAAS,GAAT,QAAoB,kBAApB;AAMA;;;;;;;;;AASG;;AACH,OAAM,MAAO,QAAP,SAAwB,aAAxB,CAAsD;AA2B3D,EAAA,WAAA,GAAA;AACC,UAAM,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAA1B;AA1BQ,SAAA,IAAA,GAAe,UAAf;AA2BR,UAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAApC;AAEA,SAAK,IAAL,GAAY,KAAK,KAAL,GAAa,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAR,CAAzB;AACA,SAAK,QAAL,GAAgB,KAAK,MAAL,GAAc,IAAI,aAAJ,CAAkB;AAC/C,MAAA,OAAO,EAAE,KAAK,OADiC;AAE/C,MAAA,SAAS,EAAE,IAAI,KAAK,SAAL,CAAe,OAAO,CAAC,SAAvB,CAFgC;AAG/C,MAAA,IAAI,EAAE;AAHyC,KAAlB,CAA9B;;AAKA,SAAK,IAAL,CAAU,OAAV,CAAkB,KAAK,QAAvB;;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,SAA1B;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE;AADsC,KAA3C,CAAP;AAGA;AAED;;AAEG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,KAAK,UAAZ;AACA;;AACY,MAAT,SAAS,CAAC,SAAD,EAAU;AACtB,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,QAAL,CAAc,SAAd,GAA0B,IAAI,KAAK,SAAL,CAAe,KAAK,SAApB,CAA9B;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,WAAO,IAAP;AACA;;AA/D0D","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n        this.name = \"Follower\";\n        const options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n        this._abs = this.input = new Abs({ context: this.context });\n        this._lowpass = this.output = new OnePoleFilter({\n            context: this.context,\n            frequency: 1 / this.toSeconds(options.smoothing),\n            type: \"lowpass\"\n        });\n        this._abs.connect(this._lowpass);\n        this._smoothing = options.smoothing;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            smoothing: 0.05\n        });\n    }\n    /**\n     * The amount of time it takes a value change to arrive at the updated value.\n     */\n    get smoothing() {\n        return this._smoothing;\n    }\n    set smoothing(smoothing) {\n        this._smoothing = smoothing;\n        this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n    }\n    dispose() {\n        super.dispose();\n        this._abs.dispose();\n        this._lowpass.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Follower.js.map"]},"metadata":{},"sourceType":"module"}