{"ast":null,"code":"import { io as newSocket } from 'socket.io-client';\nconst SOCKET_URL = 'ws://localhost:3001';\nconst SOCKET_OPTS = {\n  transports: ['websocket'],\n  path: '/ws',\n  autoConnect: true,\n  reconnection: true,\n  timeout: 10000\n};\nlet idCounter = 1;\nexport async function send(socket, name, msg) {\n  const _id = idCounter++;\n\n  return new Promise((resolve, reject) => {\n    socket.once(`${name}.${_id}`, resp => {\n      const {\n        error,\n        ...success\n      } = resp;\n\n      if (success) {\n        resolve(success);\n      } else {\n        reject(error);\n      }\n    });\n    socket.emit(name, {\n      _id,\n      ...msg\n    });\n  });\n}\nexport function initializeSocket(onConnect, onDisconnect) {\n  const socket = newSocket(SOCKET_URL, SOCKET_OPTS);\n  socket.on('connect', () => onConnect(socket));\n  socket.on('disconnect', onDisconnect);\n  return socket;\n}","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Socket.tsx"],"names":["io","newSocket","SOCKET_URL","SOCKET_OPTS","transports","path","autoConnect","reconnection","timeout","idCounter","send","socket","name","msg","_id","Promise","resolve","reject","once","resp","error","success","emit","initializeSocket","onConnect","onDisconnect","on"],"mappings":"AAAA,SAASA,EAAE,IAAIC,SAAf,QAAoD,kBAApD;AAEA,MAAMC,UAAU,GAAG,qBAAnB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,UAAU,EAAE,CAAC,WAAD,CADM;AAElBC,EAAAA,IAAI,EAAE,KAFY;AAGlBC,EAAAA,WAAW,EAAE,IAHK;AAIlBC,EAAAA,YAAY,EAAE,IAJI;AAKlBC,EAAAA,OAAO,EAAE;AALS,CAApB;AAQA,IAAIC,SAAS,GAAG,CAAhB;AAEA,OAAO,eAAeC,IAAf,CACLC,MADK,EAELC,IAFK,EAGLC,GAHK,EAIS;AACd,QAAMC,GAAG,GAAGL,SAAS,EAArB;;AAEA,SAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,MAAM,CAACO,IAAP,CAAa,GAAEN,IAAK,IAAGE,GAAI,EAA3B,EAA8BK,IAAI,IAAI;AACpC,YAAM;AAAEC,QAAAA,KAAF;AAAS,WAAGC;AAAZ,UAAwBF,IAA9B;;AACA,UAAIE,OAAJ,EAAa;AACXL,QAAAA,OAAO,CAACK,OAAD,CAAP;AACD,OAFD,MAEO;AACLJ,QAAAA,MAAM,CAACG,KAAD,CAAN;AACD;AACF,KAPD;AAQAT,IAAAA,MAAM,CAACW,IAAP,CAAYV,IAAZ,EAAkB;AAAEE,MAAAA,GAAF;AAAO,SAAGD;AAAV,KAAlB;AACD,GAVM,CAAP;AAWD;AAKD,OAAO,SAASU,gBAAT,CACLC,SADK,EAELC,YAFK,EAGG;AACR,QAAMd,MAAM,GAAGV,SAAS,CAACC,UAAD,EAAaC,WAAb,CAAxB;AAEAQ,EAAAA,MAAM,CAACe,EAAP,CAAU,SAAV,EAAqB,MAAMF,SAAS,CAACb,MAAD,CAApC;AACAA,EAAAA,MAAM,CAACe,EAAP,CAAU,YAAV,EAAwBD,YAAxB;AAEA,SAAOd,MAAP;AACD","sourcesContent":["import { io as newSocket, Socket as SocketIO } from 'socket.io-client';\n\nconst SOCKET_URL = 'ws://localhost:3001';\n\nconst SOCKET_OPTS = {\n  transports: ['websocket'],\n  path: '/ws',\n  autoConnect: true,\n  reconnection: true,\n  timeout: 10000,\n};\n\nlet idCounter = 1;\n\nexport async function send(\n  socket: Socket,\n  name: string,\n  msg: any,\n): Promise<any> {\n  const _id = idCounter++;\n\n  return new Promise((resolve, reject) => {\n    socket.once(`${name}.${_id}`, resp => {\n      const { error, ...success } = resp;\n      if (success) {\n        resolve(success);\n      } else {\n        reject(error);\n      }\n    });\n    socket.emit(name, { _id, ...msg });\n  });\n}\n\n\nexport type Socket = SocketIO;\n\nexport function initializeSocket(\n  onConnect: (socket: Socket) => void,\n  onDisconnect: () => void,\n): Socket {\n  const socket = newSocket(SOCKET_URL, SOCKET_OPTS);\n\n  socket.on('connect', () => onConnect(socket));\n  socket.on('disconnect', onDisconnect);\n\n  return socket;\n}\n"]},"metadata":{},"sourceType":"module"}