{"ast":null,"code":"// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    }); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isEmittingMessageEvents = false;\n    let isEmittingProcessorErrorEvents = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n\n      audioWorkletNode.port.onmessage = () => isEmittingMessageEvents = true;\n\n      audioWorkletNode.onprocessorerror = () => isEmittingProcessorErrorEvents = true;\n\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n    } catch {// Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n\n    return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/test-audio-worklet-processor-post-message-support.ts"],"names":[],"mappings":"AAEA;AACA,OAAO,MAAM,iDAAiD,GAAwD,CAClH,iCADkH,EAElH,oCAFkH,KAGlH;AACA,SAAO,YAAW;AACd;AACA,QAAI,iCAAiC,KAAK,IAA1C,EAAgD;AAC5C,aAAO,IAAP;AACH;;AAED,QAAI,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,aAAO,KAAP;AACH;;AAED,UAAM,IAAI,GAAG,IAAI,IAAJ,CACT,CAAC,sHAAD,CADS,EAET;AACI,MAAA,IAAI,EAAE;AADV,KAFS,CAAb,CAVc,CAgBd;;AACA,UAAM,mBAAmB,GAAG,IAAI,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,KAAjD,CAA5B;AACA,UAAM,GAAG,GAAG,GAAG,CAAC,eAAJ,CAAoB,IAApB,CAAZ;AAEA,QAAI,uBAAuB,GAAG,KAA9B;AACA,QAAI,8BAA8B,GAAG,KAArC;;AAEA,QAAI;AACA,YAAM,mBAAmB,CAAC,YAApB,CAAiC,SAAjC,CAA2C,GAA3C,CAAN;AAEA,YAAM,gBAAgB,GAAG,IAAI,iCAAJ,CAAsC,mBAAtC,EAA2D,GAA3D,EAAgE;AAAE,QAAA,eAAe,EAAE;AAAnB,OAAhE,CAAzB;AACA,YAAM,UAAU,GAAG,mBAAmB,CAAC,gBAApB,EAAnB;;AAEA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,GAAkC,MAAO,uBAAuB,GAAG,IAAnE;;AACA,MAAA,gBAAgB,CAAC,gBAAjB,GAAoC,MAAO,8BAA8B,GAAG,IAA5E;;AAEA,MAAA,UAAU,CAAC,OAAX,CAAmB,gBAAnB;AACA,MAAA,UAAU,CAAC,KAAX,CAAiB,CAAjB;AAEA,YAAM,mBAAmB,CAAC,cAApB,EAAN;AACH,KAbD,CAaE,MAAM,CACJ;AACH,KAfD,SAeU;AACN,MAAA,GAAG,CAAC,eAAJ,CAAoB,GAApB;AACH;;AAED,WAAO,uBAAuB,IAAI,CAAC,8BAAnC;AACH,GA3CD;AA4CH,CAhDM","sourceRoot":"","sourcesContent":["// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            await offlineAudioContext.startRendering();\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            URL.revokeObjectURL(url);\n        }\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n//# sourceMappingURL=test-audio-worklet-processor-post-message-support.js.map"]},"metadata":{},"sourceType":"module"}