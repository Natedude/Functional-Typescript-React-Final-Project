{"ast":null,"code":"import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\n\nexport class Distortion extends Effect {\n  constructor() {\n    super(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n    this.name = \"Distortion\";\n    const options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    this._shaper = new WaveShaper({\n      context: this.context,\n      length: 4096\n    });\n    this._distortion = options.distortion;\n    this.connectEffect(this._shaper);\n    this.distortion = options.distortion;\n    this.oversample = options.oversample;\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      distortion: 0.4,\n      oversample: \"none\"\n    });\n  }\n  /**\n   * The amount of distortion. Nominal range is between 0 and 1.\n   */\n\n\n  get distortion() {\n    return this._distortion;\n  }\n\n  set distortion(amount) {\n    this._distortion = amount;\n    const k = amount * 100;\n    const deg = Math.PI / 180;\n\n    this._shaper.setMap(x => {\n      if (Math.abs(x) < 0.001) {\n        // should output 0 when input is 0\n        return 0;\n      } else {\n        return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n      }\n    });\n  }\n  /**\n   * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n   */\n\n\n  get oversample() {\n    return this._shaper.oversample;\n  }\n\n  set oversample(oversampling) {\n    this._shaper.oversample = oversampling;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._shaper.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/Distortion.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,UAAT,QAA2B,sBAA3B;AACA,SAAS,MAAT,QAAsC,UAAtC;AAOA;;;;;;;;;AASG;;AACH,OAAM,MAAO,UAAP,SAA0B,MAA1B,CAAmD;AAmBxD,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAA1B;AAnBQ,SAAA,IAAA,GAAe,YAAf;AAoBR,UAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAApC;AAEA,SAAK,OAAL,GAAe,IAAI,UAAJ,CAAe;AAC7B,MAAA,OAAO,EAAE,KAAK,OADe;AAE7B,MAAA,MAAM,EAAE;AAFqB,KAAf,CAAf;AAKA,SAAK,WAAL,GAAmB,OAAO,CAAC,UAA3B;AAEA,SAAK,aAAL,CAAmB,KAAK,OAAxB;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,UAAU,EAAE,GAD8B;AAE1C,MAAA,UAAU,EAAE;AAF8B,KAApC,CAAP;AAIA;AAED;;AAEG;;;AACW,MAAV,UAAU,GAAA;AACb,WAAO,KAAK,WAAZ;AACA;;AACa,MAAV,UAAU,CAAC,MAAD,EAAO;AACpB,SAAK,WAAL,GAAmB,MAAnB;AACA,UAAM,CAAC,GAAG,MAAM,GAAG,GAAnB;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,EAAL,GAAU,GAAtB;;AACA,SAAK,OAAL,CAAa,MAAb,CAAqB,CAAD,IAAM;AACzB,UAAI,IAAI,CAAC,GAAL,CAAS,CAAT,IAAc,KAAlB,EAAyB;AACxB;AACA,eAAO,CAAP;AACA,OAHD,MAGO;AACN,eAAO,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,EAAd,GAAmB,GAAnB,IAA0B,IAAI,CAAC,EAAL,GAAU,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAxC,CAAP;AACA;AACD,KAPD;AAQA;AAED;;AAEG;;;AACW,MAAV,UAAU,GAAA;AACb,WAAO,KAAK,OAAL,CAAa,UAApB;AACA;;AACa,MAAV,UAAU,CAAC,YAAD,EAAa;AAC1B,SAAK,OAAL,CAAa,UAAb,GAA0B,YAA1B;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,WAAO,IAAP;AACA;;AA7EuD","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect {\n    constructor() {\n        super(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n        this.name = \"Distortion\";\n        const options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n        this._shaper = new WaveShaper({\n            context: this.context,\n            length: 4096,\n        });\n        this._distortion = options.distortion;\n        this.connectEffect(this._shaper);\n        this.distortion = options.distortion;\n        this.oversample = options.oversample;\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            distortion: 0.4,\n            oversample: \"none\",\n        });\n    }\n    /**\n     * The amount of distortion. Nominal range is between 0 and 1.\n     */\n    get distortion() {\n        return this._distortion;\n    }\n    set distortion(amount) {\n        this._distortion = amount;\n        const k = amount * 100;\n        const deg = Math.PI / 180;\n        this._shaper.setMap((x) => {\n            if (Math.abs(x) < 0.001) {\n                // should output 0 when input is 0\n                return 0;\n            }\n            else {\n                return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n            }\n        });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get oversample() {\n        return this._shaper.oversample;\n    }\n    set oversample(oversampling) {\n        this._shaper.oversample = oversampling;\n    }\n    dispose() {\n        super.dispose();\n        this._shaper.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Distortion.js.map"]},"metadata":{},"sourceType":"module"}