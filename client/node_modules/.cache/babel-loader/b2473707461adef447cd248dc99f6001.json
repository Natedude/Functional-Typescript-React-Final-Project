{"ast":null,"code":"var _jsxFileName = \"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Natedude_Instrument.tsx\",\n    _s2 = $RefreshSig$();\n\n// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\n// import React from 'react';\nimport React, { useState } from 'react'; // project imports\n\nimport { Instrument } from '../Instruments';\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PianoKey({\n  note,\n  synth,\n  minor,\n  index\n}) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n  //TODO: make a function that takes in a kit name and returns [sampler, setSampler] ?\n  // eslint-disable-next-line\n  function makeSampler(newKit) {\n    _s();\n\n    const [sampler, setSampler] = useState(new Tone.Sampler({\n      urls: newKit.urls,\n      baseUrl: `http://localhost:3000/${urlPrefix}${newKit.prefix}`\n    }).toDestination());\n    return [sampler, setSampler];\n  }\n\n  _s(makeSampler, \"vtHU2EfOQzslonKGEFqUlCyaRUU=\");\n\n  var [sampler, setSampler] = makeSampler(getDrumKitProps());\n  const [num, setNum] = useState(1);\n  console.log(`num is ${num}`); // 1\n\n  setNum(num + 1);\n  console.log(`num is ${num}`); // 2\n\n  return (\n    /*#__PURE__*/\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    _jsxDEV(\"div\", {\n      onMouseDown: () => sampler.triggerAttack('A1') // Question: what is `onMouseDown`?\n      ,\n      onMouseUp: () => sampler.triggerRelease('+0.25') // Question: what is `onMouseUp`?\n      ,\n      className: classNames('ba pointer absolute dim', {\n        'bg-blue green h3': minor,\n        // minor keys are black\n        'red bg-yellow h4': !minor // major keys are white\n\n      }),\n      style: {\n        // CSS\n        top: 0,\n        left: `${index * 2}rem`,\n        zIndex: minor ? 1 : 0,\n        width: minor ? '1.5rem' : '2rem',\n        marginLeft: minor ? '0.25rem' : 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s2(PianoKey, \"I0Pgfki637pTZHI9YocBHVtzv7U=\");\n\n_c = PianoKey;\n\nfunction PianoType({\n  title,\n  onClick,\n  active\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1', {\n      'b--red green': active,\n      'gray b--light-gray': !active\n    }),\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = PianoType;\nconst urlPrefix = 'Natedude/';\n\nfunction getDrumKitProps() {\n  return {\n    name: 'Kurzweil Kit 01',\n    prefix: 'Kurzweil_Kit_01/',\n    kitNum: 0,\n    urls: {\n      kick: 'CYCdh_Kurz01-Kick03.wav',\n      snare: 'CYCdh_Kurz01-Snr02.wav',\n      highHat: 'CYCdh_Kurz01-ClHat.wav',\n      tomLeft: 'CYCdh_Kurz01-Tom01.wav',\n      tomRight: 'CYCdh_Kurz01-Tom02.wav',\n      crash: 'CYCdh_Kurz01-Crash01.wav',\n      ride: 'CYCdh_Kurz01-Ride01.wav'\n    }\n  };\n}\n\n; //  Object.keys(drumKits)\n\nfunction DrumKit({\n  synth,\n  setSynth\n}) {\n  // drumPieces instead of keys\n  //setDrumKit\n  const setOscillator = newType => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n      return new Tone.Synth({\n        oscillator: {\n          type: newType\n        }\n      }).toDestination();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pv4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative dib h4 w-100 ml4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'pl4 pt4 flex'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = DrumKit;\nexport const Natedude_Instrument = new Instrument('Natedude_Instrument', DrumKit);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PianoKey\");\n$RefreshReg$(_c2, \"PianoType\");\n$RefreshReg$(_c3, \"DrumKit\");","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Natedude_Instrument.tsx"],"names":["Tone","classNames","React","useState","Instrument","PianoKey","note","synth","minor","index","makeSampler","newKit","sampler","setSampler","Sampler","urls","baseUrl","urlPrefix","prefix","toDestination","getDrumKitProps","num","setNum","console","log","triggerAttack","triggerRelease","top","left","zIndex","width","marginLeft","PianoType","title","onClick","active","name","kitNum","kick","snare","highHat","tomLeft","tomRight","crash","ride","DrumKit","setSynth","setOscillator","newType","oldSynth","disconnect","Synth","oscillator","type","Natedude_Instrument"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List, Range } from 'immutable';\n// import React from 'react';\nimport React, { useState } from 'react';\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments';\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\n\n\ninterface PianoKeyProps {\n  note: string; // C, Db, D, Eb, E, F, Gb, G, Ab, A, Bb, B\n  duration?: string;\n  synth?: Tone.Synth; // Contains library code for making sound\n  minor?: boolean; // True if minor key, false if major key\n  octave: number;\n  index: number; // octave + index together give a location for the piano key\n}\n\nexport function PianoKey({\n  note,\n  synth,\n  minor,\n  index,\n}: PianoKeyProps): JSX.Element {\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n\n  //TODO: make a function that takes in a kit name and returns [sampler, setSampler] ?\n  // eslint-disable-next-line\n\n\n  function makeSampler(newKit: DrumKitProps){\n    const [sampler, setSampler] = useState(\n      new Tone.Sampler({\n        urls: newKit.urls,\n        baseUrl: `http://localhost:3000/${urlPrefix}${newKit.prefix}`,\n      }).toDestination()\n    );\n    return [sampler, setSampler];\n  }\n  var [sampler, setSampler] = makeSampler(getDrumKitProps())\n\n  const [num, setNum] = useState(1)\n  console.log(`num is ${num}`) // 1\n  setNum(num + 1);\n  console.log(`num is ${num}`) // 2\n\n  return (\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    <div\n      onMouseDown={() => sampler.triggerAttack('A1')} // Question: what is `onMouseDown`?\n      onMouseUp={() => sampler.triggerRelease('+0.25')} // Question: what is `onMouseUp`?\n      className={classNames('ba pointer absolute dim', {\n        'bg-blue green h3': minor, // minor keys are black\n        'red bg-yellow h4': !minor, // major keys are white\n      })}\n      style={{\n        // CSS\n        top: 0,\n        left: `${index * 2}rem`,\n        zIndex: minor ? 1 : 0,\n        width: minor ? '1.5rem' : '2rem',\n        marginLeft: minor ? '0.25rem' : 0,\n      }}\n    ></div>\n  );\n}\n\nfunction PianoType({ title, onClick, active }: any): JSX.Element {\n  return (\n    <div\n      onClick={onClick}\n      className={classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1', {\n        'b--red green': active,\n        'gray b--light-gray': !active,\n      })}\n    >\n      {title}\n    </div>\n  );\n}\n\ninterface DrumKitProps {\n  name: string;\n  prefix: string;\n  kitNum: number;\n  urls: {\n    kick: string; // kick\n    snare: string; //snare\n    highHat: string; //highHat\n    tomLeft: string; //tomLeft\n    tomRight: string;\n    crash: string;\n    ride: string;\n  }\n  // color: string;\n}\n\nconst urlPrefix = 'Natedude/'\nfunction getDrumKitProps(){\n  return {\n    name: 'Kurzweil Kit 01',\n    prefix: 'Kurzweil_Kit_01/',\n    kitNum: 0,\n    urls: {\n      kick: 'CYCdh_Kurz01-Kick03.wav',\n      snare: 'CYCdh_Kurz01-Snr02.wav',\n      highHat: 'CYCdh_Kurz01-ClHat.wav',\n      tomLeft: 'CYCdh_Kurz01-Tom01.wav',\n      tomRight: 'CYCdh_Kurz01-Tom02.wav',\n      crash: 'CYCdh_Kurz01-Crash01.wav',\n      ride: 'CYCdh_Kurz01-Ride01.wav'\n    }\n  } as DrumKitProps;\n};\n//  Object.keys(drumKits)\n\nfunction DrumKit({ synth, setSynth }: InstrumentProps): JSX.Element {\n\n  // drumPieces instead of keys\n\n  //setDrumKit\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n\n      return new Tone.Synth({\n        oscillator: { type: newType } as Tone.OmniOscillatorOptions,\n      }).toDestination();\n    });\n  };\n\n  return (\n    <div className=\"pv4\">\n      <div className=\"relative dib h4 w-100 ml4\">\n        {}\n      </div>\n      <div className={'pl4 pt4 flex'}>\n        {}\n      </div>\n    </div>\n  );\n}\n\nexport const Natedude_Instrument = new Instrument('Natedude_Instrument', DrumKit);\n"]},"metadata":{},"sourceType":"module"}