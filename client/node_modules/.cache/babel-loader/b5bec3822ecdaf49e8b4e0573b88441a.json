{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\n\nexport class MidSideEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"MidSideEffect\";\n    this._midSideMerge = new MidSideMerge({\n      context: this.context\n    });\n    this._midSideSplit = new MidSideSplit({\n      context: this.context\n    });\n    this._midSend = this._midSideSplit.mid;\n    this._sideSend = this._midSideSplit.side;\n    this._midReturn = this._midSideMerge.mid;\n    this._sideReturn = this._midSideMerge.side; // the connections\n\n    this.effectSend.connect(this._midSideSplit);\n\n    this._midSideMerge.connect(this.effectReturn);\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  connectEffectMid(...nodes) {\n    this._midSend.chain(...nodes, this._midReturn);\n  }\n  /**\n   * Connect the side chain of the effect\n   */\n\n\n  connectEffectSide(...nodes) {\n    this._sideSend.chain(...nodes, this._sideReturn);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    this._midSend.dispose();\n\n    this._sideSend.dispose();\n\n    this._midReturn.dispose();\n\n    this._sideReturn.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/MidSideEffect.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAsC,UAAtC;AACA,SAAS,YAAT,QAA6B,mCAA7B;AACA,SAAS,YAAT,QAA6B,mCAA7B;AAKA;;;;;;;;;AASG;;AACH,OAAM,MAAgB,aAAhB,SAA4E,MAA5E,CAA2F;AAkChG,EAAA,WAAA,CAAY,OAAZ,EAAyC;AAExC,UAAM,OAAN;AAlCQ,SAAA,IAAA,GAAe,eAAf;AAoCR,SAAK,aAAL,GAAqB,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAjB,CAArB;AACA,SAAK,aAAL,GAAqB,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAjB,CAArB;AACA,SAAK,QAAL,GAAgB,KAAK,aAAL,CAAmB,GAAnC;AACA,SAAK,SAAL,GAAiB,KAAK,aAAL,CAAmB,IAApC;AACA,SAAK,UAAL,GAAkB,KAAK,aAAL,CAAmB,GAArC;AACA,SAAK,WAAL,GAAmB,KAAK,aAAL,CAAmB,IAAtC,CATwC,CAWxC;;AACA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,aAA7B;;AACA,SAAK,aAAL,CAAmB,OAAnB,CAA2B,KAAK,YAAhC;AACA;AAED;;AAEG;;;AACO,EAAA,gBAAgB,CAAC,GAAG,KAAJ,EAAuB;AAChD,SAAK,QAAL,CAAc,KAAd,CAAoB,GAAG,KAAvB,EAA8B,KAAK,UAAnC;AACA;AAED;;AAEG;;;AACO,EAAA,iBAAiB,CAAC,GAAG,KAAJ,EAAuB;AACjD,SAAK,SAAL,CAAe,KAAf,CAAqB,GAAG,KAAxB,EAA+B,KAAK,WAApC;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,aAAL,CAAmB,OAAnB;;AACA,SAAK,aAAL,CAAmB,OAAnB;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,WAAO,IAAP;AACA;;AAzE+F","sourceRoot":"","sourcesContent":["import { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport class MidSideEffect extends Effect {\n    constructor(options) {\n        super(options);\n        this.name = \"MidSideEffect\";\n        this._midSideMerge = new MidSideMerge({ context: this.context });\n        this._midSideSplit = new MidSideSplit({ context: this.context });\n        this._midSend = this._midSideSplit.mid;\n        this._sideSend = this._midSideSplit.side;\n        this._midReturn = this._midSideMerge.mid;\n        this._sideReturn = this._midSideMerge.side;\n        // the connections\n        this.effectSend.connect(this._midSideSplit);\n        this._midSideMerge.connect(this.effectReturn);\n    }\n    /**\n     * Connect the mid chain of the effect\n     */\n    connectEffectMid(...nodes) {\n        this._midSend.chain(...nodes, this._midReturn);\n    }\n    /**\n     * Connect the side chain of the effect\n     */\n    connectEffectSide(...nodes) {\n        this._sideSend.chain(...nodes, this._sideReturn);\n    }\n    dispose() {\n        super.dispose();\n        this._midSideSplit.dispose();\n        this._midSideMerge.dispose();\n        this._midSend.dispose();\n        this._sideSend.dispose();\n        this._midReturn.dispose();\n        this._sideReturn.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MidSideEffect.js.map"]},"metadata":{},"sourceType":"module"}