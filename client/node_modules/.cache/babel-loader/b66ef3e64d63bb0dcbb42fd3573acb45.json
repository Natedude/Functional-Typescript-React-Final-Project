{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\nimport { assert } from \"../util/Debug\";\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\n\nexport class ToneAudioBuffer extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffer\";\n    /**\n     * Callback when the buffer is loaded.\n     */\n\n    this.onload = noOp;\n    const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n    this.reverse = options.reverse;\n    this.onload = options.onload;\n\n    if (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n      this.set(options.url);\n    } else if (isString(options.url)) {\n      // initiate the download\n      this.load(options.url).catch(options.onerror);\n    }\n  }\n\n  static getDefaults() {\n    return {\n      onerror: noOp,\n      onload: noOp,\n      reverse: false\n    };\n  }\n  /**\n   * The sample rate of the AudioBuffer\n   */\n\n\n  get sampleRate() {\n    if (this._buffer) {\n      return this._buffer.sampleRate;\n    } else {\n      return getContext().sampleRate;\n    }\n  }\n  /**\n   * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n   */\n\n\n  set(buffer) {\n    if (buffer instanceof ToneAudioBuffer) {\n      // if it's loaded, set it\n      if (buffer.loaded) {\n        this._buffer = buffer.get();\n      } else {\n        // otherwise when it's loaded, invoke it's callback\n        buffer.onload = () => {\n          this.set(buffer);\n          this.onload(this);\n        };\n      }\n    } else {\n      this._buffer = buffer;\n    } // reverse it initially\n\n\n    if (this._reversed) {\n      this._reverse();\n    }\n\n    return this;\n  }\n  /**\n   * The audio buffer stored in the object.\n   */\n\n\n  get() {\n    return this._buffer;\n  }\n  /**\n   * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n   * Invokes the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   * @returns A Promise which resolves with this ToneAudioBuffer\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {\n        this.set(audioBuffer); // invoke the onload method\n\n        this.onload(this);\n      });\n      ToneAudioBuffer.downloads.push(doneLoading);\n\n      try {\n        yield doneLoading;\n      } finally {\n        // remove the downloaded file\n        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n        ToneAudioBuffer.downloads.splice(index, 1);\n      }\n\n      return this;\n    });\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._buffer = undefined;\n    return this;\n  }\n  /**\n   * Set the audio buffer from the array.\n   * To create a multichannel AudioBuffer, pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   */\n\n\n  fromArray(array) {\n    const isMultidimensional = isArray(array) && array[0].length > 0;\n    const channels = isMultidimensional ? array.length : 1;\n    const len = isMultidimensional ? array[0].length : array.length;\n    const context = getContext();\n    const buffer = context.createBuffer(channels, len, context.sampleRate);\n    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;\n\n    for (let c = 0; c < channels; c++) {\n      buffer.copyToChannel(multiChannelArray[c], c);\n    }\n\n    this._buffer = buffer;\n    return this;\n  }\n  /**\n   * Sums multiple channels into 1 channel\n   * @param chanNum Optionally only copy a single channel from the array.\n   */\n\n\n  toMono(chanNum) {\n    if (isNumber(chanNum)) {\n      this.fromArray(this.toArray(chanNum));\n    } else {\n      let outputArray = new Float32Array(this.length);\n      const numChannels = this.numberOfChannels;\n\n      for (let channel = 0; channel < numChannels; channel++) {\n        const channelArray = this.toArray(channel);\n\n        for (let i = 0; i < channelArray.length; i++) {\n          outputArray[i] += channelArray[i];\n        }\n      } // divide by the number of channels\n\n\n      outputArray = outputArray.map(sample => sample / numChannels);\n      this.fromArray(outputArray);\n    }\n\n    return this;\n  }\n  /**\n   * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n   * Float32Array, and multichannel buffers will return multidimensional arrays.\n   * @param channel Optionally only copy a single channel from the array.\n   */\n\n\n  toArray(channel) {\n    if (isNumber(channel)) {\n      return this.getChannelData(channel);\n    } else if (this.numberOfChannels === 1) {\n      return this.toArray(0);\n    } else {\n      const ret = [];\n\n      for (let c = 0; c < this.numberOfChannels; c++) {\n        ret[c] = this.getChannelData(c);\n      }\n\n      return ret;\n    }\n  }\n  /**\n   * Returns the Float32Array representing the PCM audio data for the specific channel.\n   * @param  channel  The channel number to return\n   * @return The audio as a TypedArray\n   */\n\n\n  getChannelData(channel) {\n    if (this._buffer) {\n      return this._buffer.getChannelData(channel);\n    } else {\n      return new Float32Array(0);\n    }\n  }\n  /**\n   * Cut a subsection of the array and return a buffer of the\n   * subsection. Does not modify the original buffer\n   * @param start The time to start the slice\n   * @param end The end time to slice. If none is given will default to the end of the buffer\n   */\n\n\n  slice(start, end = this.duration) {\n    const startSamples = Math.floor(start * this.sampleRate);\n    const endSamples = Math.floor(end * this.sampleRate);\n    assert(startSamples < endSamples, \"The start time must be less than the end time\");\n    const length = endSamples - startSamples;\n    const retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\n    for (let channel = 0; channel < this.numberOfChannels; channel++) {\n      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n    }\n\n    return new ToneAudioBuffer(retBuffer);\n  }\n  /**\n   * Reverse the buffer.\n   */\n\n\n  _reverse() {\n    if (this.loaded) {\n      for (let i = 0; i < this.numberOfChannels; i++) {\n        this.getChannelData(i).reverse();\n      }\n    }\n\n    return this;\n  }\n  /**\n   * If the buffer is loaded or not\n   */\n\n\n  get loaded() {\n    return this.length > 0;\n  }\n  /**\n   * The duration of the buffer in seconds.\n   */\n\n\n  get duration() {\n    if (this._buffer) {\n      return this._buffer.duration;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The length of the buffer in samples\n   */\n\n\n  get length() {\n    if (this._buffer) {\n      return this._buffer.length;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n   */\n\n\n  get numberOfChannels() {\n    if (this._buffer) {\n      return this._buffer.numberOfChannels;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Reverse the buffer.\n   */\n\n\n  get reverse() {\n    return this._reversed;\n  }\n\n  set reverse(rev) {\n    if (this._reversed !== rev) {\n      this._reversed = rev;\n\n      this._reverse();\n    }\n  }\n  /**\n   * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n   * pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   * @return A ToneAudioBuffer created from the array\n   */\n\n\n  static fromArray(array) {\n    return new ToneAudioBuffer().fromArray(array);\n  }\n  /**\n   * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n   * @param  url The url to load.\n   * @return A promise which resolves to a ToneAudioBuffer\n   */\n\n\n  static fromUrl(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const buffer = new ToneAudioBuffer();\n      return yield buffer.load(url);\n    });\n  }\n  /**\n   * Loads a url using fetch and returns the AudioBuffer.\n   */\n\n\n  static load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // test if the url contains multiple extensions\n      const matches = url.match(/\\[([^\\]\\[]+\\|.+)\\]$/);\n\n      if (matches) {\n        const extensions = matches[1].split(\"|\");\n        let extension = extensions[0];\n\n        for (const ext of extensions) {\n          if (ToneAudioBuffer.supportsType(ext)) {\n            extension = ext;\n            break;\n          }\n        }\n\n        url = url.replace(matches[0], extension);\n      } // make sure there is a slash between the baseUrl and the url\n\n\n      const baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n      const response = yield fetch(baseUrl + url);\n\n      if (!response.ok) {\n        throw new Error(`could not load url: ${url}`);\n      }\n\n      const arrayBuffer = yield response.arrayBuffer();\n      const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);\n      return audioBuffer;\n    });\n  }\n  /**\n   * Checks a url's extension to see if the current browser can play that file type.\n   * @param url The url/extension to test\n   * @return If the file extension can be played\n   * @static\n   * @example\n   * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n   * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n   */\n\n\n  static supportsType(url) {\n    const extensions = url.split(\".\");\n    const extension = extensions[extensions.length - 1];\n    const response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n    return response !== \"\";\n  }\n  /**\n   * Returns a Promise which resolves when all of the buffers have loaded\n   */\n\n\n  static loaded() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // this makes sure that the function is always async\n      yield Promise.resolve();\n\n      while (ToneAudioBuffer.downloads.length) {\n        yield ToneAudioBuffer.downloads[0];\n      }\n    });\n  }\n\n} //-------------------------------------\n// STATIC METHODS\n//-------------------------------------\n\n/**\n * A path which is prefixed before every url.\n */\n\nToneAudioBuffer.baseUrl = \"\";\n/**\n * All of the downloads\n */\n\nToneAudioBuffer.downloads = [];","map":{"version":3,"sources":["../../../../Tone/core/context/ToneAudioBuffer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\nimport { assert } from \"../util/Debug\";\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n    constructor() {\n        super();\n        this.name = \"ToneAudioBuffer\";\n        /**\n         * Callback when the buffer is loaded.\n         */\n        this.onload = noOp;\n        const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n        this.reverse = options.reverse;\n        this.onload = options.onload;\n        if (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n            this.set(options.url);\n        }\n        else if (isString(options.url)) {\n            // initiate the download\n            this.load(options.url).catch(options.onerror);\n        }\n    }\n    static getDefaults() {\n        return {\n            onerror: noOp,\n            onload: noOp,\n            reverse: false,\n        };\n    }\n    /**\n     * The sample rate of the AudioBuffer\n     */\n    get sampleRate() {\n        if (this._buffer) {\n            return this._buffer.sampleRate;\n        }\n        else {\n            return getContext().sampleRate;\n        }\n    }\n    /**\n     * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n     */\n    set(buffer) {\n        if (buffer instanceof ToneAudioBuffer) {\n            // if it's loaded, set it\n            if (buffer.loaded) {\n                this._buffer = buffer.get();\n            }\n            else {\n                // otherwise when it's loaded, invoke it's callback\n                buffer.onload = () => {\n                    this.set(buffer);\n                    this.onload(this);\n                };\n            }\n        }\n        else {\n            this._buffer = buffer;\n        }\n        // reverse it initially\n        if (this._reversed) {\n            this._reverse();\n        }\n        return this;\n    }\n    /**\n     * The audio buffer stored in the object.\n     */\n    get() {\n        return this._buffer;\n    }\n    /**\n     * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n     * Invokes the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     * @returns A Promise which resolves with this ToneAudioBuffer\n     */\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {\n                this.set(audioBuffer);\n                // invoke the onload method\n                this.onload(this);\n            });\n            ToneAudioBuffer.downloads.push(doneLoading);\n            try {\n                yield doneLoading;\n            }\n            finally {\n                // remove the downloaded file\n                const index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n                ToneAudioBuffer.downloads.splice(index, 1);\n            }\n            return this;\n        });\n    }\n    /**\n     * clean up\n     */\n    dispose() {\n        super.dispose();\n        this._buffer = undefined;\n        return this;\n    }\n    /**\n     * Set the audio buffer from the array.\n     * To create a multichannel AudioBuffer, pass in a multidimensional array.\n     * @param array The array to fill the audio buffer\n     */\n    fromArray(array) {\n        const isMultidimensional = isArray(array) && array[0].length > 0;\n        const channels = isMultidimensional ? array.length : 1;\n        const len = isMultidimensional ? array[0].length : array.length;\n        const context = getContext();\n        const buffer = context.createBuffer(channels, len, context.sampleRate);\n        const multiChannelArray = !isMultidimensional && channels === 1 ?\n            [array] : array;\n        for (let c = 0; c < channels; c++) {\n            buffer.copyToChannel(multiChannelArray[c], c);\n        }\n        this._buffer = buffer;\n        return this;\n    }\n    /**\n     * Sums multiple channels into 1 channel\n     * @param chanNum Optionally only copy a single channel from the array.\n     */\n    toMono(chanNum) {\n        if (isNumber(chanNum)) {\n            this.fromArray(this.toArray(chanNum));\n        }\n        else {\n            let outputArray = new Float32Array(this.length);\n            const numChannels = this.numberOfChannels;\n            for (let channel = 0; channel < numChannels; channel++) {\n                const channelArray = this.toArray(channel);\n                for (let i = 0; i < channelArray.length; i++) {\n                    outputArray[i] += channelArray[i];\n                }\n            }\n            // divide by the number of channels\n            outputArray = outputArray.map(sample => sample / numChannels);\n            this.fromArray(outputArray);\n        }\n        return this;\n    }\n    /**\n     * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n     * Float32Array, and multichannel buffers will return multidimensional arrays.\n     * @param channel Optionally only copy a single channel from the array.\n     */\n    toArray(channel) {\n        if (isNumber(channel)) {\n            return this.getChannelData(channel);\n        }\n        else if (this.numberOfChannels === 1) {\n            return this.toArray(0);\n        }\n        else {\n            const ret = [];\n            for (let c = 0; c < this.numberOfChannels; c++) {\n                ret[c] = this.getChannelData(c);\n            }\n            return ret;\n        }\n    }\n    /**\n     * Returns the Float32Array representing the PCM audio data for the specific channel.\n     * @param  channel  The channel number to return\n     * @return The audio as a TypedArray\n     */\n    getChannelData(channel) {\n        if (this._buffer) {\n            return this._buffer.getChannelData(channel);\n        }\n        else {\n            return new Float32Array(0);\n        }\n    }\n    /**\n     * Cut a subsection of the array and return a buffer of the\n     * subsection. Does not modify the original buffer\n     * @param start The time to start the slice\n     * @param end The end time to slice. If none is given will default to the end of the buffer\n     */\n    slice(start, end = this.duration) {\n        const startSamples = Math.floor(start * this.sampleRate);\n        const endSamples = Math.floor(end * this.sampleRate);\n        assert(startSamples < endSamples, \"The start time must be less than the end time\");\n        const length = endSamples - startSamples;\n        const retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n        for (let channel = 0; channel < this.numberOfChannels; channel++) {\n            retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n        }\n        return new ToneAudioBuffer(retBuffer);\n    }\n    /**\n     * Reverse the buffer.\n     */\n    _reverse() {\n        if (this.loaded) {\n            for (let i = 0; i < this.numberOfChannels; i++) {\n                this.getChannelData(i).reverse();\n            }\n        }\n        return this;\n    }\n    /**\n     * If the buffer is loaded or not\n     */\n    get loaded() {\n        return this.length > 0;\n    }\n    /**\n     * The duration of the buffer in seconds.\n     */\n    get duration() {\n        if (this._buffer) {\n            return this._buffer.duration;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * The length of the buffer in samples\n     */\n    get length() {\n        if (this._buffer) {\n            return this._buffer.length;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n     */\n    get numberOfChannels() {\n        if (this._buffer) {\n            return this._buffer.numberOfChannels;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Reverse the buffer.\n     */\n    get reverse() {\n        return this._reversed;\n    }\n    set reverse(rev) {\n        if (this._reversed !== rev) {\n            this._reversed = rev;\n            this._reverse();\n        }\n    }\n    /**\n     * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n     * pass in a multidimensional array.\n     * @param array The array to fill the audio buffer\n     * @return A ToneAudioBuffer created from the array\n     */\n    static fromArray(array) {\n        return (new ToneAudioBuffer()).fromArray(array);\n    }\n    /**\n     * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n     * @param  url The url to load.\n     * @return A promise which resolves to a ToneAudioBuffer\n     */\n    static fromUrl(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buffer = new ToneAudioBuffer();\n            return yield buffer.load(url);\n        });\n    }\n    /**\n     * Loads a url using fetch and returns the AudioBuffer.\n     */\n    static load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // test if the url contains multiple extensions\n            const matches = url.match(/\\[([^\\]\\[]+\\|.+)\\]$/);\n            if (matches) {\n                const extensions = matches[1].split(\"|\");\n                let extension = extensions[0];\n                for (const ext of extensions) {\n                    if (ToneAudioBuffer.supportsType(ext)) {\n                        extension = ext;\n                        break;\n                    }\n                }\n                url = url.replace(matches[0], extension);\n            }\n            // make sure there is a slash between the baseUrl and the url\n            const baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n            const response = yield fetch(baseUrl + url);\n            if (!response.ok) {\n                throw new Error(`could not load url: ${url}`);\n            }\n            const arrayBuffer = yield response.arrayBuffer();\n            const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);\n            return audioBuffer;\n        });\n    }\n    /**\n     * Checks a url's extension to see if the current browser can play that file type.\n     * @param url The url/extension to test\n     * @return If the file extension can be played\n     * @static\n     * @example\n     * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n     * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n     */\n    static supportsType(url) {\n        const extensions = url.split(\".\");\n        const extension = extensions[extensions.length - 1];\n        const response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n        return response !== \"\";\n    }\n    /**\n     * Returns a Promise which resolves when all of the buffers have loaded\n     */\n    static loaded() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // this makes sure that the function is always async\n            yield Promise.resolve();\n            while (ToneAudioBuffer.downloads.length) {\n                yield ToneAudioBuffer.downloads[0];\n            }\n        });\n    }\n}\n//-------------------------------------\n// STATIC METHODS\n//-------------------------------------\n/**\n * A path which is prefixed before every url.\n */\nToneAudioBuffer.baseUrl = \"\";\n/**\n * All of the downloads\n */\nToneAudioBuffer.downloads = [];\n//# sourceMappingURL=ToneAudioBuffer.js.map"]},"metadata":{},"sourceType":"module"}