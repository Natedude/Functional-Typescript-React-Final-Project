{"ast":null,"code":"import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class IIRFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      this._nativeIIRFilterNode = nativeIIRFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/iir-filter-node-constructor.ts"],"names":[],"mappings":"AAAA,SAAS,2CAAT,QAA4D,+DAA5D;AAIA,MAAM,eAAe,GAAG;AACpB,EAAA,YAAY,EAAE,CADM;AAEpB,EAAA,gBAAgB,EAAE,KAFE;AAGpB,EAAA,qBAAqB,EAAE;AAHH,CAAxB;AAMA,OAAO,MAAM,8BAA8B,GAAqC,CAC5E,oBAD4E,EAE5E,yBAF4E,EAG5E,2BAH4E,EAI5E,gBAJ4E,EAK5E,2BAL4E,EAM5E,oBAN4E,KAO5E;AACA,SAAO,MAAM,aAAN,SAAgD,oBAAhD,CAAuE;AAG1E,IAAA,WAAA,CACI,OADJ,EAEI,OAFJ,EAEoI;AAEhI,YAAM,aAAa,GAAG,gBAAgB,CAAC,OAAD,CAAtC;AACA,YAAM,SAAS,GAAG,2BAA2B,CAAC,aAAD,CAA7C;AACA,YAAM,aAAa,GAAG,EAAE,GAAG,eAAL;AAAsB,WAAG;AAAzB,OAAtB;AACA,YAAM,mBAAmB,GAAG,yBAAyB,CACjD,aADiD,EAEjD,SAAS,GAAG,IAAH,GAAuC,OAAS,CAAC,WAFT,EAGjD,aAHiD,CAArD;AAKA,YAAM,qBAAqB,GACtB,SAAS,GAAG,2BAA2B,CAAC,aAAa,CAAC,QAAf,EAAyB,aAAa,CAAC,WAAvC,CAA9B,GAAoF,IADlG;AAIA,YAAM,OAAN,EAAe,KAAf,EAAsB,mBAAtB,EAA2C,qBAA3C,EAdgI,CAgBhI;AACA;;AACA,MAAA,2CAA2C,CAAC,mBAAD,CAA3C;AAEA,WAAK,oBAAL,GAA4B,mBAA5B,CApBgI,CAsBhI;;AACA,MAAA,oBAAoB,CAAC,IAAD,EAAO,CAAP,CAApB;AACH;;AAEM,IAAA,oBAAoB,CAAC,WAAD,EAA4B,WAA5B,EAAuD,aAAvD,EAAkF;AACzG,aAAO,KAAK,oBAAL,CAA0B,oBAA1B,CAA+C,WAA/C,EAA4D,WAA5D,EAAyE,aAAzE,CAAP;AACH;;AAjCyE,GAA9E;AAmCH,CA3CM","sourceRoot":"","sourcesContent":["import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class IIRFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null));\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=iir-filter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}