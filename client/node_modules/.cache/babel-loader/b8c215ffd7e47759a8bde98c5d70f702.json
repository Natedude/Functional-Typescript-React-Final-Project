{"ast":null,"code":"import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  let nativeOfflineAudioContext = null;\n  return class AudioBuffer {\n    constructor(options) {\n      if (nativeOfflineAudioContextConstructor === null) {\n        throw new Error('Missing the native OfflineAudioContext constructor.');\n      }\n\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n\n      if (nativeOfflineAudioContext === null) {\n        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n      }\n      /*\n       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n       * factory function. But since Firefox also supports the constructor everything should be fine.\n       */\n\n\n      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate); // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n\n      if (audioBuffer.numberOfChannels === 0) {\n        throw createNotSupportedError();\n      } // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n\n\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n\n      audioBufferStore.add(audioBuffer);\n      /*\n       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n       * (Offline)AudioContexts.\n       */\n\n      return audioBuffer;\n    }\n\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-buffer-constructor.ts"],"names":[],"mappings":"AAAA,SAAS,mDAAT,QAAoE,yEAApE;AACA,SAAS,mCAAT,QAAoD,sDAApD;AAIA,MAAM,eAAe,GAAG;AACpB,EAAA,gBAAgB,EAAE;AADE,CAAxB;AAIA,OAAO,MAAM,4BAA4B,GAAmC,CACxE,gBADwE,EAExE,eAFwE,EAGxE,uBAHwE,EAIxE,4BAJwE,EAKxE,oCALwE,EAMxE,uCANwE,EAOxE,iCAPwE,EAQxE,4CARwE,KASxE;AACA,MAAI,yBAAyB,GAAsC,IAAnE;AAEA,SAAO,MAAM,WAAN,CAAiB;AAsBpB,IAAA,WAAA,CAAY,OAAZ,EAAwC;AACpC,UAAI,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,cAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAED,YAAM;AAAE,QAAA,MAAF;AAAU,QAAA,gBAAV;AAA4B,QAAA;AAA5B,UAA2C,EAAE,GAAG,eAAL;AAAsB,WAAG;AAAzB,OAAjD;;AAEA,UAAI,yBAAyB,KAAK,IAAlC,EAAwC;AACpC,QAAA,yBAAyB,GAAG,IAAI,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAA5B;AACH;AAED;;;AAGG;;;AACH,YAAM,WAAW,GACb,4BAA4B,KAAK,IAAjC,IACA,eAAe,CAAC,uCAAD,EAA0C,uCAA1C,CADf,GAEM,IAAI,4BAAJ,CAAiC;AAAE,QAAA,MAAF;AAAU,QAAA,gBAAV;AAA4B,QAAA;AAA5B,OAAjC,CAFN,GAGM,yBAAyB,CAAC,YAA1B,CAAuC,gBAAvC,EAAyD,MAAzD,EAAiE,UAAjE,CAJV,CAfoC,CAqBpC;;AACA,UAAI,WAAW,CAAC,gBAAZ,KAAiC,CAArC,EAAwC;AACpC,cAAM,uBAAuB,EAA7B;AACH,OAxBmC,CA0BpC;AACA;;;AACA,UAAI,OAAO,WAAW,CAAC,eAAnB,KAAuC,UAA3C,EAAuD;AACnD,QAAA,iCAAiC,CAAC,WAAD,CAAjC;AACA,QAAA,mCAAmC,CAAC,WAAD,CAAnC,CAFmD,CAGnD;AACH,OAJD,MAIO,IACH,CAAC,eAAe,CAAC,mDAAD,EAAsD,MAClE,mDAAmD,CAAC,WAAD,CADvC,CADb,EAIL;AACE,QAAA,4CAA4C,CAAC,WAAD,CAA5C;AACH;;AAED,MAAA,gBAAgB,CAAC,GAAjB,CAAqB,WAArB;AAEA;;;AAGG;;AACH,aAAO,WAAP;AACH;;AAEgC,YAAlB,MAAM,CAAC,WAAW,EAAE,QAAF,EAAmB;AAChD,aACK,QAAQ,KAAK,IAAb,IAAqB,OAAO,QAAP,KAAoB,QAAzC,IAAqD,MAAM,CAAC,cAAP,CAAsB,QAAtB,MAAoC,WAAW,CAAC,SAAtG,IACA,gBAAgB,CAAC,GAAjB,CAA0B,QAA1B,CAFJ;AAIH;;AA5EmB,GAAxB;AA8EH,CA1FM","sourceRoot":"","sourcesContent":["import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)\n                ? new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate })\n                : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        static [Symbol.hasInstance](instance) {\n            return ((instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype) ||\n                audioBufferStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=audio-buffer-constructor.js.map"]},"metadata":{},"sourceType":"module"}