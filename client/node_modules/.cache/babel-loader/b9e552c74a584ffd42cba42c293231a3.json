{"ast":null,"code":"import { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\n\nexport class Players extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n    this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n\n    this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n\n    this._players = new Map();\n    const options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    /**\n     * The output volume node\n     */\n\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this._buffers = new ToneAudioBuffers({\n      urls: options.urls,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    }); // mute initially\n\n    this.mute = options.mute;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      baseUrl: \"\",\n      fadeIn: 0,\n      fadeOut: 0,\n      mute: false,\n      onload: noOp,\n      onerror: noOp,\n      urls: {},\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * The fadeIn time of the envelope applied to the source.\n   */\n\n\n  get fadeIn() {\n    return this._fadeIn;\n  }\n\n  set fadeIn(fadeIn) {\n    this._fadeIn = fadeIn;\n\n    this._players.forEach(player => {\n      player.fadeIn = fadeIn;\n    });\n  }\n  /**\n   * The fadeOut time of the each of the sources.\n   */\n\n\n  get fadeOut() {\n    return this._fadeOut;\n  }\n\n  set fadeOut(fadeOut) {\n    this._fadeOut = fadeOut;\n\n    this._players.forEach(player => {\n      player.fadeOut = fadeOut;\n    });\n  }\n  /**\n   * The state of the players object. Returns \"started\" if any of the players are playing.\n   */\n\n\n  get state() {\n    const playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n    return playing ? \"started\" : \"stopped\";\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param name  The key or index of the buffer.\n   */\n\n\n  has(name) {\n    return this._buffers.has(name);\n  }\n  /**\n   * Get a player by name.\n   * @param  name  The players name as defined in the constructor object or `add` method.\n   */\n\n\n  player(name) {\n    assert(this.has(name), `No Player with the name ${name} exists on this object`);\n\n    if (!this._players.has(name)) {\n      const player = new Player({\n        context: this.context,\n        fadeIn: this._fadeIn,\n        fadeOut: this._fadeOut,\n        url: this._buffers.get(name)\n      }).connect(this.output);\n\n      this._players.set(name, player);\n    }\n\n    return this._players.get(name);\n  }\n  /**\n   * If all the buffers are loaded or not\n   */\n\n\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Add a player by name and url to the Players\n   * @param  name A unique name to give the player\n   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n   * @param callback  The callback to invoke when the url is loaded.\n   */\n\n\n  add(name, url, callback) {\n    assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\n    this._buffers.add(name, url, callback);\n\n    return this;\n  }\n  /**\n   * Stop all of the players at the given time\n   * @param time The time to stop all of the players.\n   */\n\n\n  stopAll(time) {\n    this._players.forEach(player => player.stop(time));\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n\n    this._players.forEach(player => player.dispose());\n\n    this._buffers.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/source/buffer/Players.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n        this.name = \"Players\";\n        /**\n         * Players has no input.\n         */\n        this.input = undefined;\n        /**\n         * The container of all of the players\n         */\n        this._players = new Map();\n        const options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n        /**\n         * The output volume node\n         */\n        this._volume = this.output = new Volume({\n            context: this.context,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        readOnly(this, \"volume\");\n        this._buffers = new ToneAudioBuffers({\n            urls: options.urls,\n            onload: options.onload,\n            baseUrl: options.baseUrl,\n            onerror: options.onerror\n        });\n        // mute initially\n        this.mute = options.mute;\n        this._fadeIn = options.fadeIn;\n        this._fadeOut = options.fadeOut;\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            baseUrl: \"\",\n            fadeIn: 0,\n            fadeOut: 0,\n            mute: false,\n            onload: noOp,\n            onerror: noOp,\n            urls: {},\n            volume: 0,\n        });\n    }\n    /**\n     * Mute the output.\n     */\n    get mute() {\n        return this._volume.mute;\n    }\n    set mute(mute) {\n        this._volume.mute = mute;\n    }\n    /**\n     * The fadeIn time of the envelope applied to the source.\n     */\n    get fadeIn() {\n        return this._fadeIn;\n    }\n    set fadeIn(fadeIn) {\n        this._fadeIn = fadeIn;\n        this._players.forEach(player => {\n            player.fadeIn = fadeIn;\n        });\n    }\n    /**\n     * The fadeOut time of the each of the sources.\n     */\n    get fadeOut() {\n        return this._fadeOut;\n    }\n    set fadeOut(fadeOut) {\n        this._fadeOut = fadeOut;\n        this._players.forEach(player => {\n            player.fadeOut = fadeOut;\n        });\n    }\n    /**\n     * The state of the players object. Returns \"started\" if any of the players are playing.\n     */\n    get state() {\n        const playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n        return playing ? \"started\" : \"stopped\";\n    }\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param name  The key or index of the buffer.\n     */\n    has(name) {\n        return this._buffers.has(name);\n    }\n    /**\n     * Get a player by name.\n     * @param  name  The players name as defined in the constructor object or `add` method.\n     */\n    player(name) {\n        assert(this.has(name), `No Player with the name ${name} exists on this object`);\n        if (!this._players.has(name)) {\n            const player = new Player({\n                context: this.context,\n                fadeIn: this._fadeIn,\n                fadeOut: this._fadeOut,\n                url: this._buffers.get(name),\n            }).connect(this.output);\n            this._players.set(name, player);\n        }\n        return this._players.get(name);\n    }\n    /**\n     * If all the buffers are loaded or not\n     */\n    get loaded() {\n        return this._buffers.loaded;\n    }\n    /**\n     * Add a player by name and url to the Players\n     * @param  name A unique name to give the player\n     * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n     * @param callback  The callback to invoke when the url is loaded.\n     */\n    add(name, url, callback) {\n        assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n        this._buffers.add(name, url, callback);\n        return this;\n    }\n    /**\n     * Stop all of the players at the given time\n     * @param time The time to stop all of the players.\n     */\n    stopAll(time) {\n        this._players.forEach(player => player.stop(time));\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._volume.dispose();\n        this.volume.dispose();\n        this._players.forEach(player => player.dispose());\n        this._buffers.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Players.js.map"]},"metadata":{},"sourceType":"module"}