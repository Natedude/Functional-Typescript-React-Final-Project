{"ast":null,"code":"var _jsxFileName = \"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Natedude_Instrument.tsx\",\n    _s = $RefreshSig$();\n\n// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\n// import React from 'react';\nimport React, { useState } from 'react'; // project imports\n\nimport { Instrument } from '../Instruments';\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getDrumKitProps() {\n  return {\n    name: 'Kurzweil Kit 01',\n    prefix: 'Kurzweil_Kit_01/',\n    kitNum: 0,\n    // styles: {\n    //   top: 0,\n    //   left: 20rem,\n    // }\n    urls: {\n      A3: 'CYCdh_Kurz01-Kick03.wav',\n      B3: 'CYCdh_Kurz01-Snr02.wav',\n      C3: 'CYCdh_Kurz01-ClHat.wav',\n      D3: 'CYCdh_Kurz01-Tom01.wav',\n      E3: 'CYCdh_Kurz01-Tom02.wav',\n      F3: 'CYCdh_Kurz01-Crash01.wav',\n      G3: 'CYCdh_Kurz01-Ride01.wav'\n    }\n  };\n}\n\n;\nconst urlPrefix = 'Natedude/'; // takes in DrumKitProps and returns [sampler, setSampler]\n\nfunction MakeSampler(newKit) {\n  _s();\n\n  const [sampler, setSampler] = useState(new Tone.Sampler({\n    urls: newKit.urls,\n    baseUrl: `http://localhost:3000/${urlPrefix}${newKit.prefix}`\n  }).toDestination());\n  return [sampler, setSampler];\n}\n\n_s(MakeSampler, \"vtHU2EfOQzslonKGEFqUlCyaRUU=\");\n\n_c = MakeSampler;\n// interface DrumKitPieceProps {\n//   note: string; // C, Db, D, Eb, E, F, Gb, G, Ab, A, Bb, B\n//   duration?: string;\n//   synth?: Tone.Synth; // Contains library code for making sound\n//   minor?: boolean; // True if minor key, false if major key\n//   octave: number;\n//   index: number; // octave + index together give a location for the piano key\n// }\nexport function DrumKitPiece({\n  piece,\n  sampler,\n  // placement or styles\n  image\n}) {\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n  return (\n    /*#__PURE__*/\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    _jsxDEV(\"div\", {\n      onMouseDown: () => sampler.triggerAttack(`${piece}`),\n      onMouseUp: () => sampler.triggerRelease(`${piece}`, '+0.25'),\n      className: classNames('ba pointer absolute dim', {// 'bg-blue green h3': minor, // minor keys are black\n        // 'red bg-yellow h4': !minor, // major keys are white\n      }),\n      style: {\n        // CSS\n        backgroundImage: image // top: 0,\n        // left: `${index * 2}rem`,\n        // zIndex: minor ? 1 : 0,\n        // width: minor ? '1.5rem' : '2rem',\n        // marginLeft: minor ? '0.25rem' : 0,\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  );\n}\n_c2 = DrumKitPiece;\n\nfunction PianoType({\n  title,\n  onClick,\n  active\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1', {\n      'b--red green': active,\n      'gray b--light-gray': !active\n    }),\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n} //  Object.keys(drumKits)\n\n\n_c3 = PianoType;\n\nfunction DrumKit({\n  synth,\n  setSynth\n}) {\n  // drumPieces instead of keys\n  const drumPieces = [{\n    piece: 'kick',\n    image: require('../img/Natedude/kick.png') // styles: {\n    //   top:0\n    // }\n\n  }]; //setDrumKit\n\n  const setOscillator = newType => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n      return new Tone.Synth({\n        oscillator: {\n          type: newType\n        }\n      }).toDestination();\n    });\n  };\n\n  var [sampler, setSampler] = MakeSampler(getDrumKitProps());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pv4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative dib h4 w-100 ml4\",\n      children: drumPieces.map(p => {\n        /*#__PURE__*/\n        _jsxDEV(DrumKitPiece, {\n          piece: p.piece,\n          sampler: sampler,\n          imageURL: p.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'pl4 pt4 flex'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n_c4 = DrumKit;\nexport const Natedude_Instrument = new Instrument('Natedude_Instrument', DrumKit);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"MakeSampler\");\n$RefreshReg$(_c2, \"DrumKitPiece\");\n$RefreshReg$(_c3, \"PianoType\");\n$RefreshReg$(_c4, \"DrumKit\");","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/instruments/Natedude_Instrument.tsx"],"names":["Tone","classNames","React","useState","Instrument","getDrumKitProps","name","prefix","kitNum","urls","A3","B3","C3","D3","E3","F3","G3","urlPrefix","MakeSampler","newKit","sampler","setSampler","Sampler","baseUrl","toDestination","DrumKitPiece","piece","image","triggerAttack","triggerRelease","backgroundImage","PianoType","title","onClick","active","DrumKit","synth","setSynth","drumPieces","require","setOscillator","newType","oldSynth","disconnect","Synth","oscillator","type","map","p","Natedude_Instrument"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List, Range } from 'immutable';\n// import React from 'react';\nimport React, { useState } from 'react';\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments';\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\n\n\n\ninterface DrumKitProps {\n  name: string;\n  prefix: string;\n  kitNum: number;\n  urls: {\n    A3: string; // kick\n    B3: string; //snare\n    C3: string; //highHat\n    D3: string; //tomLeft\n    E3: string;\n    F3: string;\n    G3: string;\n  }\n  // color: string;\n}\n\nfunction getDrumKitProps(){\n  return {\n    name: 'Kurzweil Kit 01',\n    prefix: 'Kurzweil_Kit_01/',\n    kitNum: 0,\n    // styles: {\n      //   top: 0,\n      //   left: 20rem,\n      // }\n      urls: {\n        A3: 'CYCdh_Kurz01-Kick03.wav',\n        B3: 'CYCdh_Kurz01-Snr02.wav',\n        C3: 'CYCdh_Kurz01-ClHat.wav',\n        D3: 'CYCdh_Kurz01-Tom01.wav',\n        E3: 'CYCdh_Kurz01-Tom02.wav',\n        F3: 'CYCdh_Kurz01-Crash01.wav',\n        G3: 'CYCdh_Kurz01-Ride01.wav'\n      }\n    } as DrumKitProps;\n  };\n  const urlPrefix = 'Natedude/'\n  // takes in DrumKitProps and returns [sampler, setSampler]\n  function MakeSampler(newKit: DrumKitProps){\n    const [sampler, setSampler] = useState(\n      new Tone.Sampler({\n        urls: newKit.urls,\n        baseUrl: `http://localhost:3000/${urlPrefix}${newKit.prefix}`,\n      }).toDestination()\n      );\n      return [sampler, setSampler] as [Tone.Sampler, React.Dispatch<React.SetStateAction<Tone.Sampler>>];\n    }\n\n    interface DrumKitPieceProps {\n      piece: string; // kick, snare, highHat, tomLeft, tomRight, crash, ride\n      sampler: Tone.Sampler;\n      // placement or styles?\n      imageURL: string;\n      \n    }\n\n    // interface DrumKitPieceProps {\n    //   note: string; // C, Db, D, Eb, E, F, Gb, G, Ab, A, Bb, B\n    //   duration?: string;\n    //   synth?: Tone.Synth; // Contains library code for making sound\n    //   minor?: boolean; // True if minor key, false if major key\n    //   octave: number;\n    //   index: number; // octave + index together give a location for the piano key\n    // }\n\n    export function DrumKitPiece({\n      piece,\n      sampler,\n      // placement or styles\n      image\n    }: DrumKitPieceProps): JSX.Element {\n      /**\n       * This React component corresponds to either a major or minor key in the piano.\n       * See `PianoKeyWithoutJSX` for the React component without JSX.\n       */\n\n      return (\n        // Observations:\n        // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n        // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n        // 3. The curly braces `{` and `}` should remind you of string interpolation.\n        <div\n      onMouseDown={() => sampler.triggerAttack(`${piece}`)}\n      onMouseUp={() => sampler.triggerRelease(`${piece}`,'+0.25')}\n      className={classNames('ba pointer absolute dim', {\n        // 'bg-blue green h3': minor, // minor keys are black\n        // 'red bg-yellow h4': !minor, // major keys are white\n      })}\n      style={{\n        // CSS\n        backgroundImage: image\n        // top: 0,\n        // left: `${index * 2}rem`,\n        // zIndex: minor ? 1 : 0,\n        // width: minor ? '1.5rem' : '2rem',\n        // marginLeft: minor ? '0.25rem' : 0,\n      }}\n    ></div>\n  );\n}\n\nfunction PianoType({ title, onClick, active }: any): JSX.Element {\n  return (\n    <div\n      onClick={onClick}\n      className={classNames('dim pointer ph2 pv1 ba mr2 br1 fw7 bw1', {\n        'b--red green': active,\n        'gray b--light-gray': !active,\n      })}\n    >\n      {title}\n    </div>\n  );\n}\n//  Object.keys(drumKits)\n\nfunction DrumKit({ synth, setSynth }: InstrumentProps): JSX.Element {\n\n  // drumPieces instead of keys\n  const drumPieces = [\n    {\n      piece: 'kick',\n      image: require('../img/Natedude/kick.png')\n      // styles: {\n      //   top:0\n      // }\n    }\n  ]\n\n  //setDrumKit\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n\n      return new Tone.Synth({\n        oscillator: { type: newType } as Tone.OmniOscillatorOptions,\n      }).toDestination();\n    });\n  };\n\n  var [sampler, setSampler] = MakeSampler(getDrumKitProps());\n\n  return (\n    <div className=\"pv4\">\n      <div className=\"relative dib h4 w-100 ml4\">\n        {drumPieces.map(p => {\n          <DrumKitPiece\n            piece={p.piece}\n            sampler={sampler}\n            imageURL= {p.image}\n          />\n        })\n        }\n      </div>\n      <div className={'pl4 pt4 flex'}>\n        {}\n      </div>\n    </div>\n  );\n}\n\nexport const Natedude_Instrument = new Instrument('Natedude_Instrument', DrumKit);\n"]},"metadata":{},"sourceType":"module"}