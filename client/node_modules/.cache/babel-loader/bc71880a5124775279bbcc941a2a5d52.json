{"ast":null,"code":"import { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\n\nexport class PingPongDelay extends StereoXFeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    this.name = \"PingPongDelay\";\n    const options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    this._leftDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightPreDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = new Signal({\n      context: this.context,\n      units: \"time\",\n      value: options.delayTime\n    }); // connect it up\n\n    this.connectEffectLeft(this._leftDelay);\n    this.connectEffectRight(this._rightPreDelay, this._rightDelay);\n    this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay\n\n    this._feedbackL.disconnect();\n\n    this._feedbackL.connect(this._rightDelay);\n\n    readOnly(this, [\"delayTime\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._leftDelay.dispose();\n\n    this._rightDelay.dispose();\n\n    this._rightPreDelay.dispose();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/PingPongDelay.ts"],"names":[],"mappings":"AAAA,SAAS,qBAAT,QAAoE,yBAApE;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,KAAT,QAAsB,uBAAtB;AACA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAOA;;;;;;;;;;;;;AAaG;;AACH,OAAM,MAAO,aAAP,SAA6B,qBAA7B,CAAwE;AA8B7E,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAA1B;AA9BQ,SAAA,IAAA,GAAe,eAAf;AA+BR,UAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAApC;AAEA,SAAK,UAAL,GAAkB,IAAI,KAAJ,CAAU;AAC3B,MAAA,OAAO,EAAE,KAAK,OADa;AAE3B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFS,KAAV,CAAlB;AAIA,SAAK,WAAL,GAAmB,IAAI,KAAJ,CAAU;AAC5B,MAAA,OAAO,EAAE,KAAK,OADc;AAE5B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFU,KAAV,CAAnB;AAIA,SAAK,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAC/B,MAAA,OAAO,EAAE,KAAK,OADiB;AAE/B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFa,KAAV,CAAtB;AAIA,SAAK,SAAL,GAAiB,IAAI,MAAJ,CAAW;AAC3B,MAAA,OAAO,EAAE,KAAK,OADa;AAE3B,MAAA,KAAK,EAAE,MAFoB;AAG3B,MAAA,KAAK,EAAE,OAAO,CAAC;AAHY,KAAX,CAAjB,CAjBD,CAuBC;;AACA,SAAK,iBAAL,CAAuB,KAAK,UAA5B;AACA,SAAK,kBAAL,CAAwB,KAAK,cAA7B,EAA6C,KAAK,WAAlD;AACA,SAAK,SAAL,CAAe,GAAf,CAAmB,KAAK,UAAL,CAAgB,SAAnC,EAA8C,KAAK,WAAL,CAAiB,SAA/D,EAA0E,KAAK,cAAL,CAAoB,SAA9F,EA1BD,CA2BC;;AACA,SAAK,UAAL,CAAgB,UAAhB;;AACA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,WAA7B;;AACA,IAAA,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,CAAP,CAAR;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,qBAAqB,CAAC,WAAtB,EAAd,EAAmD;AACzD,MAAA,SAAS,EAAE,IAD8C;AAEzD,MAAA,QAAQ,EAAE;AAF+C,KAAnD,CAAP;AAIA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,SAAK,cAAL,CAAoB,OAApB;;AACA,SAAK,SAAL,CAAe,OAAf;AACA,WAAO,IAAP;AACA;;AA7E4E","sourceRoot":"","sourcesContent":["import { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect {\n    constructor() {\n        super(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n        this.name = \"PingPongDelay\";\n        const options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n        this._leftDelay = new Delay({\n            context: this.context,\n            maxDelay: options.maxDelay,\n        });\n        this._rightDelay = new Delay({\n            context: this.context,\n            maxDelay: options.maxDelay\n        });\n        this._rightPreDelay = new Delay({\n            context: this.context,\n            maxDelay: options.maxDelay\n        });\n        this.delayTime = new Signal({\n            context: this.context,\n            units: \"time\",\n            value: options.delayTime,\n        });\n        // connect it up\n        this.connectEffectLeft(this._leftDelay);\n        this.connectEffectRight(this._rightPreDelay, this._rightDelay);\n        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n        // rearranged the feedback to be after the rightPreDelay\n        this._feedbackL.disconnect();\n        this._feedbackL.connect(this._rightDelay);\n        readOnly(this, [\"delayTime\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n            delayTime: 0.25,\n            maxDelay: 1\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._leftDelay.dispose();\n        this._rightDelay.dispose();\n        this._rightPreDelay.dispose();\n        this.delayTime.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PingPongDelay.js.map"]},"metadata":{},"sourceType":"module"}