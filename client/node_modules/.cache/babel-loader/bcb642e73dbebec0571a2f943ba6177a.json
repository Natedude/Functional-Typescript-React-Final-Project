{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall.\n * @category Effect\n */\n\nexport class Vibrato extends Effect {\n  constructor() {\n    super(optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    this.name = \"Vibrato\";\n    const options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    this._delayNode = new Delay({\n      context: this.context,\n      delayTime: 0,\n      maxDelay: options.maxDelay\n    });\n    this._lfo = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 0,\n      max: options.maxDelay,\n      frequency: options.frequency,\n      phase: -90 // offse the phase so the resting position is in the center\n\n    }).start().connect(this._delayNode.delayTime);\n    this.frequency = this._lfo.frequency;\n    this.depth = this._lfo.amplitude;\n    this.depth.value = options.depth;\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.effectSend.chain(this._delayNode, this.effectReturn);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      maxDelay: 0.005,\n      frequency: 5,\n      depth: 0.1,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Type of oscillator attached to the Vibrato.\n   */\n\n\n  get type() {\n    return this._lfo.type;\n  }\n\n  set type(type) {\n    this._lfo.type = type;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._delayNode.dispose();\n\n    this._lfo.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/Vibrato.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAsC,UAAtC;AAGA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,KAAT,QAAsB,uBAAtB;AAGA,SAAS,QAAT,QAAyB,wBAAzB;AAQA;;;;AAIG;;AACH,OAAM,MAAO,OAAP,SAAuB,MAAvB,CAA6C;AA6BlD,EAAA,WAAA,GAAA;AAEC,UAAM,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,EAAc,OAAd,CAAnC,CAA1B;AA7BQ,SAAA,IAAA,GAAe,SAAf;AA8BR,UAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,EAAc,OAAd,CAAnC,CAApC;AAEA,SAAK,UAAL,GAAkB,IAAI,KAAJ,CAAU;AAC3B,MAAA,OAAO,EAAE,KAAK,OADa;AAE3B,MAAA,SAAS,EAAE,CAFgB;AAG3B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAHS,KAAV,CAAlB;AAKA,SAAK,IAAL,GAAY,IAAI,GAAJ,CAAQ;AACnB,MAAA,OAAO,EAAE,KAAK,OADK;AAEnB,MAAA,IAAI,EAAE,OAAO,CAAC,IAFK;AAGnB,MAAA,GAAG,EAAE,CAHc;AAInB,MAAA,GAAG,EAAE,OAAO,CAAC,QAJM;AAKnB,MAAA,SAAS,EAAE,OAAO,CAAC,SALA;AAMnB,MAAA,KAAK,EAAE,CAAC,EANW,CAMR;;AANQ,KAAR,EAOT,KAPS,GAOD,OAPC,CAOO,KAAK,UAAL,CAAgB,SAPvB,CAAZ;AAQA,SAAK,SAAL,GAAiB,KAAK,IAAL,CAAU,SAA3B;AACA,SAAK,KAAL,GAAa,KAAK,IAAL,CAAU,SAAvB;AAEA,SAAK,KAAL,CAAW,KAAX,GAAmB,OAAO,CAAC,KAA3B;AACA,IAAA,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,EAAc,OAAd,CAAP,CAAR;AACA,SAAK,UAAL,CAAgB,KAAhB,CAAsB,KAAK,UAA3B,EAAuC,KAAK,YAA5C;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,QAAQ,EAAE,KADgC;AAE1C,MAAA,SAAS,EAAE,CAF+B;AAG1C,MAAA,KAAK,EAAE,GAHmC;AAI1C,MAAA,IAAI,EAAE;AAJoC,KAApC,CAAP;AAMA;AAED;;AAEG;;;AACK,MAAJ,IAAI,GAAA;AACP,WAAO,KAAK,IAAL,CAAU,IAAjB;AACA;;AACO,MAAJ,IAAI,CAAC,IAAD,EAAK;AACZ,SAAK,IAAL,CAAU,IAAV,GAAiB,IAAjB;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,SAAL,CAAe,OAAf;AACA,SAAK,KAAL,CAAW,OAAX;AACA,WAAO,IAAP;AACA;;AAjFiD","sourceRoot":"","sourcesContent":["import { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall.\n * @category Effect\n */\nexport class Vibrato extends Effect {\n    constructor() {\n        super(optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n        this.name = \"Vibrato\";\n        const options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n        this._delayNode = new Delay({\n            context: this.context,\n            delayTime: 0,\n            maxDelay: options.maxDelay,\n        });\n        this._lfo = new LFO({\n            context: this.context,\n            type: options.type,\n            min: 0,\n            max: options.maxDelay,\n            frequency: options.frequency,\n            phase: -90 // offse the phase so the resting position is in the center\n        }).start().connect(this._delayNode.delayTime);\n        this.frequency = this._lfo.frequency;\n        this.depth = this._lfo.amplitude;\n        this.depth.value = options.depth;\n        readOnly(this, [\"frequency\", \"depth\"]);\n        this.effectSend.chain(this._delayNode, this.effectReturn);\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            maxDelay: 0.005,\n            frequency: 5,\n            depth: 0.1,\n            type: \"sine\"\n        });\n    }\n    /**\n     * Type of oscillator attached to the Vibrato.\n     */\n    get type() {\n        return this._lfo.type;\n    }\n    set type(type) {\n        this._lfo.type = type;\n    }\n    dispose() {\n        super.dispose();\n        this._delayNode.dispose();\n        this._lfo.dispose();\n        this.frequency.dispose();\n        this.depth.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Vibrato.js.map"]},"metadata":{},"sourceType":"module"}