{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\n\nexport class StereoFeedbackEffect extends StereoEffect {\n  constructor(options) {\n    super(options);\n    this.feedback = new Signal({\n      context: this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    this._feedbackL = new Gain({\n      context: this.context\n    });\n    this._feedbackR = new Gain({\n      context: this.context\n    });\n    this._feedbackSplit = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._feedbackMerge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n\n    this._merge.connect(this._feedbackSplit);\n\n    this._feedbackMerge.connect(this._split); // the left output connected to the left input\n\n\n    this._feedbackSplit.connect(this._feedbackL, 0, 0);\n\n    this._feedbackL.connect(this._feedbackMerge, 0, 0); // the right output connected to the right input\n\n\n    this._feedbackSplit.connect(this._feedbackR, 1, 0);\n\n    this._feedbackR.connect(this._feedbackMerge, 0, 1); // the feedback control\n\n\n    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n    readOnly(this, [\"feedback\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      feedback: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.feedback.dispose();\n\n    this._feedbackL.dispose();\n\n    this._feedbackR.dispose();\n\n    this._feedbackSplit.dispose();\n\n    this._feedbackMerge.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/StereoFeedbackEffect.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAAkD,gBAAlD;AAEA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AAMA;;AAEG;;AACH,OAAM,MAAO,oBAAP,SAAiF,YAAjF,CAAsG;AA6B3G,EAAA,WAAA,CAAY,OAAZ,EAAgD;AAE/C,UAAM,OAAN;AAEA,SAAK,QAAL,GAAgB,IAAI,MAAJ,CAAW;AAC1B,MAAA,OAAO,EAAE,KAAK,OADY;AAE1B,MAAA,KAAK,EAAE,OAAO,CAAC,QAFW;AAG1B,MAAA,KAAK,EAAE;AAHmB,KAAX,CAAhB;AAKA,SAAK,UAAL,GAAkB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAlB;AACA,SAAK,UAAL,GAAkB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAlB;AAEA,SAAK,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAtB;AACA,SAAK,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAtB;;AAEA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,cAAzB;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,MAAjC,EAhB+C,CAkB/C;;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EApB+C,CAsB/C;;;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EAxB+C,CA0B/C;;;AACA,SAAK,QAAL,CAAc,GAAd,CAAkB,KAAK,UAAL,CAAgB,IAAlC,EAAwC,KAAK,UAAL,CAAgB,IAAxD;AACA,IAAA,QAAQ,CAAC,IAAD,EAAO,CAAC,UAAD,CAAP,CAAR;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,YAAY,CAAC,WAAb,EAAd,EAA0C;AAChD,MAAA,QAAQ,EAAE;AADsC,KAA1C,CAAP;AAGA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,cAAL,CAAoB,OAApB;;AACA,SAAK,cAAL,CAAoB,OAApB;;AACA,WAAO,IAAP;AACA;;AA1E0G","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect extends StereoEffect {\n    constructor(options) {\n        super(options);\n        this.feedback = new Signal({\n            context: this.context,\n            value: options.feedback,\n            units: \"normalRange\"\n        });\n        this._feedbackL = new Gain({ context: this.context });\n        this._feedbackR = new Gain({ context: this.context });\n        this._feedbackSplit = new Split({ context: this.context, channels: 2 });\n        this._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n        this._merge.connect(this._feedbackSplit);\n        this._feedbackMerge.connect(this._split);\n        // the left output connected to the left input\n        this._feedbackSplit.connect(this._feedbackL, 0, 0);\n        this._feedbackL.connect(this._feedbackMerge, 0, 0);\n        // the right output connected to the right input\n        this._feedbackSplit.connect(this._feedbackR, 1, 0);\n        this._feedbackR.connect(this._feedbackMerge, 0, 1);\n        // the feedback control\n        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n        readOnly(this, [\"feedback\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            feedback: 0.5,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.feedback.dispose();\n        this._feedbackL.dispose();\n        this._feedbackR.dispose();\n        this._feedbackSplit.dispose();\n        this._feedbackMerge.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=StereoFeedbackEffect.js.map"]},"metadata":{},"sourceType":"module"}