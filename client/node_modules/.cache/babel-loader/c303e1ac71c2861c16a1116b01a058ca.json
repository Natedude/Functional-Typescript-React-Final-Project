{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class ConvolverNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;\n      super(context, false, nativeConvolverNode, convolverNodeRenderer);\n      this._isBufferNullified = false;\n      this._nativeConvolverNode = nativeConvolverNode;\n\n      if (mergedOptions.buffer !== null) {\n        setAudioNodeTailTime(this, mergedOptions.buffer.duration);\n      }\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeConvolverNode.buffer;\n    }\n\n    set buffer(value) {\n      this._nativeConvolverNode.buffer = value; // Bug #115: Safari does not allow to set the buffer to null.\n\n      if (value === null && this._nativeConvolverNode.buffer !== null) {\n        const nativeContext = this._nativeConvolverNode.context;\n        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, 44100);\n        this._isBufferNullified = true;\n        setAudioNodeTailTime(this, 0);\n      } else {\n        this._isBufferNullified = false;\n        setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n      }\n    }\n\n    get normalize() {\n      return this._nativeConvolverNode.normalize;\n    }\n\n    set normalize(value) {\n      this._nativeConvolverNode.normalize = value;\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/convolver-node-constructor.ts"],"names":[],"mappings":"AAGA,MAAM,eAAe,GAAG;AACpB,EAAA,MAAM,EAAE,IADY;AAEpB,EAAA,YAAY,EAAE,CAFM;AAGpB,EAAA,gBAAgB,EAAE,aAHE;AAIpB,EAAA,qBAAqB,EAAE,UAJH;AAKpB,EAAA,oBAAoB,EAAE;AALF,CAAxB;AAQA,OAAO,MAAM,8BAA8B,GAAqC,CAC5E,oBAD4E,EAE5E,2BAF4E,EAG5E,yBAH4E,EAI5E,gBAJ4E,EAK5E,2BAL4E,EAM5E,oBAN4E,KAO5E;AACA,SAAO,MAAM,aAAN,SAAgD,oBAAhD,CAAuE;AAK1E,IAAA,WAAA,CAAY,OAAZ,EAAwB,OAAxB,EAA4D;AACxD,YAAM,aAAa,GAAG,gBAAgB,CAAC,OAAD,CAAtC;AACA,YAAM,aAAa,GAAG,EAAE,GAAG,eAAL;AAAsB,WAAG;AAAzB,OAAtB;AACA,YAAM,mBAAmB,GAAG,yBAAyB,CAAC,aAAD,EAAgB,aAAhB,CAArD;AACA,YAAM,SAAS,GAAG,2BAA2B,CAAC,aAAD,CAA7C;AACA,YAAM,qBAAqB,GAAiC,SAAS,GAAG,2BAA2B,EAA9B,GAAmC,IAAxG;AAEA,YAAM,OAAN,EAAe,KAAf,EAAsB,mBAAtB,EAA2C,qBAA3C;AAEA,WAAK,kBAAL,GAA0B,KAA1B;AACA,WAAK,oBAAL,GAA4B,mBAA5B;;AAEA,UAAI,aAAa,CAAC,MAAd,KAAyB,IAA7B,EAAmC;AAC/B,QAAA,oBAAoB,CAAC,IAAD,EAAO,aAAa,CAAC,MAAd,CAAqB,QAA5B,CAApB;AACH;AACJ;;AAES,QAAN,MAAM,GAAA;AACN,UAAI,KAAK,kBAAT,EAA6B;AACzB,eAAO,IAAP;AACH;;AAED,aAAO,KAAK,oBAAL,CAA0B,MAAjC;AACH;;AAES,QAAN,MAAM,CAAC,KAAD,EAAM;AACZ,WAAK,oBAAL,CAA0B,MAA1B,GAAmC,KAAnC,CADY,CAGZ;;AACA,UAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,oBAAL,CAA0B,MAA1B,KAAqC,IAA3D,EAAiE;AAC7D,cAAM,aAAa,GAAG,KAAK,oBAAL,CAA0B,OAAhD;AAEA,aAAK,oBAAL,CAA0B,MAA1B,GAAmC,aAAa,CAAC,YAAd,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,CAAnC;AACA,aAAK,kBAAL,GAA0B,IAA1B;AAEA,QAAA,oBAAoB,CAAC,IAAD,EAAO,CAAP,CAApB;AACH,OAPD,MAOO;AACH,aAAK,kBAAL,GAA0B,KAA1B;AAEA,QAAA,oBAAoB,CAAC,IAAD,EAAO,KAAK,oBAAL,CAA0B,MAA1B,KAAqC,IAArC,GAA4C,CAA5C,GAAgD,KAAK,oBAAL,CAA0B,MAA1B,CAAiC,QAAxF,CAApB;AACH;AACJ;;AAEY,QAAT,SAAS,GAAA;AACT,aAAO,KAAK,oBAAL,CAA0B,SAAjC;AACH;;AAEY,QAAT,SAAS,CAAC,KAAD,EAAM;AACf,WAAK,oBAAL,CAA0B,SAA1B,GAAsC,KAAtC;AACH;;AAtDyE,GAA9E;AAwDH,CAhEM","sourceRoot":"","sourcesContent":["const DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class ConvolverNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = (isOffline ? createConvolverNodeRenderer() : null);\n            super(context, false, nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n            if (mergedOptions.buffer !== null) {\n                setAudioNodeTailTime(this, mergedOptions.buffer.duration);\n            }\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, 44100);\n                this._isBufferNullified = true;\n                setAudioNodeTailTime(this, 0);\n            }\n            else {\n                this._isBufferNullified = false;\n                setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=convolver-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}