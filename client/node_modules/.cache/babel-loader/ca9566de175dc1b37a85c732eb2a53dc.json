{"ast":null,"code":"/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      await new Promise(resolve => {\n        audioWorkletNode.port.onmessage = () => resolve();\n\n        audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n      });\n\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      isCallingProcess = await new Promise(resolve => {\n        messageChannel.port1.onmessage = ({\n          data\n        }) => resolve(data === 1);\n\n        messageChannel.port1.postMessage(0);\n      });\n    } catch {// Ignore errors.\n    } finally {\n      messageChannel.port1.close();\n      URL.revokeObjectURL(url);\n    }\n\n    return isCallingProcess;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/test-audio-worklet-processor-no-outputs-support.ts"],"names":[],"mappings":"AAEA;;;AAGG;AACH,OAAO,MAAM,+CAA+C,GAAsD,CAC9G,iCAD8G,EAE9G,oCAF8G,KAG9G;AACA,SAAO,YAAW;AACd;AACA,QAAI,iCAAiC,KAAK,IAA1C,EAAgD;AAC5C,aAAO,IAAP;AACH;;AAED,QAAI,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,aAAO,KAAP;AACH;;AAED,UAAM,IAAI,GAAG,IAAI,IAAJ,CACT,CACI,uNADJ,CADS,EAIT;AACI,MAAA,IAAI,EAAE;AADV,KAJS,CAAb;AAQA,UAAM,cAAc,GAAG,IAAI,cAAJ,EAAvB,CAlBc,CAmBd;;AACA,UAAM,mBAAmB,GAAG,IAAI,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,KAAjD,CAA5B;AACA,UAAM,GAAG,GAAG,GAAG,CAAC,eAAJ,CAAoB,IAApB,CAAZ;AAEA,QAAI,gBAAgB,GAAG,KAAvB;;AAEA,QAAI;AACA,YAAM,mBAAmB,CAAC,YAApB,CAAiC,SAAjC,CAA2C,GAA3C,CAAN;AAEA,YAAM,gBAAgB,GAAG,IAAI,iCAAJ,CAAsC,mBAAtC,EAA2D,GAA3D,EAAgE;AAAE,QAAA,eAAe,EAAE;AAAnB,OAAhE,CAAzB;AACA,YAAM,UAAU,GAAG,mBAAmB,CAAC,gBAApB,EAAnB;AAEA,YAAM,IAAI,OAAJ,CAAmB,OAAD,IAAY;AAChC,QAAA,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,GAAkC,MAAM,OAAO,EAA/C;;AACA,QAAA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB,CAAkC,cAAc,CAAC,KAAjD,EAAwD,CAAC,cAAc,CAAC,KAAhB,CAAxD;AACH,OAHK,CAAN;;AAKA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,GAAkC,MAAO,gBAAgB,GAAG,IAA5D;;AAEA,MAAA,UAAU,CAAC,OAAX,CAAmB,gBAAnB;AACA,MAAA,UAAU,CAAC,KAAX,CAAiB,CAAjB;AAEA,YAAM,mBAAmB,CAAC,cAApB,EAAN;AAEA,MAAA,gBAAgB,GAAG,MAAM,IAAI,OAAJ,CAAa,OAAD,IAAY;AAC7C,QAAA,cAAc,CAAC,KAAf,CAAqB,SAArB,GAAiC,CAAC;AAAE,UAAA;AAAF,SAAD,KAAc,OAAO,CAAC,IAAI,KAAK,CAAV,CAAtD;;AACA,QAAA,cAAc,CAAC,KAAf,CAAqB,WAArB,CAAiC,CAAjC;AACH,OAHwB,CAAzB;AAIH,KAtBD,CAsBE,MAAM,CACJ;AACH,KAxBD,SAwBU;AACN,MAAA,cAAc,CAAC,KAAf,CAAqB,KAArB;AACA,MAAA,GAAG,CAAC,eAAJ,CAAoB,GAApB;AACH;;AAED,WAAO,gBAAP;AACH,GAvDD;AAwDH,CA5DM","sourceRoot":"","sourcesContent":["/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob([\n            'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'\n        ], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        const messageChannel = new MessageChannel();\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n        let isCallingProcess = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            await new Promise((resolve) => {\n                audioWorkletNode.port.onmessage = () => resolve();\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            await offlineAudioContext.startRendering();\n            isCallingProcess = await new Promise((resolve) => {\n                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);\n                messageChannel.port1.postMessage(0);\n            });\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n        }\n        return isCallingProcess;\n    };\n};\n//# sourceMappingURL=test-audio-worklet-processor-no-outputs-support.js.map"]},"metadata":{},"sourceType":"module"}