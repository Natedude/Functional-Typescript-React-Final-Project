{"ast":null,"code":"export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    return (when = 0) => {\n      if (when < 0) {\n        throw new RangeError(\"The parameter can't be negative.\");\n      }\n\n      stop.call(nativeAudioScheduledSourceNode, when);\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};","map":{"version":3,"sources":["../../../src/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.ts"],"names":[],"mappings":"AAEA,OAAO,MAAM,wDAAwD,GACjE,8BADoE,IAE9D;AACN,EAAA,8BAA8B,CAAC,IAA/B,GAAsC,CAAE,IAAD,IAAS;AAC5C,WAAO,CAAC,IAAI,GAAG,CAAR,KAAa;AAChB,UAAI,IAAI,GAAG,CAAX,EAAc;AACV,cAAM,IAAI,UAAJ,CAAe,kCAAf,CAAN;AACH;;AAED,MAAA,IAAI,CAAC,IAAL,CAAU,8BAAV,EAA0C,IAA1C;AACH,KAND;AAOH,GARqC,EAQnC,8BAA8B,CAAC,IARI,CAAtC;AASH,CAZM","sourceRoot":"","sourcesContent":["export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map"]},"metadata":{},"sourceType":"module"}