{"ast":null,"code":"import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window); // The addAudioWorkletModule() function is only available in a SecureContext.\n\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), // @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore); // The AudioWorkletNode constructor is only available in a SecureContext.\n\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);","map":{"version":3,"sources":["../../src/module.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = isSecureContext\n    ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), \n    // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n    window)\n    : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = isSecureContext\n    ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener)\n    : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=module.js.map"]},"metadata":{},"sourceType":"module"}