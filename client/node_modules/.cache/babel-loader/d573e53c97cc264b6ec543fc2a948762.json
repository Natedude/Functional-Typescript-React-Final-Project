{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\n\nexport class ToneWithContext extends Tone {\n  constructor() {\n    super();\n    const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\n    if (this.defaultContext) {\n      this.context = this.defaultContext;\n    } else {\n      this.context = options.context;\n    }\n  }\n\n  static getDefaults() {\n    return {\n      context: getContext()\n    };\n  }\n  /**\n   * Return the current time of the Context clock plus the lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.now());\n   * }, 100);\n   */\n\n\n  now() {\n    return this.context.currentTime + this.context.lookAhead;\n  }\n  /**\n   * Return the current time of the Context clock without any lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.immediate());\n   * }, 100);\n   */\n\n\n  immediate() {\n    return this.context.currentTime;\n  }\n  /**\n   * The duration in seconds of one sample.\n   * @example\n   * console.log(Tone.Transport.sampleTime);\n   */\n\n\n  get sampleTime() {\n    return 1 / this.context.sampleRate;\n  }\n  /**\n   * The number of seconds of 1 processing block (128 samples)\n   * @example\n   * console.log(Tone.Destination.blockTime);\n   */\n\n\n  get blockTime() {\n    return 128 / this.context.sampleRate;\n  }\n  /**\n   * Convert the incoming time to seconds.\n   * This is calculated against the current [[Tone.Transport]] bpm\n   * @example\n   * const gain = new Tone.Gain();\n   * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n   * // ramp the tempo to 60 bpm over 30 seconds\n   * Tone.getTransport().bpm.rampTo(60, 30);\n   */\n\n\n  toSeconds(time) {\n    return new TimeClass(this.context, time).toSeconds();\n  }\n  /**\n   * Convert the input to a frequency number\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toFrequency(\"4n\"));\n   */\n\n\n  toFrequency(freq) {\n    return new FrequencyClass(this.context, freq).toFrequency();\n  }\n  /**\n   * Convert the input time into ticks\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toTicks(\"4n\"));\n   */\n\n\n  toTicks(time) {\n    return new TransportTimeClass(this.context, time).toTicks();\n  } //-------------------------------------\n  // \tGET/SET\n  //-------------------------------------\n\n  /**\n   * Get a subset of the properties which are in the partial props\n   */\n\n\n  _getPartialProperties(props) {\n    const options = this.get(); // remove attributes from the prop that are not in the partial\n\n    Object.keys(options).forEach(name => {\n      if (isUndef(props[name])) {\n        delete options[name];\n      }\n    });\n    return options;\n  }\n  /**\n   * Get the object's attributes.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.get());\n   */\n\n\n  get() {\n    const defaults = getDefaultsFromInstance(this);\n    Object.keys(defaults).forEach(attribute => {\n      if (Reflect.has(this, attribute)) {\n        const member = this[attribute];\n\n        if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n          defaults[attribute] = member.value;\n        } else if (member instanceof ToneWithContext) {\n          defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type\n        } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n          defaults[attribute] = member;\n        } else {\n          // remove all undefined and unserializable attributes\n          delete defaults[attribute];\n        }\n      }\n    });\n    return defaults;\n  }\n  /**\n   * Set multiple properties at once with an object.\n   * @example\n   * const filter = new Tone.Filter().toDestination();\n   * // set values using an object\n   * filter.set({\n   * \tfrequency: \"C6\",\n   * \ttype: \"highpass\"\n   * });\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n   * player.autostart = true;\n   */\n\n\n  set(props) {\n    Object.keys(props).forEach(attribute => {\n      if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n        if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n          // small optimization\n          if (this[attribute].value !== props[attribute]) {\n            this[attribute].value = props[attribute];\n          }\n        } else if (this[attribute] instanceof ToneWithContext) {\n          this[attribute].set(props[attribute]);\n        } else {\n          this[attribute] = props[attribute];\n        }\n      }\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/core/context/ToneWithContext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport class ToneWithContext extends Tone {\n    constructor() {\n        super();\n        const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n        if (this.defaultContext) {\n            this.context = this.defaultContext;\n        }\n        else {\n            this.context = options.context;\n        }\n    }\n    static getDefaults() {\n        return {\n            context: getContext(),\n        };\n    }\n    /**\n     * Return the current time of the Context clock plus the lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.now());\n     * }, 100);\n     */\n    now() {\n        return this.context.currentTime + this.context.lookAhead;\n    }\n    /**\n     * Return the current time of the Context clock without any lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.immediate());\n     * }, 100);\n     */\n    immediate() {\n        return this.context.currentTime;\n    }\n    /**\n     * The duration in seconds of one sample.\n     * @example\n     * console.log(Tone.Transport.sampleTime);\n     */\n    get sampleTime() {\n        return 1 / this.context.sampleRate;\n    }\n    /**\n     * The number of seconds of 1 processing block (128 samples)\n     * @example\n     * console.log(Tone.Destination.blockTime);\n     */\n    get blockTime() {\n        return 128 / this.context.sampleRate;\n    }\n    /**\n     * Convert the incoming time to seconds.\n     * This is calculated against the current [[Tone.Transport]] bpm\n     * @example\n     * const gain = new Tone.Gain();\n     * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n     * // ramp the tempo to 60 bpm over 30 seconds\n     * Tone.getTransport().bpm.rampTo(60, 30);\n     */\n    toSeconds(time) {\n        return new TimeClass(this.context, time).toSeconds();\n    }\n    /**\n     * Convert the input to a frequency number\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toFrequency(\"4n\"));\n     */\n    toFrequency(freq) {\n        return new FrequencyClass(this.context, freq).toFrequency();\n    }\n    /**\n     * Convert the input time into ticks\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toTicks(\"4n\"));\n     */\n    toTicks(time) {\n        return new TransportTimeClass(this.context, time).toTicks();\n    }\n    //-------------------------------------\n    // \tGET/SET\n    //-------------------------------------\n    /**\n     * Get a subset of the properties which are in the partial props\n     */\n    _getPartialProperties(props) {\n        const options = this.get();\n        // remove attributes from the prop that are not in the partial\n        Object.keys(options).forEach(name => {\n            if (isUndef(props[name])) {\n                delete options[name];\n            }\n        });\n        return options;\n    }\n    /**\n     * Get the object's attributes.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.get());\n     */\n    get() {\n        const defaults = getDefaultsFromInstance(this);\n        Object.keys(defaults).forEach(attribute => {\n            if (Reflect.has(this, attribute)) {\n                const member = this[attribute];\n                if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n                    defaults[attribute] = member.value;\n                }\n                else if (member instanceof ToneWithContext) {\n                    defaults[attribute] = member._getPartialProperties(defaults[attribute]);\n                    // otherwise make sure it's a serializable type\n                }\n                else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n                    defaults[attribute] = member;\n                }\n                else {\n                    // remove all undefined and unserializable attributes\n                    delete defaults[attribute];\n                }\n            }\n        });\n        return defaults;\n    }\n    /**\n     * Set multiple properties at once with an object.\n     * @example\n     * const filter = new Tone.Filter().toDestination();\n     * // set values using an object\n     * filter.set({\n     * \tfrequency: \"C6\",\n     * \ttype: \"highpass\"\n     * });\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n     * player.autostart = true;\n     */\n    set(props) {\n        Object.keys(props).forEach(attribute => {\n            if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n                if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n                    // small optimization\n                    if (this[attribute].value !== props[attribute]) {\n                        this[attribute].value = props[attribute];\n                    }\n                }\n                else if (this[attribute] instanceof ToneWithContext) {\n                    this[attribute].set(props[attribute]);\n                }\n                else {\n                    this[attribute] = props[attribute];\n                }\n            }\n        });\n        return this;\n    }\n}\n//# sourceMappingURL=ToneWithContext.js.map"]},"metadata":{},"sourceType":"module"}