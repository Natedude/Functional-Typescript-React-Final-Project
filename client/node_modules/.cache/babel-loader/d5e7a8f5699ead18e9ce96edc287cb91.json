{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nexport class Convolver extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    this._convolver = this.context.createConvolver();\n    const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer(options.url, buffer => {\n      this.buffer = buffer;\n      options.onload();\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (this._buffer.loaded) {\n      this.buffer = this._buffer;\n    } // initially set normalization\n\n\n    this.normalize = options.normalize; // connect it up\n\n    this.input.chain(this._convolver, this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalize: true,\n      onload: noOp\n    });\n  }\n  /**\n   * Load an impulse response url as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.buffer = yield this._buffer.load(url);\n    });\n  }\n  /**\n   * The convolver's buffer\n   */\n\n\n  get buffer() {\n    if (this._buffer.length) {\n      return this._buffer;\n    } else {\n      return null;\n    }\n  }\n\n  set buffer(buffer) {\n    if (buffer) {\n      this._buffer.set(buffer);\n    } // if it's already got a buffer, create a new one\n\n\n    if (this._convolver.buffer) {\n      // disconnect the old one\n      this.input.disconnect();\n\n      this._convolver.disconnect(); // create and connect a new one\n\n\n      this._convolver = this.context.createConvolver();\n      this.input.chain(this._convolver, this.output);\n    }\n\n    const buff = this._buffer.get();\n\n    this._convolver.buffer = buff ? buff : null;\n  }\n  /**\n   * The normalize property of the ConvolverNode interface is a boolean that\n   * controls whether the impulse response from the buffer will be scaled by\n   * an equal-power normalization when the buffer attribute is set, or not.\n   */\n\n\n  get normalize() {\n    return this._convolver.normalize;\n  }\n\n  set normalize(norm) {\n    this._convolver.normalize = norm;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._buffer.dispose();\n\n    this._convolver.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/filter/Convolver.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n        this.name = \"Convolver\";\n        /**\n         * The native ConvolverNode\n         */\n        this._convolver = this.context.createConvolver();\n        const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n        this._buffer = new ToneAudioBuffer(options.url, buffer => {\n            this.buffer = buffer;\n            options.onload();\n        });\n        this.input = new Gain({ context: this.context });\n        this.output = new Gain({ context: this.context });\n        // set if it's already loaded, set it immediately\n        if (this._buffer.loaded) {\n            this.buffer = this._buffer;\n        }\n        // initially set normalization\n        this.normalize = options.normalize;\n        // connect it up\n        this.input.chain(this._convolver, this.output);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            normalize: true,\n            onload: noOp,\n        });\n    }\n    /**\n     * Load an impulse response url as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     */\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.buffer = yield this._buffer.load(url);\n        });\n    }\n    /**\n     * The convolver's buffer\n     */\n    get buffer() {\n        if (this._buffer.length) {\n            return this._buffer;\n        }\n        else {\n            return null;\n        }\n    }\n    set buffer(buffer) {\n        if (buffer) {\n            this._buffer.set(buffer);\n        }\n        // if it's already got a buffer, create a new one\n        if (this._convolver.buffer) {\n            // disconnect the old one\n            this.input.disconnect();\n            this._convolver.disconnect();\n            // create and connect a new one\n            this._convolver = this.context.createConvolver();\n            this.input.chain(this._convolver, this.output);\n        }\n        const buff = this._buffer.get();\n        this._convolver.buffer = buff ? buff : null;\n    }\n    /**\n     * The normalize property of the ConvolverNode interface is a boolean that\n     * controls whether the impulse response from the buffer will be scaled by\n     * an equal-power normalization when the buffer attribute is set, or not.\n     */\n    get normalize() {\n        return this._convolver.normalize;\n    }\n    set normalize(norm) {\n        this._convolver.normalize = norm;\n    }\n    dispose() {\n        super.dispose();\n        this._buffer.dispose();\n        this._convolver.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=Convolver.js.map"]},"metadata":{},"sourceType":"module"}