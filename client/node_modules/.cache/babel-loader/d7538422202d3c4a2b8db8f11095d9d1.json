{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) => {\n  return (context, nativeContext) => {\n    const nativeListener = nativeContext.listener; // Bug #117: Only Chrome, Edge & Opera support the new interface already.\n\n    const createFakeAudioParams = () => {\n      const buffer = new Float32Array(1);\n      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      let isScriptProcessorNodeCreated = false;\n      let lastOrientation = [0, 0, -1, 0, 1, 0];\n      let lastPosition = [0, 0, 0];\n\n      const createScriptProcessorNode = () => {\n        if (isScriptProcessorNodeCreated) {\n          return;\n        }\n\n        isScriptProcessorNodeCreated = true;\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0); // tslint:disable-next-line:deprecation\n\n        scriptProcessorNode.onaudioprocess = ({\n          inputBuffer\n        }) => {\n          const orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2), getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n\n          if (orientation.some((value, index) => value !== lastOrientation[index])) {\n            nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n            lastOrientation = orientation;\n          }\n\n          const positon = [getFirstSample(inputBuffer, buffer, 6), getFirstSample(inputBuffer, buffer, 7), getFirstSample(inputBuffer, buffer, 8)];\n\n          if (positon.some((value, index) => value !== lastPosition[index])) {\n            nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n            lastPosition = positon;\n          }\n        };\n\n        channelMergerNode.connect(scriptProcessorNode);\n      };\n\n      const createSetOrientation = index => value => {\n        if (value !== lastOrientation[index]) {\n          lastOrientation[index] = value;\n          nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n      };\n\n      const createSetPosition = index => value => {\n        if (value !== lastPosition[index]) {\n          lastPosition[index] = value;\n          nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n      };\n\n      const createFakeAudioParam = (input, initialValue, setValue) => {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: initialValue\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.\n\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get() {\n            return initialValue;\n          }\n\n        });\n        /*\n         * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n\n        const audioParam = createAudioParam({\n          context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        overwriteAccessors(audioParam, 'value', get => () => get.call(audioParam), set => value => {\n          try {\n            set.call(audioParam, value);\n          } catch (err) {\n            if (err.code !== 9) {\n              throw err;\n            }\n          }\n\n          createScriptProcessorNode();\n\n          if (isOffline) {\n            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n            setValue(value);\n          }\n        });\n\n        audioParam.cancelAndHoldAtTime = (cancelAndHoldAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n\n          return (...args) => {\n            const value = cancelAndHoldAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.cancelAndHoldAtTime);\n\n        audioParam.cancelScheduledValues = (cancelScheduledValues => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n\n          return (...args) => {\n            const value = cancelScheduledValues.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.cancelScheduledValues);\n\n        audioParam.exponentialRampToValueAtTime = (exponentialRampToValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n\n          return (...args) => {\n            const value = exponentialRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.exponentialRampToValueAtTime);\n\n        audioParam.linearRampToValueAtTime = (linearRampToValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n\n          return (...args) => {\n            const value = linearRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.linearRampToValueAtTime);\n\n        audioParam.setTargetAtTime = (setTargetAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n\n          return (...args) => {\n            const value = setTargetAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setTargetAtTime);\n\n        audioParam.setValueAtTime = (setValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n\n          return (...args) => {\n            const value = setValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setValueAtTime);\n\n        audioParam.setValueCurveAtTime = (setValueCurveAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n\n          return (...args) => {\n            const value = setValueCurveAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setValueCurveAtTime);\n\n        return audioParam;\n      };\n\n      return {\n        forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n        forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n        forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n        positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n        positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n        positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n        upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n        upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n        upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n      };\n    };\n\n    const {\n      forwardX,\n      forwardY,\n      forwardZ,\n      positionX,\n      positionY,\n      positionZ,\n      upX,\n      upY,\n      upZ\n    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n\n      get forwardY() {\n        return forwardY;\n      },\n\n      get forwardZ() {\n        return forwardZ;\n      },\n\n      get positionX() {\n        return positionX;\n      },\n\n      get positionY() {\n        return positionY;\n      },\n\n      get positionZ() {\n        return positionZ;\n      },\n\n      get upX() {\n        return upX;\n      },\n\n      get upY() {\n        return upY;\n      },\n\n      get upZ() {\n        return upZ;\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-listener-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome, Edge & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const buffer = new Float32Array(1);\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            let isScriptProcessorNodeCreated = false;\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            const createScriptProcessorNode = () => {\n                if (isScriptProcessorNodeCreated) {\n                    return;\n                }\n                isScriptProcessorNodeCreated = true;\n                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n                // tslint:disable-next-line:deprecation\n                scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                    const orientation = [\n                        getFirstSample(inputBuffer, buffer, 0),\n                        getFirstSample(inputBuffer, buffer, 1),\n                        getFirstSample(inputBuffer, buffer, 2),\n                        getFirstSample(inputBuffer, buffer, 3),\n                        getFirstSample(inputBuffer, buffer, 4),\n                        getFirstSample(inputBuffer, buffer, 5)\n                    ];\n                    if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                        lastOrientation = orientation;\n                    }\n                    const positon = [\n                        getFirstSample(inputBuffer, buffer, 6),\n                        getFirstSample(inputBuffer, buffer, 7),\n                        getFirstSample(inputBuffer, buffer, 8)\n                    ];\n                    if (positon.some((value, index) => value !== lastPosition[index])) {\n                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                        lastPosition = positon;\n                    }\n                };\n                channelMergerNode.connect(scriptProcessorNode);\n            };\n            const createSetOrientation = (index) => (value) => {\n                if (value !== lastOrientation[index]) {\n                    lastOrientation[index] = value;\n                    nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n                }\n            };\n            const createSetPosition = (index) => (value) => {\n                if (value !== lastPosition[index]) {\n                    lastPosition[index] = value;\n                    nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n                }\n            };\n            const createFakeAudioParam = (input, initialValue, setValue) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: initialValue\n                });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return initialValue;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                const audioParam = createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n                overwriteAccessors(audioParam, 'value', (get) => () => get.call(audioParam), (set) => (value) => {\n                    try {\n                        set.call(audioParam, value);\n                    }\n                    catch (err) {\n                        if (err.code !== 9) {\n                            throw err;\n                        }\n                    }\n                    createScriptProcessorNode();\n                    if (isOffline) {\n                        // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n                        setValue(value);\n                    }\n                });\n                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = cancelAndHoldAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.cancelAndHoldAtTime);\n                audioParam.cancelScheduledValues = ((cancelScheduledValues) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = cancelScheduledValues.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.cancelScheduledValues);\n                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = exponentialRampToValueAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.exponentialRampToValueAtTime);\n                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = linearRampToValueAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.linearRampToValueAtTime);\n                audioParam.setTargetAtTime = ((setTargetAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = setTargetAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.setTargetAtTime);\n                audioParam.setValueAtTime = ((setValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = setValueAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.setValueAtTime);\n                audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = setValueCurveAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.setValueCurveAtTime);\n                return audioParam;\n            };\n            return {\n                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=audio-listener-factory.js.map"]},"metadata":{},"sourceType":"module"}