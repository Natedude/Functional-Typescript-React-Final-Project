{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\n\nexport class FrequencyClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Frequency\";\n    this.defaultUnits = \"hz\";\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n\n\n  static get A4() {\n    return getA4();\n  }\n\n  static set A4(freq) {\n    setA4(freq);\n  } //-------------------------------------\n  // \tAUGMENT BASE EXPRESSIONS\n  //-------------------------------------\n\n\n  _getExpressions() {\n    return Object.assign({}, super._getExpressions(), {\n      midi: {\n        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\n        method(value) {\n          if (this.defaultUnits === \"midi\") {\n            return value;\n          } else {\n            return FrequencyClass.mtof(value);\n          }\n        }\n\n      },\n      note: {\n        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\n        method(pitch, octave) {\n          const index = noteToScaleIndex[pitch.toLowerCase()];\n          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\n          if (this.defaultUnits === \"midi\") {\n            return noteNumber;\n          } else {\n            return FrequencyClass.mtof(noteNumber);\n          }\n        }\n\n      },\n      tr: {\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\n        method(m, q, s) {\n          let total = 1;\n\n          if (m && m !== \"0\") {\n            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        }\n\n      }\n    });\n  } //-------------------------------------\n  // \tEXPRESSIONS\n  //-------------------------------------\n\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return  A new transposed frequency\n   * @example\n   * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n  }\n  /**\n   * Takes an array of semitone intervals and returns\n   * an array of frequencies transposed by those intervals.\n   * @return  Returns an array of Frequencies\n   * @example\n   * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n   */\n\n\n  harmonize(intervals) {\n    return intervals.map(interval => {\n      return this.transpose(interval);\n    });\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Frequency(\"C4\").toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return ftom(this.valueOf());\n  }\n  /**\n   * Return the value of the frequency in Scientific Pitch Notation\n   * @example\n   * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n   */\n\n\n  toNote() {\n    const freq = this.toFrequency();\n    const log = Math.log2(freq / FrequencyClass.A4);\n    let noteNumber = Math.round(12 * log) + 57;\n    const octave = Math.floor(noteNumber / 12);\n\n    if (octave < 0) {\n      noteNumber += -12 * octave;\n    }\n\n    const noteName = scaleIndexToNote[noteNumber % 12];\n    return noteName + octave.toString();\n  }\n  /**\n   * Return the duration of one cycle in seconds.\n   */\n\n\n  toSeconds() {\n    return 1 / super.toSeconds();\n  }\n  /**\n   * Return the duration of one cycle in ticks\n   */\n\n\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n\n    const quarters = this.valueOf() / quarterTime;\n    return Math.floor(quarters * this._getPPQ());\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS HELPERS\n  //-------------------------------------\n\n  /**\n   * With no arguments, return 0\n   */\n\n\n  _noArg() {\n    return 0;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return freq;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return 1 / super._beatsToUnits(beats);\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return 1 / seconds;\n  }\n  /**\n   * Convert a MIDI note to frequency value.\n   * @param  midi The midi number to convert.\n   * @return The corresponding frequency value\n   */\n\n\n  static mtof(midi) {\n    return mtof(midi);\n  }\n  /**\n   * Convert a frequency value to a MIDI note.\n   * @param frequency The value to frequency value to convert.\n   */\n\n\n  static ftom(frequency) {\n    return ftom(frequency);\n  }\n\n} //-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\n\nconst noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\n\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\n\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Frequency.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass extends TimeClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"Frequency\";\n        this.defaultUnits = \"hz\";\n    }\n    /**\n     * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n     * to generate all the other pitch values from notes. A4's values in Hertz.\n     */\n    static get A4() {\n        return getA4();\n    }\n    static set A4(freq) {\n        setA4(freq);\n    }\n    //-------------------------------------\n    // \tAUGMENT BASE EXPRESSIONS\n    //-------------------------------------\n    _getExpressions() {\n        return Object.assign({}, super._getExpressions(), {\n            midi: {\n                regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n                method(value) {\n                    if (this.defaultUnits === \"midi\") {\n                        return value;\n                    }\n                    else {\n                        return FrequencyClass.mtof(value);\n                    }\n                },\n            },\n            note: {\n                regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n                method(pitch, octave) {\n                    const index = noteToScaleIndex[pitch.toLowerCase()];\n                    const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n                    if (this.defaultUnits === \"midi\") {\n                        return noteNumber;\n                    }\n                    else {\n                        return FrequencyClass.mtof(noteNumber);\n                    }\n                },\n            },\n            tr: {\n                regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n                method(m, q, s) {\n                    let total = 1;\n                    if (m && m !== \"0\") {\n                        total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n                    }\n                    if (q && q !== \"0\") {\n                        total *= this._beatsToUnits(parseFloat(q));\n                    }\n                    if (s && s !== \"0\") {\n                        total *= this._beatsToUnits(parseFloat(s) / 4);\n                    }\n                    return total;\n                },\n            },\n        });\n    }\n    //-------------------------------------\n    // \tEXPRESSIONS\n    //-------------------------------------\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return  A new transposed frequency\n     * @example\n     * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n     */\n    transpose(interval) {\n        return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n    }\n    /**\n     * Takes an array of semitone intervals and returns\n     * an array of frequencies transposed by those intervals.\n     * @return  Returns an array of Frequencies\n     * @example\n     * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n     */\n    harmonize(intervals) {\n        return intervals.map(interval => {\n            return this.transpose(interval);\n        });\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Frequency(\"C4\").toMidi(); // 60\n     */\n    toMidi() {\n        return ftom(this.valueOf());\n    }\n    /**\n     * Return the value of the frequency in Scientific Pitch Notation\n     * @example\n     * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n     */\n    toNote() {\n        const freq = this.toFrequency();\n        const log = Math.log2(freq / FrequencyClass.A4);\n        let noteNumber = Math.round(12 * log) + 57;\n        const octave = Math.floor(noteNumber / 12);\n        if (octave < 0) {\n            noteNumber += -12 * octave;\n        }\n        const noteName = scaleIndexToNote[noteNumber % 12];\n        return noteName + octave.toString();\n    }\n    /**\n     * Return the duration of one cycle in seconds.\n     */\n    toSeconds() {\n        return 1 / super.toSeconds();\n    }\n    /**\n     * Return the duration of one cycle in ticks\n     */\n    toTicks() {\n        const quarterTime = this._beatsToUnits(1);\n        const quarters = this.valueOf() / quarterTime;\n        return Math.floor(quarters * this._getPPQ());\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS HELPERS\n    //-------------------------------------\n    /**\n     * With no arguments, return 0\n     */\n    _noArg() {\n        return 0;\n    }\n    /**\n     * Returns the value of a frequency in the current units\n     */\n    _frequencyToUnits(freq) {\n        return freq;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ()));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return 1 / super._beatsToUnits(beats);\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return 1 / seconds;\n    }\n    /**\n     * Convert a MIDI note to frequency value.\n     * @param  midi The midi number to convert.\n     * @return The corresponding frequency value\n     */\n    static mtof(midi) {\n        return mtof(midi);\n    }\n    /**\n     * Convert a frequency value to a MIDI note.\n     * @param frequency The value to frequency value to convert.\n     */\n    static ftom(frequency) {\n        return ftom(frequency);\n    }\n}\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n/**\n * Note to scale index.\n * @hidden\n */\nconst noteToScaleIndex = {\n    cbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n    dbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n    ebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n    fbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n    gbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n    abb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n    bbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value, units) {\n    return new FrequencyClass(getContext(), value, units);\n}\n//# sourceMappingURL=Frequency.js.map"]},"metadata":{},"sourceType":"module"}