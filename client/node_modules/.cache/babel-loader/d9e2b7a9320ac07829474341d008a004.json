{"ast":null,"code":"var _jsxFileName = \"/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Instruments.tsx\",\n    _s = $RefreshSig$();\n\n// 3rd party library imports\nimport React, { useState, useEffect } from 'react';\nimport * as Tone from 'tone'; // project imports\n\nimport { DispatchAction } from './Reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Instrument {\n  constructor(name, component) {\n    this.name = void 0;\n    this.component = void 0;\n    this.name = name;\n    this.component = component;\n  }\n\n}\n\nfunction TopNav({\n  name\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'w-100 h3 bb b--light-gray flex justify-between items-center ph4',\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_c = TopNav;\nexport const InstrumentContainer = ({\n  instrument,\n  state,\n  dispatch\n}) => {\n  _s();\n\n  const InstrumentComponent = instrument.component;\n  const [synth, setSynth] = useState(new Tone.Synth({\n    oscillator: {\n      type: 'sine'\n    }\n  }).toDestination());\n  const [sampler, setSampler] = useState(new Tone.Sampler({\n    urls: {\n      A1: \"Kick.wav\"\n    },\n    baseUrl: \"https://http://localhost:3000/\"\n  }).toDestination());\n  const notes = state.get('notes');\n  useEffect(() => {\n    if (notes && synth) {\n      let eachNote = notes.split(' ');\n      let noteObjs = eachNote.map((note, idx) => ({\n        idx,\n        time: `+${idx / 4}`,\n        note,\n        velocity: 1\n      }));\n      new Tone.Part((time, value) => {\n        // the value is an object which contains both the note and the velocity\n        synth.triggerAttackRelease(value.note, '4n', time, value.velocity);\n\n        if (value.idx === eachNote.length - 1) {\n          dispatch(new DispatchAction('STOP_SONG'));\n        }\n      }, noteObjs).start(0);\n      Tone.Transport.start();\n      return () => {\n        Tone.Transport.cancel();\n      };\n    }\n\n    return () => {};\n  }, [notes, synth, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TopNav, {\n      name: instrument.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'bg-white absolute right-0 left-0',\n      style: {\n        top: '4rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(InstrumentComponent, {\n        name: instrument.name,\n        state: state,\n        dispatch: dispatch,\n        synth: synth,\n        setSynth: setSynth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InstrumentContainer, \"1EN+fiW5Ms1TBBzmj3SK8l8hOWY=\");\n\n_c2 = InstrumentContainer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TopNav\");\n$RefreshReg$(_c2, \"InstrumentContainer\");","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/Instruments.tsx"],"names":["React","useState","useEffect","Tone","DispatchAction","Instrument","constructor","name","component","TopNav","InstrumentContainer","instrument","state","dispatch","InstrumentComponent","synth","setSynth","Synth","oscillator","type","toDestination","sampler","setSampler","Sampler","urls","A1","baseUrl","notes","get","eachNote","split","noteObjs","map","note","idx","time","velocity","Part","value","triggerAttackRelease","length","start","Transport","cancel","top"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,WAA/B;;AAeA,OAAO,MAAMC,UAAN,CAAiB;AAItBC,EAAAA,WAAW,CAACC,IAAD,EAAeC,SAAf,EAAqD;AAAA,SAHhDD,IAGgD;AAAA,SAFhDC,SAEgD;AAC9D,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAPqB;;AAUxB,SAASC,MAAT,CAAgB;AAAEF,EAAAA;AAAF,CAAhB,EAA4C;AAC1C,sBACE;AACE,IAAA,SAAS,EACP,iEAFJ;AAAA,2BAKE;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;KAVQE,M;AAkBT,OAAO,MAAMC,mBAAuD,GAAG,CAAC;AACtEC,EAAAA,UADsE;AAEtEC,EAAAA,KAFsE;AAGtEC,EAAAA;AAHsE,CAAD,KAIvC;AAAA;;AAC9B,QAAMC,mBAAmB,GAAGH,UAAU,CAACH,SAAvC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAChC,IAAIE,IAAI,CAACc,KAAT,CAAe;AACbC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADC,GAAf,EAEGC,aAFH,EADgC,CAAlC;AAMA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CACpC,IAAIE,IAAI,CAACoB,OAAT,CAAiB;AACfC,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAE;AADA,KADS;AAIfC,IAAAA,OAAO,EAAE;AAJM,GAAjB,EAKGN,aALH,EADoC,CAAtC;AASA,QAAMO,KAAK,GAAGf,KAAK,CAACgB,GAAN,CAAU,OAAV,CAAd;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,KAAK,IAAIZ,KAAb,EAAoB;AAClB,UAAIc,QAAQ,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAf;AACA,UAAIC,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAACC,IAAD,EAAeC,GAAf,MAAgC;AAC1DA,QAAAA,GAD0D;AAE1DC,QAAAA,IAAI,EAAG,IAAGD,GAAG,GAAG,CAAE,EAFwC;AAG1DD,QAAAA,IAH0D;AAI1DG,QAAAA,QAAQ,EAAE;AAJgD,OAAhC,CAAb,CAAf;AAOA,UAAIjC,IAAI,CAACkC,IAAT,CAAc,CAACF,IAAD,EAAOG,KAAP,KAAiB;AAC7B;AACAvB,QAAAA,KAAK,CAACwB,oBAAN,CAA2BD,KAAK,CAACL,IAAjC,EAAuC,IAAvC,EAA6CE,IAA7C,EAAmDG,KAAK,CAACF,QAAzD;;AACA,YAAIE,KAAK,CAACJ,GAAN,KAAcL,QAAQ,CAACW,MAAT,GAAkB,CAApC,EAAuC;AACrC3B,UAAAA,QAAQ,CAAC,IAAIT,cAAJ,CAAmB,WAAnB,CAAD,CAAR;AACD;AACF,OAND,EAMG2B,QANH,EAMaU,KANb,CAMmB,CANnB;AAQAtC,MAAAA,IAAI,CAACuC,SAAL,CAAeD,KAAf;AAEA,aAAO,MAAM;AACXtC,QAAAA,IAAI,CAACuC,SAAL,CAAeC,MAAf;AACD,OAFD;AAGD;;AAED,WAAO,MAAM,CAAE,CAAf;AACD,GA1BQ,EA0BN,CAAChB,KAAD,EAAQZ,KAAR,EAAeF,QAAf,CA1BM,CAAT;AA4BA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEF,UAAU,CAACJ;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,SAAS,EAAE,kCADb;AAEE,MAAA,KAAK,EAAE;AAAEqC,QAAAA,GAAG,EAAE;AAAP,OAFT;AAAA,6BAIE,QAAC,mBAAD;AACE,QAAA,IAAI,EAAEjC,UAAU,CAACJ,IADnB;AAEE,QAAA,KAAK,EAAEK,KAFT;AAGE,QAAA,QAAQ,EAAEC,QAHZ;AAIE,QAAA,KAAK,EAAEE,KAJT;AAKE,QAAA,QAAQ,EAAEC;AALZ;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CApEM;;GAAMN,mB;;MAAAA,mB","sourcesContent":["// 3rd party library imports\nimport React, { useState, useEffect } from 'react';\nimport * as Tone from 'tone';\n\n// project imports\nimport { DispatchAction } from './Reducer';\nimport { AppState } from './State';\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of an Instruments.\n ** ------------------------------------------------------------------------ */\n\nexport interface InstrumentProps {\n  state: AppState;\n  dispatch: React.Dispatch<DispatchAction>;\n  name: string;\n  synth: Tone.Synth;\n  setSynth: (f: (oldSynth: Tone.Synth) => Tone.Synth) => void;\n}\n\nexport class Instrument {\n  public readonly name: string;\n  public readonly component: React.FC<InstrumentProps>;\n\n  constructor(name: string, component: React.FC<InstrumentProps>) {\n    this.name = name;\n    this.component = component;\n  }\n}\n\nfunction TopNav({ name }: { name: string }) {\n  return (\n    <div\n      className={\n        'w-100 h3 bb b--light-gray flex justify-between items-center ph4'\n      }\n    >\n      <div>{name}</div>\n    </div>\n  );\n}\n\ninterface InstrumentContainerProps {\n  state: AppState;\n  dispatch: React.Dispatch<DispatchAction>;\n  instrument: Instrument;\n}\n\nexport const InstrumentContainer: React.FC<InstrumentContainerProps> = ({\n  instrument,\n  state,\n  dispatch,\n}: InstrumentContainerProps) => {\n  const InstrumentComponent = instrument.component;\n  const [synth, setSynth] = useState(\n    new Tone.Synth({\n      oscillator: { type: 'sine' } as Tone.OmniOscillatorOptions,\n    }).toDestination(),\n  );\n\n  const [sampler, setSampler] = useState(\n    new Tone.Sampler({\n      urls: {\n        A1: \"Kick.wav\",\n      },\n      baseUrl: \"https://http://localhost:3000/\",\n    }).toDestination()\n  );\n\n  const notes = state.get('notes');\n\n  useEffect(() => {\n    if (notes && synth) {\n      let eachNote = notes.split(' ');\n      let noteObjs = eachNote.map((note: string, idx: number) => ({\n        idx,\n        time: `+${idx / 4}`,\n        note,\n        velocity: 1,\n      }));\n\n      new Tone.Part((time, value) => {\n        // the value is an object which contains both the note and the velocity\n        synth.triggerAttackRelease(value.note, '4n', time, value.velocity);\n        if (value.idx === eachNote.length - 1) {\n          dispatch(new DispatchAction('STOP_SONG'));\n        }\n      }, noteObjs).start(0);\n\n      Tone.Transport.start();\n\n      return () => {\n        Tone.Transport.cancel();\n      };\n    }\n\n    return () => {};\n  }, [notes, synth, dispatch]);\n\n  return (\n    <div>\n      <TopNav name={instrument.name} />\n      <div\n        className={'bg-white absolute right-0 left-0'}\n        style={{ top: '4rem' }}\n      >\n        <InstrumentComponent\n          name={instrument.name}\n          state={state}\n          dispatch={dispatch}\n          synth={synth}\n          setSynth={setSynth}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}