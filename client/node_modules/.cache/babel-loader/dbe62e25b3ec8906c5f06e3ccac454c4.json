{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\n\nexport class FatOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n    this.name = \"FatOscillator\";\n    /**\n     * The array of oscillators\n     */\n\n    this._oscillators = [];\n    const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this._spread = options.spread;\n    this._type = options.type;\n    this._phase = options.phase;\n    this._partials = options.partials;\n    this._partialCount = options.partialCount; // set the count initially\n\n    this.count = options.count;\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      count: 3,\n      spread: 20,\n      type: \"sawtooth\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._forEach(osc => osc.start(time));\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._forEach(osc => osc.stop(time));\n  }\n\n  _restart(time) {\n    this._forEach(osc => osc.restart(time));\n  }\n  /**\n   * Iterate over all of the oscillators\n   */\n\n\n  _forEach(iterator) {\n    for (let i = 0; i < this._oscillators.length; i++) {\n      iterator(this._oscillators[i], i);\n    }\n  }\n  /**\n   * The type of the oscillator\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._type = type;\n\n    this._forEach(osc => osc.type = type);\n  }\n  /**\n   * The detune spread between the oscillators. If \"count\" is\n   * set to 3 oscillators and the \"spread\" is set to 40,\n   * the three oscillators would be detuned like this: [-20, 0, 20]\n   * for a total detune spread of 40 cents.\n   * @example\n   * const fatOsc = new Tone.FatOscillator().toDestination().start();\n   * fatOsc.spread = 70;\n   */\n\n\n  get spread() {\n    return this._spread;\n  }\n\n  set spread(spread) {\n    this._spread = spread;\n\n    if (this._oscillators.length > 1) {\n      const start = -spread / 2;\n      const step = spread / (this._oscillators.length - 1);\n\n      this._forEach((osc, i) => osc.detune.value = start + step * i);\n    }\n  }\n  /**\n   * The number of detuned oscillators. Must be an integer greater than 1.\n   * @example\n   * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n   * // use 4 sawtooth oscillators\n   * fatOsc.count = 4;\n   */\n\n\n  get count() {\n    return this._oscillators.length;\n  }\n\n  set count(count) {\n    assertRange(count, 1);\n\n    if (this._oscillators.length !== count) {\n      // dispose the previous oscillators\n      this._forEach(osc => osc.dispose());\n\n      this._oscillators = [];\n\n      for (let i = 0; i < count; i++) {\n        const osc = new Oscillator({\n          context: this.context,\n          volume: -6 - count * 1.1,\n          type: this._type,\n          phase: this._phase + i / count * 360,\n          partialCount: this._partialCount,\n          onstop: i === 0 ? () => this.onstop(this) : noOp\n        });\n\n        if (this.type === \"custom\") {\n          osc.partials = this._partials;\n        }\n\n        this.frequency.connect(osc.frequency);\n        this.detune.connect(osc.detune);\n        osc.detune.overridden = false;\n        osc.connect(this.output);\n        this._oscillators[i] = osc;\n      } // set the spread\n\n\n      this.spread = this._spread;\n\n      if (this.state === \"started\") {\n        this._forEach(osc => osc.start());\n      }\n    }\n  }\n\n  get phase() {\n    return this._phase;\n  }\n\n  set phase(phase) {\n    this._phase = phase;\n\n    this._forEach((osc, i) => osc.phase = this._phase + i / this.count * 360);\n  }\n\n  get baseType() {\n    return this._oscillators[0].baseType;\n  }\n\n  set baseType(baseType) {\n    this._forEach(osc => osc.baseType = baseType);\n\n    this._type = this._oscillators[0].type;\n  }\n\n  get partials() {\n    return this._oscillators[0].partials;\n  }\n\n  set partials(partials) {\n    this._partials = partials;\n    this._partialCount = this._partials.length;\n\n    if (partials.length) {\n      this._type = \"custom\";\n\n      this._forEach(osc => osc.partials = partials);\n    }\n  }\n\n  get partialCount() {\n    return this._oscillators[0].partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._partialCount = partialCount;\n\n    this._forEach(osc => osc.partialCount = partialCount);\n\n    this._type = this._oscillators[0].type;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._forEach(osc => osc.dispose());\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/source/oscillator/FatOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source {\n    constructor() {\n        super(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n        this.name = \"FatOscillator\";\n        /**\n         * The array of oscillators\n         */\n        this._oscillators = [];\n        const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        this._spread = options.spread;\n        this._type = options.type;\n        this._phase = options.phase;\n        this._partials = options.partials;\n        this._partialCount = options.partialCount;\n        // set the count initially\n        this.count = options.count;\n        readOnly(this, [\"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), {\n            count: 3,\n            spread: 20,\n            type: \"sawtooth\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        time = this.toSeconds(time);\n        this._forEach(osc => osc.start(time));\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        time = this.toSeconds(time);\n        this._forEach(osc => osc.stop(time));\n    }\n    _restart(time) {\n        this._forEach(osc => osc.restart(time));\n    }\n    /**\n     * Iterate over all of the oscillators\n     */\n    _forEach(iterator) {\n        for (let i = 0; i < this._oscillators.length; i++) {\n            iterator(this._oscillators[i], i);\n        }\n    }\n    /**\n     * The type of the oscillator\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        this._type = type;\n        this._forEach(osc => osc.type = type);\n    }\n    /**\n     * The detune spread between the oscillators. If \"count\" is\n     * set to 3 oscillators and the \"spread\" is set to 40,\n     * the three oscillators would be detuned like this: [-20, 0, 20]\n     * for a total detune spread of 40 cents.\n     * @example\n     * const fatOsc = new Tone.FatOscillator().toDestination().start();\n     * fatOsc.spread = 70;\n     */\n    get spread() {\n        return this._spread;\n    }\n    set spread(spread) {\n        this._spread = spread;\n        if (this._oscillators.length > 1) {\n            const start = -spread / 2;\n            const step = spread / (this._oscillators.length - 1);\n            this._forEach((osc, i) => osc.detune.value = start + step * i);\n        }\n    }\n    /**\n     * The number of detuned oscillators. Must be an integer greater than 1.\n     * @example\n     * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n     * // use 4 sawtooth oscillators\n     * fatOsc.count = 4;\n     */\n    get count() {\n        return this._oscillators.length;\n    }\n    set count(count) {\n        assertRange(count, 1);\n        if (this._oscillators.length !== count) {\n            // dispose the previous oscillators\n            this._forEach(osc => osc.dispose());\n            this._oscillators = [];\n            for (let i = 0; i < count; i++) {\n                const osc = new Oscillator({\n                    context: this.context,\n                    volume: -6 - count * 1.1,\n                    type: this._type,\n                    phase: this._phase + (i / count) * 360,\n                    partialCount: this._partialCount,\n                    onstop: i === 0 ? () => this.onstop(this) : noOp,\n                });\n                if (this.type === \"custom\") {\n                    osc.partials = this._partials;\n                }\n                this.frequency.connect(osc.frequency);\n                this.detune.connect(osc.detune);\n                osc.detune.overridden = false;\n                osc.connect(this.output);\n                this._oscillators[i] = osc;\n            }\n            // set the spread\n            this.spread = this._spread;\n            if (this.state === \"started\") {\n                this._forEach(osc => osc.start());\n            }\n        }\n    }\n    get phase() {\n        return this._phase;\n    }\n    set phase(phase) {\n        this._phase = phase;\n        this._forEach((osc, i) => osc.phase = this._phase + (i / this.count) * 360);\n    }\n    get baseType() {\n        return this._oscillators[0].baseType;\n    }\n    set baseType(baseType) {\n        this._forEach(osc => osc.baseType = baseType);\n        this._type = this._oscillators[0].type;\n    }\n    get partials() {\n        return this._oscillators[0].partials;\n    }\n    set partials(partials) {\n        this._partials = partials;\n        this._partialCount = this._partials.length;\n        if (partials.length) {\n            this._type = \"custom\";\n            this._forEach(osc => osc.partials = partials);\n        }\n    }\n    get partialCount() {\n        return this._oscillators[0].partialCount;\n    }\n    set partialCount(partialCount) {\n        this._partialCount = partialCount;\n        this._forEach(osc => osc.partialCount = partialCount);\n        this._type = this._oscillators[0].type;\n    }\n    asArray(length = 1024) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this._forEach(osc => osc.dispose());\n        return this;\n    }\n}\n//# sourceMappingURL=FatOscillator.js.map"]},"metadata":{},"sourceType":"module"}