{"ast":null,"code":"import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n/**\n * Create a new AudioContext\n */\n\nexport function createAudioContext(options) {\n  return new stdAudioContext(options);\n}\n/**\n * Create a new OfflineAudioContext\n */\n\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n  return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\n\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\n\nexport const hasAudioContext = theWindow && (theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n  assert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\"); // @ts-ignore\n\n  return new stdAudioWorkletNode(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\n\nexport { isSupported as supported } from \"standardized-audio-context\";","map":{"version":3,"sources":["../../../../Tone/core/context/AudioContext.ts"],"names":[],"mappings":"AAAA,SACC,YAAY,IAAI,eADjB,EAEC,gBAAgB,IAAI,mBAFrB,EAGC,mBAAmB,IAAI,sBAHxB,QAIO,4BAJP;AAKA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,SAAT,QAA0B,mBAA1B;AAEA;;AAEG;;AACH,OAAM,SAAU,kBAAV,CAA6B,OAA7B,EAA0D;AAC/D,SAAO,IAAI,eAAJ,CAAoB,OAApB,CAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,yBAAV,CAAoC,QAApC,EAAsD,MAAtD,EAAsE,UAAtE,EAAwF;AAC7F,SAAO,IAAI,sBAAJ,CAA2B,QAA3B,EAAqC,MAArC,EAA6C,UAA7C,CAAP;AACA;AAeD;;;AAGG;;AACH,OAAO,MAAM,SAAS,GAAsB,OAAO,IAAP,KAAgB,QAAhB,GAA2B,IAA3B,GAAkC,IAAvE;AAEP;;;AAGG;;AACH,OAAO,MAAM,eAAe,GAAG,SAAS,KACtC,SAAS,CAAC,cAAV,CAAyB,cAAzB,KAA4C,SAAS,CAAC,cAAV,CAAyB,oBAAzB,CADN,CAAjC;AAGP,OAAM,SAAU,sBAAV,CAAiC,OAAjC,EAA2D,IAA3D,EAAyE,OAAzE,EAAmH;AACxH,EAAA,MAAM,CAAC,SAAS,CAAC,mBAAD,CAAV,EAAiC,+DAAjC,CAAN,CADwH,CAExH;;AACA,SAAO,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,IAAjC,EAAuC,OAAvC,CAAP;AACA;AAED;;;;AAIG;;AACH,SAAS,WAAW,IAAI,SAAxB,QAAyC,4BAAzC","sourceRoot":"","sourcesContent":["import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options) {\n    return new stdAudioContext(options);\n}\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n    return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n    (theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n    assert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n    // @ts-ignore\n    return new stdAudioWorkletNode(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";\n//# sourceMappingURL=AudioContext.js.map"]},"metadata":{},"sourceType":"module"}