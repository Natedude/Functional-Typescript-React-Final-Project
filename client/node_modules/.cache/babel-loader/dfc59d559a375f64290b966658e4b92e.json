{"ast":null,"code":"import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n  return nativeOfflineAudioContext => {\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n      // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {\n        if (!isOfflineAudioContextCurrentTimeSupported) {\n          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n          nativeOfflineAudioContext.oncomplete = () => {\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            scriptProcessorNode.disconnect();\n          };\n\n          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n\n\n          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n        }\n\n        return nativeOfflineAudioContext.startRendering();\n      });\n    }\n\n    return new Promise(resolve => {\n      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        gain: 0\n      });\n\n      nativeOfflineAudioContext.oncomplete = event => {\n        gainNode.disconnect();\n        resolve(event.renderedBuffer);\n      };\n\n      gainNode.connect(nativeOfflineAudioContext.destination);\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","map":{"version":3,"sources":["../../../src/factories/render-native-offline-audio-context.ts"],"names":[],"mappings":"AAAA,SAAS,kBAAT,QAAmC,iCAAnC;AAIA,OAAO,MAAM,qCAAqC,GAA4C,CAC1F,eAD0F,EAE1F,oBAF0F,EAG1F,+BAH0F,EAI1F,yCAJ0F,KAK1F;AACA,SAAQ,yBAAD,IAA8B;AACjC;AACA,QAAI,eAAe,CAAC,kBAAD,EAAqB,MAAM,kBAAkB,CAAC,yBAAD,CAA7C,CAAnB,EAA8F;AAC1F;AACA,aAAO,OAAO,CAAC,OAAR,CACH,eAAe,CAAC,yCAAD,EAA4C,yCAA5C,CADZ,EAEL,IAFK,CAEC,yCAAD,IAA8C;AACjD,YAAI,CAAC,yCAAL,EAAgD;AAC5C,gBAAM,mBAAmB,GAAG,+BAA+B,CAAC,yBAAD,EAA4B,GAA5B,EAAiC,CAAjC,EAAoC,CAApC,CAA3D;;AAEA,UAAA,yBAAyB,CAAC,UAA1B,GAAuC,MAAK;AACxC,YAAA,mBAAmB,CAAC,cAApB,GAAqC,IAArC,CADwC,CACG;;AAC3C,YAAA,mBAAmB,CAAC,UAApB;AACH,WAHD;;AAIA,UAAA,mBAAmB,CAAC,cAApB,GAAqC,MAAM,yBAAyB,CAAC,WAArE,CAP4C,CAOsC;;;AAElF,UAAA,mBAAmB,CAAC,OAApB,CAA4B,yBAAyB,CAAC,WAAtD;AACH;;AAED,eAAO,yBAAyB,CAAC,cAA1B,EAAP;AACH,OAhBM,CAAP;AAiBH;;AAED,WAAO,IAAI,OAAJ,CAAiC,OAAD,IAAY;AAC/C;AACA,YAAM,QAAQ,GAAG,oBAAoB,CAAC,yBAAD,EAA4B;AAC7D,QAAA,YAAY,EAAE,CAD+C;AAE7D,QAAA,gBAAgB,EAAE,UAF2C;AAG7D,QAAA,qBAAqB,EAAE,UAHsC;AAI7D,QAAA,IAAI,EAAE;AAJuD,OAA5B,CAArC;;AAOA,MAAA,yBAAyB,CAAC,UAA1B,GAAwC,KAAD,IAAwC;AAC3E,QAAA,QAAQ,CAAC,UAAT;AAEA,QAAA,OAAO,CAAC,KAAK,CAAC,cAAP,CAAP;AACH,OAJD;;AAMA,MAAA,QAAQ,CAAC,OAAT,CAAiB,yBAAyB,CAAC,WAA3C;AAEA,MAAA,yBAAyB,CAAC,cAA1B;AACH,KAlBM,CAAP;AAmBH,GA1CD;AA2CH,CAjDM","sourceRoot":"","sourcesContent":["import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n            return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=render-native-offline-audio-context.js.map"]},"metadata":{},"sourceType":"module"}