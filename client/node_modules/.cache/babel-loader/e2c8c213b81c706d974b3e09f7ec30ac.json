{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\n\nexport function generateWaveform(instance, length) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const duration = length / instance.context.sampleRate;\n    const context = new OfflineContext(1, duration, instance.context.sampleRate);\n    const clone = new instance.constructor(Object.assign(instance.get(), {\n      // should do 2 iterations\n      frequency: 2 / duration,\n      // zero out the detune\n      detune: 0,\n      context\n    })).toDestination();\n    clone.start(0);\n    const buffer = yield context.render();\n    return buffer.getChannelData(0);\n  });\n}","map":{"version":3,"sources":["../../../../Tone/source/oscillator/OscillatorInterface.ts"],"names":[],"mappings":";AAIA,SAAS,cAAT,QAA+B,mCAA/B;AAsGA;;AAEG;;AACH,OAAM,SAAgB,gBAAhB,CAAiC,QAAjC,EAAgD,MAAhD,EAA8D;;AACnE,UAAM,QAAQ,GAAG,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,UAA3C;AACA,UAAM,OAAO,GAAG,IAAI,cAAJ,CAAmB,CAAnB,EAAsB,QAAtB,EAAgC,QAAQ,CAAC,OAAT,CAAiB,UAAjD,CAAhB;AACA,UAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,WAAb,CAAyB,MAAM,CAAC,MAAP,CAAc,QAAQ,CAAC,GAAT,EAAd,EAA8B;AACpE;AACA,MAAA,SAAS,EAAE,IAAI,QAFqD;AAGpE;AACA,MAAA,MAAM,EAAE,CAJ4D;AAKpE,MAAA;AALoE,KAA9B,CAAzB,EAMV,aANU,EAAd;AAOA,IAAA,KAAK,CAAC,KAAN,CAAY,CAAZ;AACA,UAAM,MAAM,GAAG,MAAM,OAAO,CAAC,MAAR,EAArB;AACA,WAAO,MAAM,CAAC,cAAP,CAAsB,CAAtB,CAAP;AACA,G;AAAA","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport function generateWaveform(instance, length) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const duration = length / instance.context.sampleRate;\n        const context = new OfflineContext(1, duration, instance.context.sampleRate);\n        const clone = new instance.constructor(Object.assign(instance.get(), {\n            // should do 2 iterations\n            frequency: 2 / duration,\n            // zero out the detune\n            detune: 0,\n            context\n        })).toDestination();\n        clone.start(0);\n        const buffer = yield context.render();\n        return buffer.getChannelData(0);\n    });\n}\n//# sourceMappingURL=OscillatorInterface.js.map"]},"metadata":{},"sourceType":"module"}