{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeWaveShaperNodes = new WeakMap();\n\n    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n      if (!nativeWaveShaperNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeWaveShaperNode.channelCount,\n          channelCountMode: nativeWaveShaperNode.channelCountMode,\n          channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n          curve: nativeWaveShaperNode.curve,\n          oversample: nativeWaveShaperNode.oversample\n        };\n        nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n      if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n      }\n\n      return nativeWaveShaperNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/wave-shaper-node-renderer-factory.ts"],"names":[],"mappings":"AAAA,SAAS,sBAAT,QAAuC,mCAAvC;AACA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAM,mCAAmC,GAA0C,CACtF,0BADsF,EAEtF,kBAFsF,EAGtF,uBAHsF,KAItF;AACA,SAAO,MAAmE;AACtE,UAAM,6BAA6B,GAAG,IAAI,OAAJ,EAAtC;;AAEA,UAAM,oBAAoB,GAAG,OACzB,KADyB,EAEzB,yBAFyB,EAGzB,KAHyB,KAIzB;AACA,UAAI,oBAAoB,GAAG,kBAAkB,CAA2B,KAA3B,CAA7C,CADA,CAGA;;AACA,YAAM,oCAAoC,GAAG,gBAAgB,CAAC,oBAAD,EAAuB,yBAAvB,CAA7D;;AAEA,UAAI,CAAC,oCAAL,EAA2C;AACvC,cAAM,OAAO,GAAG;AACZ,UAAA,YAAY,EAAE,oBAAoB,CAAC,YADvB;AAEZ,UAAA,gBAAgB,EAAE,oBAAoB,CAAC,gBAF3B;AAGZ,UAAA,qBAAqB,EAAE,oBAAoB,CAAC,qBAHhC;AAIZ,UAAA,KAAK,EAAE,oBAAoB,CAAC,KAJhB;AAKZ,UAAA,UAAU,EAAE,oBAAoB,CAAC;AALrB,SAAhB;AAQA,QAAA,oBAAoB,GAAG,0BAA0B,CAAC,yBAAD,EAA4B,OAA5B,CAAjD;AACH;;AAED,MAAA,6BAA6B,CAAC,GAA9B,CAAkC,yBAAlC,EAA6D,oBAA7D;;AAEA,UAAI,sBAAsB,CAAC,oBAAD,CAA1B,EAAkD;AAC9C,cAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,oBAAoB,CAAC,MAArB,CAA4B,CAA5B,CAAnC,EAAmE,KAAnE,CAA7B;AACH,OAFD,MAEO;AACH,cAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,oBAAnC,EAAyD,KAAzD,CAA7B;AACH;;AAED,aAAO,oBAAP;AACH,KA/BD;;AAiCA,WAAO;AACH,MAAA,MAAM,CACF,KADE,EAEF,yBAFE,EAGF,KAHE,EAG6B;AAE/B,cAAM,4BAA4B,GAAG,6BAA6B,CAAC,GAA9B,CAAkC,yBAAlC,CAArC;;AAEA,YAAI,4BAA4B,KAAK,SAArC,EAAgD;AAC5C,iBAAO,OAAO,CAAC,OAAR,CAAgB,4BAAhB,CAAP;AACH;;AAED,eAAO,oBAAoB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAA3B;AACH;;AAbE,KAAP;AAeH,GAnDD;AAoDH,CAzDM","sourceRoot":"","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=wave-shaper-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}