{"ast":null,"code":"export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n        throw new RangeError(\"The parameters can't be negative.\");\n      } // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n\n\n      start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n    };\n  })(nativeAudioScheduledSourceNode.start);\n};","map":{"version":3,"sources":["../../../src/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.ts"],"names":[],"mappings":"AAEA,OAAO,MAAM,yDAAyD,GAClE,8BADqE,IAE/D;AACN,EAAA,8BAA8B,CAAC,KAA/B,GAAuC,CAAE,KAAD,IAAU;AAC9C,WAAO,CAAC,IAAI,GAAG,CAAR,EAAW,MAAM,GAAG,CAApB,EAAuB,QAAvB,KAA4C;AAC/C,UAAK,OAAO,QAAP,KAAoB,QAApB,IAAgC,QAAQ,GAAG,CAA5C,IAAkD,MAAM,GAAG,CAA3D,IAAgE,IAAI,GAAG,CAA3E,EAA8E;AAC1E,cAAM,IAAI,UAAJ,CAAe,mCAAf,CAAN;AACH,OAH8C,CAK/C;;;AAC4D,MAAA,KAAM,CAAC,IAAP,CAAY,8BAAZ,EAA4C,IAA5C,EAAkD,MAAlD,EAA0D,QAA1D;AAC/D,KAPD;AAQH,GATsC,EASpC,8BAA8B,CAAC,KATK,CAAvC;AAUH,CAbM","sourceRoot":"","sourcesContent":["export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map"]},"metadata":{},"sourceType":"module"}