{"ast":null,"code":"// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n  const inputLength = input.length;\n  let i = bufferIndex;\n\n  for (let j = 0; j < inputLength; j += 1) {\n    let y = feedforward[0] * input[j];\n\n    for (let k = 1; k < minLength; k += 1) {\n      const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n      y += feedforward[k] * xBuffer[x];\n      y -= feedback[k] * yBuffer[x];\n    }\n\n    for (let k = minLength; k < feedforwardLength; k += 1) {\n      y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    for (let k = minLength; k < feedbackLength; k += 1) {\n      y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    xBuffer[i] = input[j];\n    yBuffer[i] = y;\n    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n    output[j] = y;\n  }\n\n  return i;\n};","map":{"version":3,"sources":["../../../src/helpers/filter-buffer.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAM,YAAY,GAAG,CACxB,QADwB,EAExB,cAFwB,EAGxB,WAHwB,EAIxB,iBAJwB,EAKxB,SALwB,EAMxB,OANwB,EAOxB,OAPwB,EAQxB,WARwB,EASxB,YATwB,EAUxB,KAVwB,EAWxB,MAXwB,KAYxB;AACA,QAAM,WAAW,GAAG,KAAK,CAAC,MAA1B;AAEA,MAAI,CAAC,GAAG,WAAR;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAApB,EAAiC,CAAC,IAAI,CAAtC,EAAyC;AACrC,QAAI,CAAC,GAAG,WAAW,CAAC,CAAD,CAAX,GAAiB,KAAK,CAAC,CAAD,CAA9B;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,IAAI,CAApC,EAAuC;AACnC,YAAM,CAAC,GAAI,CAAC,GAAG,CAAL,GAAW,YAAY,GAAG,CAApC,CADmC,CACK;;AAExC,MAAA,CAAC,IAAI,WAAW,CAAC,CAAD,CAAX,GAAiB,OAAO,CAAC,CAAD,CAA7B;AACA,MAAA,CAAC,IAAI,QAAQ,CAAC,CAAD,CAAR,GAAc,OAAO,CAAC,CAAD,CAA1B;AACH;;AAED,SAAK,IAAI,CAAC,GAAG,SAAb,EAAwB,CAAC,GAAG,iBAA5B,EAA+C,CAAC,IAAI,CAApD,EAAuD;AACnD,MAAA,CAAC,IAAI,WAAW,CAAC,CAAD,CAAX,GAAiB,OAAO,CAAE,CAAC,GAAG,CAAL,GAAW,YAAY,GAAG,CAA3B,CAA7B,CADmD,CACU;AAChE;;AAED,SAAK,IAAI,CAAC,GAAG,SAAb,EAAwB,CAAC,GAAG,cAA5B,EAA4C,CAAC,IAAI,CAAjD,EAAoD;AAChD,MAAA,CAAC,IAAI,QAAQ,CAAC,CAAD,CAAR,GAAc,OAAO,CAAE,CAAC,GAAG,CAAL,GAAW,YAAY,GAAG,CAA3B,CAA1B,CADgD,CACU;AAC7D;;AAED,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,KAAK,CAAC,CAAD,CAAlB;AACA,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AAEA,IAAA,CAAC,GAAI,CAAC,GAAG,CAAL,GAAW,YAAY,GAAG,CAA9B,CArBqC,CAqBH;;AAElC,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AACH;;AAED,SAAO,CAAP;AACH,CA5CM","sourceRoot":"","sourcesContent":["// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=filter-buffer.js.map"]},"metadata":{},"sourceType":"module"}