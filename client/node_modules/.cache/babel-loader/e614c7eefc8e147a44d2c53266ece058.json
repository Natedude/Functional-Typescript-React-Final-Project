{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n      return nativeOscillatorNode;\n    };\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/oscillator-node-renderer-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=oscillator-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}