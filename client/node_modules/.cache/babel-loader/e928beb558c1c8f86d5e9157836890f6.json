{"ast":null,"code":"import { SignalOperator } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\n\nexport class GreaterThanZero extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n    this.name = \"GreaterThanZero\";\n    this._thresh = this.output = new WaveShaper({\n      context: this.context,\n      length: 127,\n      mapping: val => {\n        if (val <= 0) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    });\n    this._scale = this.input = new Multiply({\n      context: this.context,\n      value: 10000\n    }); // connections\n\n    this._scale.connect(this._thresh);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._scale.dispose();\n\n    this._thresh.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/signal/GreaterThanZero.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,QAAsD,kBAAtD;AACA,SAAS,QAAT,QAAyB,YAAzB;AAEA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,oBAAT,QAAqC,uBAArC;AAIA;;;;;;;;;AASG;;AACH,OAAM,MAAO,eAAP,SAA+B,cAA/B,CAAqE;AAmB1E,EAAA,WAAA,GAAA;AACC,UAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,eAAe,CAAC,WAAhB,EAAD,EAAgC,SAAhC,CAAlC,CAAN;AAlBQ,SAAA,IAAA,GAAe,iBAAf;AAoBR,SAAK,OAAL,GAAe,KAAK,MAAL,GAAc,IAAI,UAAJ,CAAe;AAC3C,MAAA,OAAO,EAAE,KAAK,OAD6B;AAE3C,MAAA,MAAM,EAAE,GAFmC;AAG3C,MAAA,OAAO,EAAG,GAAD,IAAQ;AAChB,YAAI,GAAG,IAAI,CAAX,EAAc;AACb,iBAAO,CAAP;AACA,SAFD,MAEO;AACN,iBAAO,CAAP;AACA;AACD;AAT0C,KAAf,CAA7B;AAWA,SAAK,MAAL,GAAc,KAAK,KAAL,GAAa,IAAI,QAAJ,CAAa;AACvC,MAAA,OAAO,EAAE,KAAK,OADyB;AAEvC,MAAA,KAAK,EAAE;AAFgC,KAAb,CAA3B,CAdD,CAmBC;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,OAAzB;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,WAAO,IAAP;AACA;;AA/CyE","sourceRoot":"","sourcesContent":["import { SignalOperator } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThanZero extends SignalOperator {\n    constructor() {\n        super(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n        this.name = \"GreaterThanZero\";\n        this._thresh = this.output = new WaveShaper({\n            context: this.context,\n            length: 127,\n            mapping: (val) => {\n                if (val <= 0) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            },\n        });\n        this._scale = this.input = new Multiply({\n            context: this.context,\n            value: 10000\n        });\n        // connections\n        this._scale.connect(this._thresh);\n    }\n    dispose() {\n        super.dispose();\n        this._scale.dispose();\n        this._thresh.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=GreaterThanZero.js.map"]},"metadata":{},"sourceType":"module"}