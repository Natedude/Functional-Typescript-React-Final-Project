{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\n\nexport class Gate extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n    this.name = \"Gate\";\n    const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.smoothing\n    });\n    this._gt = new GreaterThan({\n      context: this.context,\n      value: dbToGain(options.threshold)\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this._gate = this.output = new Gain({\n      context: this.context\n    }); // connections\n\n    this.input.connect(this._gate); // the control signal\n\n    this.input.chain(this._follower, this._gt, this._gate.gain);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.1,\n      threshold: -40\n    });\n  }\n  /**\n   * The threshold of the gate in decibels\n   */\n\n\n  get threshold() {\n    return gainToDb(this._gt.value);\n  }\n\n  set threshold(thresh) {\n    this._gt.value = dbToGain(thresh);\n  }\n  /**\n   * The attack/decay speed of the gate. See [[Follower.smoothing]]\n   */\n\n\n  get smoothing() {\n    return this._follower.smoothing;\n  }\n\n  set smoothing(smoothingTime) {\n    this._follower.smoothing = smoothingTime;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n\n    this._follower.dispose();\n\n    this._gt.dispose();\n\n    this._gate.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Gate.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAoD,kCAApD;AAEA,SAAS,WAAT,QAA4B,0BAA5B;AACA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAS,QAAT,QAAyB,sBAAzB;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,QAAT,EAAmB,QAAnB,QAAmC,6BAAnC;AAOA;;;;;;;;;;;AAWG;;AACH,OAAM,MAAO,IAAP,SAAoB,aAApB,CAA8C;AA4BnD,EAAA,WAAA,GAAA;AACC,UAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAAlC,CAAN;AA3BQ,SAAA,IAAA,GAAe,MAAf;AA4BR,UAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAApC;AAEA,SAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa;AAC7B,MAAA,OAAO,EAAE,KAAK,OADe;AAE7B,MAAA,SAAS,EAAE,OAAO,CAAC;AAFU,KAAb,CAAjB;AAIA,SAAK,GAAL,GAAW,IAAI,WAAJ,CAAgB;AAC1B,MAAA,OAAO,EAAE,KAAK,OADY;AAE1B,MAAA,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC,SAAT;AAFW,KAAhB,CAAX;AAIA,SAAK,KAAL,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAb;AACA,SAAK,KAAL,GAAa,KAAK,MAAL,GAAc,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAA3B,CAbD,CAeC;;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,KAAxB,EAhBD,CAiBC;;AACA,SAAK,KAAL,CAAW,KAAX,CAAiB,KAAK,SAAtB,EAAiC,KAAK,GAAtC,EAA2C,KAAK,KAAL,CAAW,IAAtD;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE,GADsC;AAEjD,MAAA,SAAS,EAAE,CAAC;AAFqC,KAA3C,CAAP;AAIA;AAED;;AAEG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,QAAQ,CAAC,KAAK,GAAL,CAAS,KAAV,CAAf;AACA;;AACY,MAAT,SAAS,CAAC,MAAD,EAAO;AACnB,SAAK,GAAL,CAAS,KAAT,GAAiB,QAAQ,CAAC,MAAD,CAAzB;AACA;AAED;;AAEG;;;AACU,MAAT,SAAS,GAAA;AACZ,WAAO,KAAK,SAAL,CAAe,SAAtB;AACA;;AACY,MAAT,SAAS,CAAC,aAAD,EAAc;AAC1B,SAAK,SAAL,CAAe,SAAf,GAA2B,aAA3B;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,KAAL,CAAW,OAAX;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,SAAK,GAAL,CAAS,OAAT;;AACA,SAAK,KAAL,CAAW,OAAX;;AACA,WAAO,IAAP;AACA;;AAnFkD","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport class Gate extends ToneAudioNode {\n    constructor() {\n        super(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n        this.name = \"Gate\";\n        const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n        this._follower = new Follower({\n            context: this.context,\n            smoothing: options.smoothing,\n        });\n        this._gt = new GreaterThan({\n            context: this.context,\n            value: dbToGain(options.threshold),\n        });\n        this.input = new Gain({ context: this.context });\n        this._gate = this.output = new Gain({ context: this.context });\n        // connections\n        this.input.connect(this._gate);\n        // the control signal\n        this.input.chain(this._follower, this._gt, this._gate.gain);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            smoothing: 0.1,\n            threshold: -40\n        });\n    }\n    /**\n     * The threshold of the gate in decibels\n     */\n    get threshold() {\n        return gainToDb(this._gt.value);\n    }\n    set threshold(thresh) {\n        this._gt.value = dbToGain(thresh);\n    }\n    /**\n     * The attack/decay speed of the gate. See [[Follower.smoothing]]\n     */\n    get smoothing() {\n        return this._follower.smoothing;\n    }\n    set smoothing(smoothingTime) {\n        this._follower.smoothing = smoothingTime;\n    }\n    dispose() {\n        super.dispose();\n        this.input.dispose();\n        this._follower.dispose();\n        this._gt.dispose();\n        this._gate.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Gate.js.map"]},"metadata":{},"sourceType":"module"}