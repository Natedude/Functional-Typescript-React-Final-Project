{"ast":null,"code":"import { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\n\nexport class GrainPlayer extends Source {\n  constructor() {\n    super(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n\n    this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n\n    this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n\n    this._activeSources = [];\n    const options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this._clock = new Clock({\n      context: this.context,\n      callback: this._tick.bind(this),\n      frequency: 1 / options.grainSize\n    });\n    this._playbackRate = options.playbackRate;\n    this._grainSize = options.grainSize;\n    this._overlap = options.overlap;\n    this.detune = options.detune; // setup\n\n    this.overlap = options.overlap;\n    this.loop = options.loop;\n    this.playbackRate = options.playbackRate;\n    this.grainSize = options.grainSize;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this.reverse = options.reverse;\n\n    this._clock.on(\"stop\", this._onstop.bind(this));\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      onload: noOp,\n      onerror: noOp,\n      overlap: 0.1,\n      grainSize: 0.2,\n      playbackRate: 1,\n      detune: 0,\n      loop: false,\n      loopStart: 0,\n      loopEnd: 0,\n      reverse: false\n    });\n  }\n  /**\n   * Internal start method\n   */\n\n\n  _start(time, offset, duration) {\n    offset = defaultArg(offset, 0);\n    offset = this.toSeconds(offset);\n    time = this.toSeconds(time);\n\n    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n    this._clock.start(time, offset / grainSize);\n\n    if (duration) {\n      this.stop(time + this.toSeconds(duration));\n    }\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n\n  _restart(time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  }\n  /**\n   * Internal stop method\n   */\n\n\n  _stop(time) {\n    this._clock.stop(time);\n  }\n  /**\n   * Invoked when the clock is stopped\n   */\n\n\n  _onstop(time) {\n    // stop the players\n    this._activeSources.forEach(source => {\n      source.fadeOut = 0;\n      source.stop(time);\n    });\n\n    this.onstop(this);\n  }\n  /**\n   * Invoked on each clock tick. scheduled a new grain at this time.\n   */\n\n\n  _tick(time) {\n    // check if it should stop looping\n    const ticks = this._clock.getTicksAtTime(time);\n\n    const offset = ticks * this._grainSize;\n    this.log(\"offset\", offset);\n\n    if (!this.loop && offset > this.buffer.duration) {\n      this.stop(time);\n      return;\n    } // at the beginning of the file, the fade in should be 0\n\n\n    const fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source\n\n    const source = new ToneBufferSource({\n      context: this.context,\n      url: this.buffer,\n      fadeIn: fadeIn,\n      fadeOut: this._overlap,\n      loop: this.loop,\n      loopStart: this._loopStart,\n      loopEnd: this._loopEnd,\n      // compute the playbackRate based on the detune\n      playbackRate: intervalToFrequencyRatio(this.detune / 100)\n    }).connect(this.output);\n    source.start(time, this._grainSize * ticks);\n    source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources\n\n    this._activeSources.push(source); // remove it when it's done\n\n\n    source.onended = () => {\n      const index = this._activeSources.indexOf(source);\n\n      if (index !== -1) {\n        this._activeSources.splice(index, 1);\n      }\n    };\n  }\n  /**\n   * The playback rate of the sample\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    assertRange(rate, 0.001);\n    this._playbackRate = rate;\n    this.grainSize = this._grainSize;\n  }\n  /**\n   * The loop start time.\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n\n    this._loopStart = this.toSeconds(time);\n  }\n  /**\n   * The loop end time.\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n\n    this._loopEnd = this.toSeconds(time);\n  }\n  /**\n   * The direction the buffer should play in\n   */\n\n\n  get reverse() {\n    return this.buffer.reverse;\n  }\n\n  set reverse(rev) {\n    this.buffer.reverse = rev;\n  }\n  /**\n   * The size of each chunk of audio that the\n   * buffer is chopped into and played back at.\n   */\n\n\n  get grainSize() {\n    return this._grainSize;\n  }\n\n  set grainSize(size) {\n    this._grainSize = this.toSeconds(size);\n\n    this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n  }\n  /**\n   * The duration of the cross-fade between successive grains.\n   */\n\n\n  get overlap() {\n    return this._overlap;\n  }\n\n  set overlap(time) {\n    const computedTime = this.toSeconds(time);\n    assertRange(computedTime, 0);\n    this._overlap = computedTime;\n  }\n  /**\n   * If all the buffer is loaded\n   */\n\n\n  get loaded() {\n    return this.buffer.loaded;\n  }\n\n  dispose() {\n    super.dispose();\n    this.buffer.dispose();\n\n    this._clock.dispose();\n\n    this._activeSources.forEach(source => source.dispose());\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/source/buffer/GrainPlayer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source {\n    constructor() {\n        super(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n        this.name = \"GrainPlayer\";\n        /**\n         * Internal loopStart value\n         */\n        this._loopStart = 0;\n        /**\n         * Internal loopStart value\n         */\n        this._loopEnd = 0;\n        /**\n         * All of the currently playing BufferSources\n         */\n        this._activeSources = [];\n        const options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n        this.buffer = new ToneAudioBuffer({\n            onload: options.onload,\n            onerror: options.onerror,\n            reverse: options.reverse,\n            url: options.url,\n        });\n        this._clock = new Clock({\n            context: this.context,\n            callback: this._tick.bind(this),\n            frequency: 1 / options.grainSize\n        });\n        this._playbackRate = options.playbackRate;\n        this._grainSize = options.grainSize;\n        this._overlap = options.overlap;\n        this.detune = options.detune;\n        // setup\n        this.overlap = options.overlap;\n        this.loop = options.loop;\n        this.playbackRate = options.playbackRate;\n        this.grainSize = options.grainSize;\n        this.loopStart = options.loopStart;\n        this.loopEnd = options.loopEnd;\n        this.reverse = options.reverse;\n        this._clock.on(\"stop\", this._onstop.bind(this));\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            onload: noOp,\n            onerror: noOp,\n            overlap: 0.1,\n            grainSize: 0.2,\n            playbackRate: 1,\n            detune: 0,\n            loop: false,\n            loopStart: 0,\n            loopEnd: 0,\n            reverse: false\n        });\n    }\n    /**\n     * Internal start method\n     */\n    _start(time, offset, duration) {\n        offset = defaultArg(offset, 0);\n        offset = this.toSeconds(offset);\n        time = this.toSeconds(time);\n        const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n        this._clock.start(time, offset / grainSize);\n        if (duration) {\n            this.stop(time + this.toSeconds(duration));\n        }\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n    restart(time, offset, duration) {\n        super.restart(time, offset, duration);\n        return this;\n    }\n    _restart(time, offset, duration) {\n        this._stop(time);\n        this._start(time, offset, duration);\n    }\n    /**\n     * Internal stop method\n     */\n    _stop(time) {\n        this._clock.stop(time);\n    }\n    /**\n     * Invoked when the clock is stopped\n     */\n    _onstop(time) {\n        // stop the players\n        this._activeSources.forEach((source) => {\n            source.fadeOut = 0;\n            source.stop(time);\n        });\n        this.onstop(this);\n    }\n    /**\n     * Invoked on each clock tick. scheduled a new grain at this time.\n     */\n    _tick(time) {\n        // check if it should stop looping\n        const ticks = this._clock.getTicksAtTime(time);\n        const offset = ticks * this._grainSize;\n        this.log(\"offset\", offset);\n        if (!this.loop && offset > this.buffer.duration) {\n            this.stop(time);\n            return;\n        }\n        // at the beginning of the file, the fade in should be 0\n        const fadeIn = offset < this._overlap ? 0 : this._overlap;\n        // create a buffer source\n        const source = new ToneBufferSource({\n            context: this.context,\n            url: this.buffer,\n            fadeIn: fadeIn,\n            fadeOut: this._overlap,\n            loop: this.loop,\n            loopStart: this._loopStart,\n            loopEnd: this._loopEnd,\n            // compute the playbackRate based on the detune\n            playbackRate: intervalToFrequencyRatio(this.detune / 100)\n        }).connect(this.output);\n        source.start(time, this._grainSize * ticks);\n        source.stop(time + this._grainSize / this.playbackRate);\n        // add it to the active sources\n        this._activeSources.push(source);\n        // remove it when it's done\n        source.onended = () => {\n            const index = this._activeSources.indexOf(source);\n            if (index !== -1) {\n                this._activeSources.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * The playback rate of the sample\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        assertRange(rate, 0.001);\n        this._playbackRate = rate;\n        this.grainSize = this._grainSize;\n    }\n    /**\n     * The loop start time.\n     */\n    get loopStart() {\n        return this._loopStart;\n    }\n    set loopStart(time) {\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(time), 0, this.buffer.duration);\n        }\n        this._loopStart = this.toSeconds(time);\n    }\n    /**\n     * The loop end time.\n     */\n    get loopEnd() {\n        return this._loopEnd;\n    }\n    set loopEnd(time) {\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(time), 0, this.buffer.duration);\n        }\n        this._loopEnd = this.toSeconds(time);\n    }\n    /**\n     * The direction the buffer should play in\n     */\n    get reverse() {\n        return this.buffer.reverse;\n    }\n    set reverse(rev) {\n        this.buffer.reverse = rev;\n    }\n    /**\n     * The size of each chunk of audio that the\n     * buffer is chopped into and played back at.\n     */\n    get grainSize() {\n        return this._grainSize;\n    }\n    set grainSize(size) {\n        this._grainSize = this.toSeconds(size);\n        this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n    }\n    /**\n     * The duration of the cross-fade between successive grains.\n     */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(time) {\n        const computedTime = this.toSeconds(time);\n        assertRange(computedTime, 0);\n        this._overlap = computedTime;\n    }\n    /**\n     * If all the buffer is loaded\n     */\n    get loaded() {\n        return this.buffer.loaded;\n    }\n    dispose() {\n        super.dispose();\n        this.buffer.dispose();\n        this._clock.dispose();\n        this._activeSources.forEach((source) => source.dispose());\n        return this;\n    }\n}\n//# sourceMappingURL=GrainPlayer.js.map"]},"metadata":{},"sourceType":"module"}