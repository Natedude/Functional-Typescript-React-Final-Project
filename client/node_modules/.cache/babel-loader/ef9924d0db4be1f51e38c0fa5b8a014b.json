{"ast":null,"code":"import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) => {\n  return (nativeContext, {\n    coneInnerAngle,\n    coneOuterAngle,\n    coneOuterGain,\n    distanceModel,\n    maxDistance,\n    orientationX,\n    orientationY,\n    orientationZ,\n    panningModel,\n    positionX,\n    positionY,\n    positionZ,\n    refDistance,\n    rolloffFactor,\n    ...audioNodeOptions\n  }) => {\n    const pannerNode = nativeContext.createPanner(); // Bug #125: Safari does not throw an error yet.\n\n    if (audioNodeOptions.channelCount > 2) {\n      throw createNotSupportedError();\n    } // Bug #126: Safari does not throw an error yet.\n\n\n    if (audioNodeOptions.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n    const SINGLE_CHANNEL_OPTIONS = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete'\n    };\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 1\n    });\n    const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n    const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      curve: new Float32Array([1, 1]),\n      oversample: 'none'\n    });\n    let lastOrientation = [orientationX, orientationY, orientationZ];\n    let lastPosition = [positionX, positionY, positionZ];\n    const buffer = new Float32Array(1); // tslint:disable-next-line:deprecation\n\n    scriptProcessorNode.onaudioprocess = ({\n      inputBuffer\n    }) => {\n      const orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2)];\n\n      if (orientation.some((value, index) => value !== lastOrientation[index])) {\n        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n        lastOrientation = orientation;\n      }\n\n      const positon = [getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n\n      if (positon.some((value, index) => value !== lastPosition[index])) {\n        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n\n        lastPosition = positon;\n      }\n    };\n\n    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativePannerNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return pannerNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #125: Safari does not throw an error yet.\n        if (value > 2) {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCount = value;\n        pannerNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return pannerNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #126: Safari does not throw an error yet.\n        if (value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n        pannerNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return pannerNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        pannerNode.channelInterpretation = value;\n      },\n\n      get coneInnerAngle() {\n        return pannerNode.coneInnerAngle;\n      },\n\n      set coneInnerAngle(value) {\n        pannerNode.coneInnerAngle = value;\n      },\n\n      get coneOuterAngle() {\n        return pannerNode.coneOuterAngle;\n      },\n\n      set coneOuterAngle(value) {\n        pannerNode.coneOuterAngle = value;\n      },\n\n      get coneOuterGain() {\n        return pannerNode.coneOuterGain;\n      },\n\n      set coneOuterGain(value) {\n        // Bug #127: Safari does not throw an InvalidStateError yet.\n        if (value < 0 || value > 1) {\n          throw createInvalidStateError();\n        }\n\n        pannerNode.coneOuterGain = value;\n      },\n\n      get context() {\n        return pannerNode.context;\n      },\n\n      get distanceModel() {\n        return pannerNode.distanceModel;\n      },\n\n      set distanceModel(value) {\n        pannerNode.distanceModel = value;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get maxDistance() {\n        return pannerNode.maxDistance;\n      },\n\n      set maxDistance(value) {\n        // Bug #128: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.maxDistance = value;\n      },\n\n      get numberOfInputs() {\n        return pannerNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return pannerNode.numberOfOutputs;\n      },\n\n      get orientationX() {\n        return orientationXGainNode.gain;\n      },\n\n      get orientationY() {\n        return orientationYGainNode.gain;\n      },\n\n      get orientationZ() {\n        return orientationZGainNode.gain;\n      },\n\n      get panningModel() {\n        return pannerNode.panningModel;\n      },\n\n      set panningModel(value) {\n        pannerNode.panningModel = value;\n      },\n\n      get positionX() {\n        return positionXGainNode.gain;\n      },\n\n      get positionY() {\n        return positionYGainNode.gain;\n      },\n\n      get positionZ() {\n        return positionZGainNode.gain;\n      },\n\n      get refDistance() {\n        return pannerNode.refDistance;\n      },\n\n      set refDistance(value) {\n        // Bug #129: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.refDistance = value;\n      },\n\n      get rolloffFactor() {\n        return pannerNode.rolloffFactor;\n      },\n\n      set rolloffFactor(value) {\n        // Bug #130: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.rolloffFactor = value;\n      },\n\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n\n    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n    }\n\n    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n    }\n\n    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n      nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n    }\n\n    if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n      nativePannerNodeFaker.distanceModel = distanceModel;\n    }\n\n    if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n      nativePannerNodeFaker.maxDistance = maxDistance;\n    }\n\n    if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n      nativePannerNodeFaker.orientationX.value = orientationX;\n    }\n\n    if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n      nativePannerNodeFaker.orientationY.value = orientationY;\n    }\n\n    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n      nativePannerNodeFaker.orientationZ.value = orientationZ;\n    }\n\n    if (panningModel !== nativePannerNodeFaker.panningModel) {\n      nativePannerNodeFaker.panningModel = panningModel;\n    }\n\n    if (positionX !== nativePannerNodeFaker.positionX.value) {\n      nativePannerNodeFaker.positionX.value = positionX;\n    }\n\n    if (positionY !== nativePannerNodeFaker.positionY.value) {\n      nativePannerNodeFaker.positionY.value = positionY;\n    }\n\n    if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n      nativePannerNodeFaker.positionZ.value = positionZ;\n    }\n\n    if (refDistance !== nativePannerNodeFaker.refDistance) {\n      nativePannerNodeFaker.refDistance = refDistance;\n    }\n\n    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n      nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n    }\n\n    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n    }\n\n    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n    }\n\n    const whenConnected = () => {\n      inputGainNode.connect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n    };\n\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.disconnect(orientationXGainNode);\n      orientationXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationYGainNode);\n      orientationYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationZGainNode);\n      orientationZGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionXGainNode);\n      positionXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionYGainNode);\n      positionYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionZGainNode);\n      positionZGainNode.disconnect(channelMergerNode);\n      channelMergerNode.disconnect(scriptProcessorNode);\n      scriptProcessorNode.disconnect(nativeContext.destination);\n    };\n\n    return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-panner-node-faker-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = nativeContext.createPanner();\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            curve: new Float32Array([1, 1]),\n            oversample: 'none'\n        });\n        let lastOrientation = [orientationX, orientationY, orientationZ];\n        let lastPosition = [positionX, positionY, positionZ];\n        const buffer = new Float32Array(1);\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                getFirstSample(inputBuffer, buffer, 0),\n                getFirstSample(inputBuffer, buffer, 1),\n                getFirstSample(inputBuffer, buffer, 2)\n            ];\n            if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                getFirstSample(inputBuffer, buffer, 3),\n                getFirstSample(inputBuffer, buffer, 4),\n                getFirstSample(inputBuffer, buffer, 5)\n            ];\n            if (positon.some((value, index) => value !== lastPosition[index])) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Safari does not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n            waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n            waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n            waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n            waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n            waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n            channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n            channelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.disconnect(nativeContext.destination);\n        };\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-panner-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}