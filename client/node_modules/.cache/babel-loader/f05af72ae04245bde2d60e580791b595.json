{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\n\nexport class AutoWah extends Effect {\n  constructor() {\n    super(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n    this.name = \"AutoWah\";\n    const options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.follower\n    });\n    this._sweepRange = new ScaleExp({\n      context: this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this._inputBoost = new Gain({\n      context: this.context\n    });\n    this._bandpass = new Filter({\n      context: this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    this._peaking = new Filter({\n      context: this.context,\n      type: \"peaking\"\n    });\n    this._peaking.gain.value = options.gain;\n    this.gain = this._peaking.gain;\n    this.Q = this._bandpass.Q; // the control signal path\n\n    this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\n    this._sweepRange.connect(this._bandpass.frequency);\n\n    this._sweepRange.connect(this._peaking.frequency); // the filtered path\n\n\n    this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn); // set the initial value\n\n    this._setSweepRange();\n\n    this.sensitivity = options.sensitivity;\n    readOnly(this, [\"gain\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: 0.2\n    });\n  }\n  /**\n   * The number of octaves that the filter will sweep above the baseFrequency.\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(octaves) {\n    this._octaves = octaves;\n\n    this._setSweepRange();\n  }\n  /**\n   * The follower's smoothing time\n   */\n\n\n  get follower() {\n    return this._follower.smoothing;\n  }\n\n  set follower(follower) {\n    this._follower.smoothing = follower;\n  }\n  /**\n   * The base frequency from which the sweep will start from.\n   */\n\n\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n\n  set baseFrequency(baseFreq) {\n    this._baseFrequency = this.toFrequency(baseFreq);\n\n    this._setSweepRange();\n  }\n  /**\n   * The sensitivity to control how responsive to the input signal the filter is.\n   */\n\n\n  get sensitivity() {\n    return gainToDb(1 / this._inputBoost.gain.value);\n  }\n\n  set sensitivity(sensitivity) {\n    this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n  }\n  /**\n   * sets the sweep range of the scaler\n   */\n\n\n  _setSweepRange() {\n    this._sweepRange.min = this._baseFrequency;\n    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._follower.dispose();\n\n    this._sweepRange.dispose();\n\n    this._bandpass.dispose();\n\n    this._peaking.dispose();\n\n    this._inputBoost.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/AutoWah.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect {\n    constructor() {\n        super(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n        this.name = \"AutoWah\";\n        const options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n        this._follower = new Follower({\n            context: this.context,\n            smoothing: options.follower,\n        });\n        this._sweepRange = new ScaleExp({\n            context: this.context,\n            min: 0,\n            max: 1,\n            exponent: 0.5,\n        });\n        this._baseFrequency = this.toFrequency(options.baseFrequency);\n        this._octaves = options.octaves;\n        this._inputBoost = new Gain({ context: this.context });\n        this._bandpass = new Filter({\n            context: this.context,\n            rolloff: -48,\n            frequency: 0,\n            Q: options.Q,\n        });\n        this._peaking = new Filter({\n            context: this.context,\n            type: \"peaking\"\n        });\n        this._peaking.gain.value = options.gain;\n        this.gain = this._peaking.gain;\n        this.Q = this._bandpass.Q;\n        // the control signal path\n        this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n        this._sweepRange.connect(this._bandpass.frequency);\n        this._sweepRange.connect(this._peaking.frequency);\n        // the filtered path\n        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n        // set the initial value\n        this._setSweepRange();\n        this.sensitivity = options.sensitivity;\n        readOnly(this, [\"gain\", \"Q\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            baseFrequency: 100,\n            octaves: 6,\n            sensitivity: 0,\n            Q: 2,\n            gain: 2,\n            follower: 0.2,\n        });\n    }\n    /**\n     * The number of octaves that the filter will sweep above the baseFrequency.\n     */\n    get octaves() {\n        return this._octaves;\n    }\n    set octaves(octaves) {\n        this._octaves = octaves;\n        this._setSweepRange();\n    }\n    /**\n     * The follower's smoothing time\n     */\n    get follower() {\n        return this._follower.smoothing;\n    }\n    set follower(follower) {\n        this._follower.smoothing = follower;\n    }\n    /**\n     * The base frequency from which the sweep will start from.\n     */\n    get baseFrequency() {\n        return this._baseFrequency;\n    }\n    set baseFrequency(baseFreq) {\n        this._baseFrequency = this.toFrequency(baseFreq);\n        this._setSweepRange();\n    }\n    /**\n     * The sensitivity to control how responsive to the input signal the filter is.\n     */\n    get sensitivity() {\n        return gainToDb(1 / this._inputBoost.gain.value);\n    }\n    set sensitivity(sensitivity) {\n        this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n    }\n    /**\n     * sets the sweep range of the scaler\n     */\n    _setSweepRange() {\n        this._sweepRange.min = this._baseFrequency;\n        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n    }\n    dispose() {\n        super.dispose();\n        this._follower.dispose();\n        this._sweepRange.dispose();\n        this._bandpass.dispose();\n        this._peaking.dispose();\n        this._inputBoost.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AutoWah.js.map"]},"metadata":{},"sourceType":"module"}