{"ast":null,"code":"export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n  return (nativeAudioNode, whenConnected, whenDisconnected) => {\n    const connections = new Set();\n\n    nativeAudioNode.connect = (connect => {\n      // tslint:disable-next-line:invalid-void\n      return (destination, output = 0, input = 0) => {\n        const wasDisconnected = connections.size === 0;\n\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n\n          if (wasDisconnected) {\n            whenConnected();\n          }\n\n          return destination;\n        }\n\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);\n\n        if (wasDisconnected) {\n          whenConnected();\n        }\n\n        return;\n      };\n    })(nativeAudioNode.connect);\n\n    nativeAudioNode.disconnect = (disconnect => {\n      return (destinationOrOutput, output, input) => {\n        const wasConnected = connections.size > 0;\n\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n\n          for (const connection of connections) {\n            if (connection[1] === destinationOrOutput) {\n              connections.delete(connection);\n            }\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n\n          for (const connection of connections) {\n            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {\n              connections.delete(connection);\n            }\n          }\n        }\n\n        const isDisconnected = connections.size === 0;\n\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    })(nativeAudioNode.disconnect);\n\n    return nativeAudioNode;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/monitor-connections.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set();\n        nativeAudioNode.connect = ((connect) => {\n            // tslint:disable-next-line:invalid-void\n            return (destination, output = 0, input = 0) => {\n                const wasDisconnected = connections.size === 0;\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    connect.call(nativeAudioNode, destination, output, input);\n                    insertElementInSet(connections, [destination, output, input], (connection) => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n                    return destination;\n                }\n                connect.call(nativeAudioNode, destination, output);\n                insertElementInSet(connections, [destination, output], (connection) => connection[0] === destination && connection[1] === output, true);\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n                return;\n            };\n        })(nativeAudioNode.connect);\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput, output, input) => {\n                const wasConnected = connections.size > 0;\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n                    connections.clear();\n                }\n                else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    disconnect.call(nativeAudioNode, destinationOrOutput);\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n                    }\n                    else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output);\n                    }\n                    for (const connection of connections) {\n                        if (connection[0] === destinationOrOutput &&\n                            (output === undefined || connection[1] === output) &&\n                            (input === undefined || connection[2] === input)) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                const isDisconnected = connections.size === 0;\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n        return nativeAudioNode;\n    };\n};\n//# sourceMappingURL=monitor-connections.js.map"]},"metadata":{},"sourceType":"module"}