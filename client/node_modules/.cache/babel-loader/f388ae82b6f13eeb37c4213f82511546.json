{"ast":null,"code":"// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\n//import { SideNav } from '../SideNav';\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const matthewMadore_Visual = new Visualizer('matthewMadore', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  p5.background(0, 0, 0, 255); // p5.stroke(255, 255, 255, 255);\n\n  p5.angleMode('degrees');\n  const values = analyzer.getValue(); // AVERAGE IS 0\n  // p5.translate(width / 2, height / 2);\n\n  let [lastX, lastY] = [width / 2, height / 2];\n\n  if (p5.mouseIsPressed) {\n    p5.translate(p5.mouseX, p5.mouseY)[(lastX, lastY)] = [p5.mouseX, p5.mouseY];\n  }\n\n  const radiusRange = 1; // r - 50px and r + 50px will be range for waveform\n\n  const radiusCenter = 300;\n  p5.noFill();\n  const numRings = 1;\n\n  for (let j = 1; j <= numRings; j++) {\n    p5.stroke(255, 255 - 85 * j, 255 - 90 * j, 255);\n    p5.beginShape();\n\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i];\n      const angle = p5.map(i, 0, values.length - 1, 0, 359);\n      let radius = p5.map(amplitude, -1, 1, radiusCenter - radiusRange, radiusCenter + radiusRange); // console.log(radius)\n\n      radius *= j;\n      let x = radius * Math.cos(angle);\n      let y = radius * Math.sin(angle); // console.log(`(x,y):(${x},${y})`);\n      // changes a bunch but periodically is (500,0)\n      // Place vertex-\n\n      p5.vertex(x, y);\n    }\n\n    p5.endShape();\n  }\n});","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/matthewMadore_Visual.tsx"],"names":["Visualizer","matthewMadore_Visual","p5","analyzer","width","window","innerWidth","height","innerHeight","background","angleMode","values","getValue","lastX","lastY","mouseIsPressed","translate","mouseX","mouseY","radiusRange","radiusCenter","noFill","numRings","j","stroke","beginShape","i","length","amplitude","angle","map","radius","x","Math","cos","y","sin","vertex","endShape"],"mappings":"AAAA;AACA;AAGA;AACA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,IAAID,UAAJ,CAClC,eADkC,EAElC,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC;AAEAN,EAAAA,EAAE,CAACO,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,EAJmC,CAKnC;;AAEAP,EAAAA,EAAE,CAACQ,SAAH,CAAa,SAAb;AACA,QAAMC,MAAM,GAAGR,QAAQ,CAACS,QAAT,EAAf,CARmC,CASnC;AACA;;AACA,MAAI,CAACC,KAAD,EAAQC,KAAR,IAAiB,CAACV,KAAK,GAAG,CAAT,EAAYG,MAAM,GAAG,CAArB,CAArB;;AACA,MAAGL,EAAE,CAACa,cAAN,EAAqB;AACnBb,IAAAA,EAAE,CAACc,SAAH,CAAad,EAAE,CAACe,MAAhB,EAAwBf,EAAE,CAACgB,MAA3B,GACCL,KAAK,EAAEC,KADR,KACiB,CAACZ,EAAE,CAACe,MAAJ,EAAWf,EAAE,CAACgB,MAAd,CADjB;AAED;;AAED,QAAMC,WAAW,GAAG,CAApB,CAjBmC,CAiBZ;;AACvB,QAAMC,YAAY,GAAG,GAArB;AAEAlB,EAAAA,EAAE,CAACmB,MAAH;AACA,QAAMC,QAAQ,GAAG,CAAjB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAID,QAApB,EAA8BC,CAAC,EAA/B,EAAmC;AACjCrB,IAAAA,EAAE,CAACsB,MAAH,CAAU,GAAV,EAAe,MAAK,KAAGD,CAAvB,EAA2B,MAAK,KAAGA,CAAnC,EAAuC,GAAvC;AACArB,IAAAA,EAAE,CAACuB,UAAH;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,MAAM,CAACgB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAME,SAAS,GAAGjB,MAAM,CAACe,CAAD,CAAxB;AACA,YAAMG,KAAK,GAAG3B,EAAE,CAAC4B,GAAH,CAAOJ,CAAP,EAAU,CAAV,EAAaf,MAAM,CAACgB,MAAP,GAAgB,CAA7B,EAAgC,CAAhC,EAAmC,GAAnC,CAAd;AACA,UAAII,MAAM,GAAG7B,EAAE,CAAC4B,GAAH,CAAOF,SAAP,EAAkB,CAAC,CAAnB,EAAqB,CAArB,EAAuBR,YAAY,GAACD,WAApC,EAAiDC,YAAY,GAACD,WAA9D,CAAb,CAHsC,CAItC;;AACAY,MAAAA,MAAM,IAAIR,CAAV;AACA,UAAIS,CAAC,GAAGD,MAAM,GAAGE,IAAI,CAACC,GAAL,CAASL,KAAT,CAAjB;AACA,UAAIM,CAAC,GAAGJ,MAAM,GAAGE,IAAI,CAACG,GAAL,CAASP,KAAT,CAAjB,CAPsC,CAQtC;AACA;AAEA;;AACA3B,MAAAA,EAAE,CAACmC,MAAH,CAAUL,CAAV,EAAaG,CAAb;AACD;;AACDjC,IAAAA,EAAE,CAACoC,QAAH;AACD;AACF,CA3CiC,CAA7B","sourcesContent":["// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n//import { SideNav } from '../SideNav';\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const matthewMadore_Visual = new Visualizer(\n  'matthewMadore',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n\n    p5.background(0, 0, 0, 255);\n    // p5.stroke(255, 255, 255, 255);\n\n    p5.angleMode('degrees');\n    const values = analyzer.getValue();\n    // AVERAGE IS 0\n    // p5.translate(width / 2, height / 2);\n    let [lastX, lastY] = [width / 2, height / 2]\n    if(p5.mouseIsPressed){\n      p5.translate(p5.mouseX, p5.mouseY)\n      [lastX, lastY] = [p5.mouseX,p5.mouseY]\n    }\n\n    const radiusRange = 1; // r - 50px and r + 50px will be range for waveform\n    const radiusCenter = 300;\n\n    p5.noFill();\n    const numRings = 1;\n    for(let j = 1; j <= numRings; j++ ){\n      p5.stroke(255, 255-(85*j), 255-(90*j), 255);\n      p5.beginShape();\n      for (let i = 0; i < values.length; i++) {\n        const amplitude = values[i] as number;\n        const angle = p5.map(i, 0, values.length - 1, 0, 359);\n        let radius = p5.map(amplitude, -1,1,radiusCenter-radiusRange, radiusCenter+radiusRange )\n        // console.log(radius)\n        radius *= j;\n        let x = radius * Math.cos(angle);\n        let y = radius * Math.sin(angle);\n        // console.log(`(x,y):(${x},${y})`);\n        // changes a bunch but periodically is (500,0)\n\n        // Place vertex-\n        p5.vertex(x, y);\n      }\n      p5.endShape();\n    }\n  },\n  );"]},"metadata":{},"sourceType":"module"}