{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\n\nexport class MidSideSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n    this.name = \"MidSideSplit\";\n    this._split = this.input = new Split({\n      channels: 2,\n      context: this.context\n    });\n    this._midAdd = new Add({\n      context: this.context\n    });\n    this.mid = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._sideSubtract = new Subtract({\n      context: this.context\n    });\n    this.side = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n\n    this._split.connect(this._midAdd, 0);\n\n    this._split.connect(this._midAdd.addend, 1);\n\n    this._split.connect(this._sideSubtract, 0);\n\n    this._split.connect(this._sideSubtract.subtrahend, 1);\n\n    this._midAdd.connect(this.mid);\n\n    this._sideSubtract.connect(this.side);\n  }\n\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._midAdd.dispose();\n\n    this._sideSubtract.dispose();\n\n    this._split.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/channel/MidSideSplit.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAoD,kCAApD;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,GAAT,QAAoB,kBAApB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,oBAAT,QAAqC,0BAArC;AAIA;;;;;;;;AAQG;;AACH,OAAM,MAAO,YAAP,SAA4B,aAA5B,CAA8D;AAoCnE,EAAA,WAAA,GAAA;AACC,UAAM,oBAAoB,CAAC,YAAY,CAAC,WAAb,EAAD,EAA6B,SAA7B,CAA1B;AAnCQ,SAAA,IAAA,GAAe,cAAf;AAqCR,SAAK,MAAL,GAAc,KAAK,KAAL,GAAa,IAAI,KAAJ,CAAU;AACpC,MAAA,QAAQ,EAAE,CAD0B;AAEpC,MAAA,OAAO,EAAE,KAAK;AAFsB,KAAV,CAA3B;AAIA,SAAK,OAAL,GAAe,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAR,CAAf;AACA,SAAK,GAAL,GAAW,IAAI,QAAJ,CAAa;AACvB,MAAA,OAAO,EAAE,KAAK,OADS;AAEvB,MAAA,KAAK,EAAE,IAAI,CAAC;AAFW,KAAb,CAAX;AAIA,SAAK,aAAL,GAAqB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAb,CAArB;AACA,SAAK,IAAL,GAAY,IAAI,QAAJ,CAAa;AACxB,MAAA,OAAO,EAAE,KAAK,OADU;AAExB,MAAA,KAAK,EAAE,IAAI,CAAC;AAFY,KAAb,CAAZ;;AAKA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,OAAzB,EAAkC,CAAlC;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,OAAL,CAAa,MAAjC,EAAyC,CAAzC;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,aAAzB,EAAwC,CAAxC;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,aAAL,CAAmB,UAAvC,EAAmD,CAAnD;;AACA,SAAK,OAAL,CAAa,OAAb,CAAqB,KAAK,GAA1B;;AACA,SAAK,aAAL,CAAmB,OAAnB,CAA2B,KAAK,IAAhC;AACA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;AACA,SAAK,GAAL,CAAS,OAAT;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,SAAK,aAAL,CAAmB,OAAnB;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA;;AAtEkE","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideSplit extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n        this.name = \"MidSideSplit\";\n        this._split = this.input = new Split({\n            channels: 2,\n            context: this.context\n        });\n        this._midAdd = new Add({ context: this.context });\n        this.mid = new Multiply({\n            context: this.context,\n            value: Math.SQRT1_2,\n        });\n        this._sideSubtract = new Subtract({ context: this.context });\n        this.side = new Multiply({\n            context: this.context,\n            value: Math.SQRT1_2,\n        });\n        this._split.connect(this._midAdd, 0);\n        this._split.connect(this._midAdd.addend, 1);\n        this._split.connect(this._sideSubtract, 0);\n        this._split.connect(this._sideSubtract.subtrahend, 1);\n        this._midAdd.connect(this.mid);\n        this._sideSubtract.connect(this.side);\n    }\n    dispose() {\n        super.dispose();\n        this.mid.dispose();\n        this.side.dispose();\n        this._midAdd.dispose();\n        this._sideSubtract.dispose();\n        this._split.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MidSideSplit.js.map"]},"metadata":{},"sourceType":"module"}