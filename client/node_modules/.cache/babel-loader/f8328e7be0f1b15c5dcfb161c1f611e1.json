{"ast":null,"code":"// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\n//import { SideNav } from '../SideNav';\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const matthewMadore_Visual = new Visualizer('matthewMadore', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2; // console.log('width: ' + width)\n  // console.log('height: ' + height)\n  //const dim = Math.min(width, height);\n  // const fftSize = 2048;\n  // analyzer.set({\n  //   type: 'fft',\n  //   size: fftSize,\n  //   smoothing: 0.5\n  // });\n\n  p5.background(0, 0, 0, 255);\n  p5.stroke(255, 255, 255, 255); // for (let i = 0; i < 220; i++) {\n  //   p5.strokeWeight(dim * 0.01);\n  //   p5.stroke(255 - i, 255-i, 255-i, 255);\n  //   p5.noFill();\n  // }\n\n  p5.angleMode('degrees');\n  const values = analyzer.getValue();\n\n  const average = array => array.reduce((a, b) => a + b) / values.length;\n\n  const numArr = values.map(value => value);\n  console.log(typeof values[0]);\n  console.log(average(values));\n  p5.translate(width / 2, height / 2);\n  const radiusRange = 1000; // r - 50px and r + 50px will be range for waveform\n\n  const radiusCenter = 200;\n  p5.noFill();\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const angle = p5.map(i, 0, values.length - 1, 0, 359);\n    const radius = p5.map(amplitude, -1, 1, radiusCenter - radiusRange, radiusCenter + radiusRange);\n    let x = radius * Math.cos(angle);\n    let y = radius * Math.sin(angle); // Place vertex-\n\n    p5.vertex(x, y);\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/nathanhildum/Documents/Programming/github/SFSU-CSC600/final-project-brute_force-600/client/src/visualizers/matthewMadore_Visual.tsx"],"names":["Visualizer","matthewMadore_Visual","p5","analyzer","width","window","innerWidth","height","innerHeight","background","stroke","angleMode","values","getValue","average","array","reduce","a","b","length","numArr","map","value","console","log","translate","radiusRange","radiusCenter","noFill","beginShape","i","amplitude","angle","radius","x","Math","cos","y","sin","vertex","endShape"],"mappings":"AAAA;AACA;AAGA;AAGA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAGA,OAAO,MAAMC,oBAAoB,GAAG,IAAID,UAAJ,CAClC,eADkC,EAElC,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC,CAFmC,CAGnC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAN,EAAAA,EAAE,CAACO,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB;AACAP,EAAAA,EAAE,CAACQ,MAAH,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAfmC,CAmBnC;AACA;AACA;AACA;AACA;;AAGAR,EAAAA,EAAE,CAACS,SAAH,CAAa,SAAb;AACA,QAAMC,MAAM,GAAGT,QAAQ,CAACU,QAAT,EAAf;;AACA,QAAMC,OAAO,GAAIC,KAAD,IAAoBA,KAAK,CAACC,MAAN,CAAa,CAACC,CAAD,EAAWC,CAAX,KAAwBD,CAAC,GAAGC,CAAzC,IAA8CN,MAAM,CAACO,MAAzF;;AACA,QAAMC,MAAM,GAAGR,MAAM,CAACS,GAAP,CAAWC,KAAK,IAAIA,KAApB,CAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOZ,MAAM,CAAC,CAAD,CAAzB;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAO,CAACF,MAAD,CAAnB;AACAV,EAAAA,EAAE,CAACuB,SAAH,CAAarB,KAAK,GAAG,CAArB,EAAwBG,MAAM,GAAG,CAAjC;AACA,QAAMmB,WAAW,GAAG,IAApB,CAjCmC,CAiCT;;AAC1B,QAAMC,YAAY,GAAG,GAArB;AAEAzB,EAAAA,EAAE,CAAC0B,MAAH;AACA1B,EAAAA,EAAE,CAAC2B,UAAH;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,MAAM,CAACO,MAA3B,EAAmCW,CAAC,EAApC,EAAwC;AACtC,UAAMC,SAAS,GAAGnB,MAAM,CAACkB,CAAD,CAAxB;AACA,UAAME,KAAK,GAAG9B,EAAE,CAACmB,GAAH,CAAOS,CAAP,EAAU,CAAV,EAAalB,MAAM,CAACO,MAAP,GAAgB,CAA7B,EAAgC,CAAhC,EAAmC,GAAnC,CAAd;AACA,UAAMc,MAAM,GAAG/B,EAAE,CAACmB,GAAH,CAAOU,SAAP,EAAkB,CAAC,CAAnB,EAAqB,CAArB,EAAuBJ,YAAY,GAACD,WAApC,EAAiDC,YAAY,GAACD,WAA9D,CAAf;AAEA,QAAIQ,CAAC,GAAID,MAAD,GAAWE,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAnB;AACA,QAAIK,CAAC,GAAGJ,MAAM,GAAGE,IAAI,CAACG,GAAL,CAASN,KAAT,CAAjB,CANsC,CAOtC;;AACA9B,IAAAA,EAAE,CAACqC,MAAH,CAAUL,CAAV,EAAaG,CAAb;AACD;;AACDnC,EAAAA,EAAE,CAACsC,QAAH;AACD,CAnDiC,CAA7B","sourcesContent":["// 3rd party library imports\n//import { Translate32 } from '@carbon/icons-react';\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n//import { SideNav } from '../SideNav';\n\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\n\nexport const matthewMadore_Visual = new Visualizer(\n  'matthewMadore',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    // console.log('width: ' + width)\n    // console.log('height: ' + height)\n    //const dim = Math.min(width, height);\n\n    // const fftSize = 2048;\n    // analyzer.set({\n    //   type: 'fft',\n    //   size: fftSize,\n    //   smoothing: 0.5\n    // });\n\n    p5.background(0, 0, 0, 255);\n    p5.stroke(255, 255, 255, 255);\n\n\n\n    // for (let i = 0; i < 220; i++) {\n    //   p5.strokeWeight(dim * 0.01);\n    //   p5.stroke(255 - i, 255-i, 255-i, 255);\n    //   p5.noFill();\n    // }\n\n\n    p5.angleMode('degrees');\n    const values = analyzer.getValue();\n    const average = (array:number[]) => array.reduce((a:number, b:number) => a + b) / values.length;\n    const numArr = values.map(value => value)\n    console.log(typeof(values[0]))\n    console.log(average(values))\n    p5.translate(width / 2, height / 2);\n    const radiusRange = 1000; // r - 50px and r + 50px will be range for waveform\n    const radiusCenter = 200;\n\n    p5.noFill();\n    p5.beginShape();\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const angle = p5.map(i, 0, values.length - 1, 0, 359);\n      const radius = p5.map(amplitude, -1,1,radiusCenter-radiusRange, radiusCenter+radiusRange )\n\n      let x = (radius) * Math.cos(angle);\n      let y = radius * Math.sin(angle);\n      // Place vertex-\n      p5.vertex(x, y);\n    }\n    p5.endShape();\n  },\n);\n\n\n\n"]},"metadata":{},"sourceType":"module"}