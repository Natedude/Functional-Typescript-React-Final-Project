{"ast":null,"code":"import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\n\nexport class StereoEffect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"StereoEffect\";\n    this.input = new Gain({\n      context: this.context\n    }); // force mono sources to be stereo\n\n    this.input.channelCount = 2;\n    this.input.channelCountMode = \"explicit\";\n    this._dryWet = this.output = new CrossFade({\n      context: this.context,\n      fade: options.wet\n    });\n    this.wet = this._dryWet.fade;\n    this._split = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._merge = new Merge({\n      context: this.context,\n      channels: 2\n    }); // connections\n\n    this.input.connect(this._split); // dry wet connections\n\n    this.input.connect(this._dryWet.a);\n\n    this._merge.connect(this._dryWet.b);\n\n    readOnly(this, [\"wet\"]);\n  }\n  /**\n   * Connect the left part of the effect\n   */\n\n\n  connectEffectLeft(...nodes) {\n    this._split.connect(nodes[0], 0, 0);\n\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 0);\n  }\n  /**\n   * Connect the right part of the effect\n   */\n\n\n  connectEffectRight(...nodes) {\n    this._split.connect(nodes[0], 1, 0);\n\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 1);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dryWet.dispose();\n\n    this._split.dispose();\n\n    this._merge.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/effect/StereoEffect.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,EAAkB,aAAlB,EAA6C,aAA7C,QAAkE,+BAAlE;AACA,SAAS,SAAT,QAA0B,gCAA1B;AAEA,SAAS,KAAT,QAAsB,4BAAtB;AACA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAIA;;AAEG;;AACH,OAAM,MAAO,YAAP,SAAiE,aAAjE,CAAuF;AA4B5F,EAAA,WAAA,CAAY,OAAZ,EAAwC;AAEvC,UAAM,OAAN;AA5BQ,SAAA,IAAA,GAAe,cAAf;AA8BR,SAAK,KAAL,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAT,CAAb,CAJuC,CAKvC;;AACA,SAAK,KAAL,CAAW,YAAX,GAA0B,CAA1B;AACA,SAAK,KAAL,CAAW,gBAAX,GAA8B,UAA9B;AAEA,SAAK,OAAL,GAAe,KAAK,MAAL,GAAc,IAAI,SAAJ,CAAc;AAC1C,MAAA,OAAO,EAAE,KAAK,OAD4B;AAE1C,MAAA,IAAI,EAAE,OAAO,CAAC;AAF4B,KAAd,CAA7B;AAIA,SAAK,GAAL,GAAW,KAAK,OAAL,CAAa,IAAxB;AACA,SAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAd;AACA,SAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAd,CAfuC,CAiBvC;;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,MAAxB,EAlBuC,CAmBvC;;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,OAAL,CAAa,CAAhC;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,OAAL,CAAa,CAAjC;;AACA,IAAA,QAAQ,CAAC,IAAD,EAAO,CAAC,KAAD,CAAP,CAAR;AACA;AAED;;AAEG;;;AACO,EAAA,iBAAiB,CAAC,GAAG,KAAJ,EAAuB;AACjD,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,CAAC,CAAD,CAAzB,EAA8B,CAA9B,EAAiC,CAAjC;;AACA,IAAA,aAAa,CAAC,GAAG,KAAJ,CAAb;AACA,IAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,MAAN,GAAa,CAAd,CAAN,EAAwB,KAAK,MAA7B,EAAqC,CAArC,EAAwC,CAAxC,CAAP;AACA;AAED;;AAEG;;;AACO,EAAA,kBAAkB,CAAC,GAAG,KAAJ,EAAuB;AAClD,SAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,CAAC,CAAD,CAAzB,EAA8B,CAA9B,EAAiC,CAAjC;;AACA,IAAA,aAAa,CAAC,GAAG,KAAJ,CAAb;AACA,IAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,MAAN,GAAa,CAAd,CAAN,EAAwB,KAAK,MAA7B,EAAqC,CAArC,EAAwC,CAAxC,CAAP;AACA;;AAEiB,SAAX,WAAW,GAAA;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,GAAG,EAAE;AAD4C,KAA3C,CAAP;AAGA;;AAED,EAAA,OAAO,GAAA;AACN,UAAM,OAAN;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA;;AAnF2F","sourceRoot":"","sourcesContent":["import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        this.name = \"StereoEffect\";\n        this.input = new Gain({ context: this.context });\n        // force mono sources to be stereo\n        this.input.channelCount = 2;\n        this.input.channelCountMode = \"explicit\";\n        this._dryWet = this.output = new CrossFade({\n            context: this.context,\n            fade: options.wet\n        });\n        this.wet = this._dryWet.fade;\n        this._split = new Split({ context: this.context, channels: 2 });\n        this._merge = new Merge({ context: this.context, channels: 2 });\n        // connections\n        this.input.connect(this._split);\n        // dry wet connections\n        this.input.connect(this._dryWet.a);\n        this._merge.connect(this._dryWet.b);\n        readOnly(this, [\"wet\"]);\n    }\n    /**\n     * Connect the left part of the effect\n     */\n    connectEffectLeft(...nodes) {\n        this._split.connect(nodes[0], 0, 0);\n        connectSeries(...nodes);\n        connect(nodes[nodes.length - 1], this._merge, 0, 0);\n    }\n    /**\n     * Connect the right part of the effect\n     */\n    connectEffectRight(...nodes) {\n        this._split.connect(nodes[0], 1, 0);\n        connectSeries(...nodes);\n        connect(nodes[nodes.length - 1], this._merge, 0, 1);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            wet: 1,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._dryWet.dispose();\n        this._split.dispose();\n        this._merge.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=StereoEffect.js.map"]},"metadata":{},"sourceType":"module"}