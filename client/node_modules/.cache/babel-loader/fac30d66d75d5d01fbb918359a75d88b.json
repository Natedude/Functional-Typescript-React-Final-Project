{"ast":null,"code":"import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\n\nexport class Instrument extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Instrument.getDefaults(), arguments));\n    /**\n     * Keep track of all events scheduled to the transport\n     * when the instrument is 'synced'\n     */\n\n    this._scheduledEvents = [];\n    /**\n     * If the instrument is currently synced\n     */\n\n    this._synced = false;\n    this._original_triggerAttack = this.triggerAttack;\n    this._original_triggerRelease = this.triggerRelease;\n    const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      volume: 0\n    });\n  }\n  /**\n   * Sync the instrument to the Transport. All subsequent calls of\n   * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n   * @example\n   * const fmSynth = new Tone.FMSynth().toDestination();\n   * fmSynth.volume.value = -6;\n   * fmSynth.sync();\n   * // schedule 3 notes when the transport first starts\n   * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n   * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n   * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n   * // start the transport to hear the notes\n   * Tone.Transport.start();\n   */\n\n\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 1);\n\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n\n    return this;\n  }\n  /**\n   * set _sync\n   */\n\n\n  _syncState() {\n    let changed = false;\n\n    if (!this._synced) {\n      this._synced = true;\n      changed = true;\n    }\n\n    return changed;\n  }\n  /**\n   * Wrap the given method so that it can be synchronized\n   * @param method Which method to wrap and sync\n   * @param  timePosition What position the time argument appears in\n   */\n\n\n  _syncMethod(method, timePosition) {\n    const originalMethod = this[\"_original_\" + method] = this[method];\n\n    this[method] = (...args) => {\n      const time = args[timePosition];\n      const id = this.context.transport.schedule(t => {\n        args[timePosition] = t;\n        originalMethod.apply(this, args);\n      }, time);\n\n      this._scheduledEvents.push(id);\n    };\n  }\n  /**\n   * Unsync the instrument from the Transport\n   */\n\n\n  unsync() {\n    this._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\n    this._scheduledEvents = [];\n\n    if (this._synced) {\n      this._synced = false;\n      this.triggerAttack = this._original_triggerAttack;\n      this.triggerRelease = this._original_triggerRelease;\n    }\n\n    return this;\n  }\n  /**\n   * Trigger the attack and then the release after the duration.\n   * @param  note     The note to trigger.\n   * @param  duration How long the note should be held for before\n   *                         triggering the release. This value must be greater than 0.\n   * @param time  When the note should be triggered.\n   * @param  velocity The velocity the note should be triggered at.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger \"C4\" for the duration of an 8th note\n   * synth.triggerAttackRelease(\"C4\", \"8n\");\n   */\n\n\n  triggerAttackRelease(note, duration, time, velocity) {\n    const computedTime = this.toSeconds(time);\n    const computedDuration = this.toSeconds(duration);\n    this.triggerAttack(note, computedTime, velocity);\n    this.triggerRelease(computedTime + computedDuration);\n    return this;\n  }\n  /**\n   * clean up\n   * @returns {Instrument} this\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._volume.dispose();\n\n    this.unsync();\n    this._scheduledEvents = [];\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../Tone/instrument/Instrument.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\nexport class Instrument extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Instrument.getDefaults(), arguments));\n        /**\n         * Keep track of all events scheduled to the transport\n         * when the instrument is 'synced'\n         */\n        this._scheduledEvents = [];\n        /**\n         * If the instrument is currently synced\n         */\n        this._synced = false;\n        this._original_triggerAttack = this.triggerAttack;\n        this._original_triggerRelease = this.triggerRelease;\n        const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n        this._volume = this.output = new Volume({\n            context: this.context,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        readOnly(this, \"volume\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            volume: 0,\n        });\n    }\n    /**\n     * Sync the instrument to the Transport. All subsequent calls of\n     * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n     * @example\n     * const fmSynth = new Tone.FMSynth().toDestination();\n     * fmSynth.volume.value = -6;\n     * fmSynth.sync();\n     * // schedule 3 notes when the transport first starts\n     * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n     * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n     * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n     * // start the transport to hear the notes\n     * Tone.Transport.start();\n     */\n    sync() {\n        if (this._syncState()) {\n            this._syncMethod(\"triggerAttack\", 1);\n            this._syncMethod(\"triggerRelease\", 0);\n        }\n        return this;\n    }\n    /**\n     * set _sync\n     */\n    _syncState() {\n        let changed = false;\n        if (!this._synced) {\n            this._synced = true;\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * Wrap the given method so that it can be synchronized\n     * @param method Which method to wrap and sync\n     * @param  timePosition What position the time argument appears in\n     */\n    _syncMethod(method, timePosition) {\n        const originalMethod = this[\"_original_\" + method] = this[method];\n        this[method] = (...args) => {\n            const time = args[timePosition];\n            const id = this.context.transport.schedule((t) => {\n                args[timePosition] = t;\n                originalMethod.apply(this, args);\n            }, time);\n            this._scheduledEvents.push(id);\n        };\n    }\n    /**\n     * Unsync the instrument from the Transport\n     */\n    unsync() {\n        this._scheduledEvents.forEach(id => this.context.transport.clear(id));\n        this._scheduledEvents = [];\n        if (this._synced) {\n            this._synced = false;\n            this.triggerAttack = this._original_triggerAttack;\n            this.triggerRelease = this._original_triggerRelease;\n        }\n        return this;\n    }\n    /**\n     * Trigger the attack and then the release after the duration.\n     * @param  note     The note to trigger.\n     * @param  duration How long the note should be held for before\n     *                         triggering the release. This value must be greater than 0.\n     * @param time  When the note should be triggered.\n     * @param  velocity The velocity the note should be triggered at.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger \"C4\" for the duration of an 8th note\n     * synth.triggerAttackRelease(\"C4\", \"8n\");\n     */\n    triggerAttackRelease(note, duration, time, velocity) {\n        const computedTime = this.toSeconds(time);\n        const computedDuration = this.toSeconds(duration);\n        this.triggerAttack(note, computedTime, velocity);\n        this.triggerRelease(computedTime + computedDuration);\n        return this;\n    }\n    /**\n     * clean up\n     * @returns {Instrument} this\n     */\n    dispose() {\n        super.dispose();\n        this._volume.dispose();\n        this.unsync();\n        this._scheduledEvents = [];\n        return this;\n    }\n}\n//# sourceMappingURL=Instrument.js.map"]},"metadata":{},"sourceType":"module"}